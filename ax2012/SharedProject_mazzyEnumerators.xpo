Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: JOB

; Microsoft Dynamics AX Job: SysEnumeratorExample01_Int unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #SysEnumeratorExample01_Int
    #//
    #// mazzy, https://github.com/mazzy-ax/SysEnumerators
    #//
    #static void SysEnumeratorExample01_Int(Args _args)
    #{
    #    SysEnumerator se = SysEnumerator::newFromToInt(2, 9, 3);
    #
    #    while( se.moveNext() )
    #    {
    #        info(strfmt("%1", se.current()));
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{754AD737-E05C-413A-9A0E-1ED4D4741E55}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: SysEnumeratorExample02_Date unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #SysEnumeratorExample02_Date
    #//
    #// mazzy, https://github.com/mazzy-ax/SysEnumerators
    #//
    #static void SysEnumeratorExample02_Date(Args _args)
    #{
    #    SysEnumerator se = SysEnumerator::newFromToDate(01\04\2018, 30\04\2018, 5);
    #
    #    while( se.moveNext() )
    #    {
    #        info(strfmt("%1, %2", se.current(), dayofwk(se.current())));
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{B81F8565-0A30-48D1-B498-00A30B962158}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: SysEnumeratorExample03_Container unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #SysEnumeratorExample03_Container
    #//
    #// mazzy, https://github.com/mazzy-ax/SysEnumerators
    #//
    #static void SysEnumeratorExample03_Container(Args _args)
    #{
    #    container c = ['a', 'b', 1, 'd', systemdateget(), 'f'];
    #    SysEnumerator se = SysEnumerator::newFromContainer(c);
    #
    #    while( se.moveNext() )
    #    {
    #        info(strfmt("%1", se.current()));
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{FD3FB1F6-83D8-48A9-B4DB-67C53C0638D8}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: SysEnumeratorExample04_Enum unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #SysEnumeratorExample04_Enum
    #//
    #// mazzy, https://github.com/mazzy-ax/SysEnumerators
    #//
    #static void SysEnumeratorExample04_Enum(Args _args)
    #{
    #    LedgerTransType transType;
    #    SysEnumerator se = SysEnumerator::newFromEnum(transType);
    #
    #    while( se.moveNext() )
    #    {
    #        info(strfmt("%1 %2 %3 %4", se.current(), se.currentIdx(), se.currentKey(), se.currentValue()));
    #    }
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{964B5F61-B01E-4BCD-927B-81661F6A6A17}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: SysEnumeratorExample05_Fields unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #SysEnumeratorExample05_Fields
    #//
    #// mazzy, https://github.com/mazzy-ax/SysEnumerators
    #//
    #static void SysEnumeratorExample05_Fields(Args _args)
    #{
    #    CustTable custTable;
    #    SysEnumerator_DictTable_Field se = SysEnumerator_DictTable_Field::construct(new DictTable(custTable.TableId));
    #
    #    while( se.moveNext() )
    #    {
    #        info(strfmt("%1, %2, %3", se.current(), se.currentKey(), se.currentValue().toString()));
    #    }
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{17A47E4A-E2AC-43E8-B55D-B6FCEF21ABC1}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: SysEnumeratorExample06_File unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #SysEnumeratorExample06_File
    #//
    #// mazzy, https://github.com/mazzy-ax/SysEnumerators
    #//
    #static void SysEnumeratorExample06_File(Args _args)
    #{
    #    #WinAPI
    #
    #    FileName myDocumentsFolder = WinAPI::getFolderPath(#CSIDL_Personal);
    #    Filename fileName = myDocumentsFolder + @'\test.csv';
    #    CommaIo commaIo = new CommaIo(fileName, 'R');
    #    SysEnumerator_CommaIo se = SysEnumerator_CommaIo::construct(commaIo);
    #
    #    while( se.moveNext() )
    #    {
    #        info(Con2Str(se.current()));
    #    }
    #
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{79ACAEEA-FAA1-48B2-951D-FBA4B35C5DF6}
  ENDPROPERTIES
  

***Element: JOB

; Microsoft Dynamics AX Job: SysEnumeratorExample07_Group unloaded
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #SysEnumeratorExample07_Group
    #//
    #// mazzy, https://github.com/mazzy-ax/SysEnumerators
    #//
    #static void SysEnumeratorExample07_Group(Args _args)
    #{
    #    SysEnumerator_SysOperationProgress progress = SysEnumerator_SysOperationProgress::construct();
    #    SysEnumerator_FillSetFromValue values2set = SysEnumerator_FillSetFromValue::construct();
    #
    #    SysEnumerator se = SysEnumerator::construct()
    #        .add(progress)
    #        .add(values2set)
    #        .add(SysEnumerator_First::construct(1000));
    #
    #    while( se.moveNext() )
    #    {
    #        // my super business logic
    #
    #        progress.base().setText(strfmt("%1, %2", se.current(), values2set.base().elements()));
    #    }
    #
    #    info(values2set.base().toString());
    #}
  ENDSOURCE
  PROPERTIES
    Origin              #{5C17717C-1BD1-49B6-9E78-23681563021E}
  ENDPROPERTIES
  

***Element: DBE

; Microsoft Dynamics AX Enumtype : SysEnumeratorPosition unloaded
; --------------------------------------------------------------------------------
  ENUMTYPEVERSION 1
  
  ENUMTYPE #SysEnumeratorPosition
    PROPERTIES
      Name                #SysEnumeratorPosition
      UseEnumValue        #Yes
      Origin              #{89DC1689-EDA6-46AA-B117-318CED5E65E0}
    ENDPROPERTIES
    
    TYPEELEMENTS
      #BeforeFirstElement
      PROPERTIES
        Name                #BeforeFirstElement
        Label               #BeforeFirstElement
        EnumValue           #0
      ENDPROPERTIES
      
      #Inside
      PROPERTIES
        Name                #Inside
        Label               #Inside
        EnumValue           #1
      ENDPROPERTIES
      
      #Outside
      PROPERTIES
        Name                #Outside
        Label               #Outside
        EnumValue           #2
      ENDPROPERTIES
      
    ENDTYPEELEMENTS
  ENDENUMTYPE
  

***Element: CLS

; Microsoft Dynamics AX Class: SysDictEnum unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysDictEnum
    PROPERTIES
      Name                #SysDictEnum
      Extends             #DictEnum
      Origin              #{2D0B03D6-0000-1000-ED9D-E2FC79637445}
    ENDPROPERTIES
    
    METHODS
      SOURCE #newFrom
        #public static SysDictEnum newFrom(anytype enum)
        #{
        #    DictEnum            dictEnum;
        #    SysDictEnum         sysDictEnum;
        #    SysEnumerator_Enum  sysEnumerator_Enum;
        #
        #    switch( typeof(enum) )
        #    {
        #        case types::Enum:
        #            sysDictEnum = SysDictEnum::newFromEnum(enum);
        #            break;
        #
        #        case types::Integer:
        #            sysDictEnum = new SysDictEnum(enum);
        #
        #        case types::Class:
        #            sysDictEnum = SysDictEnum::newFromObject(enum);
        #
        #        default:
        #            throw error(Error::wrongUseOfFunction(funcname()));
        #    }
        #
        #    return sysDictEnum;
        #}
      ENDSOURCE
      SOURCE #newFromEnum
        #public static SysDictEnum newFromEnum(anytype enum)
        #{
        #    enumId          enumId          = DictEnum::value2id(enum);
        #    SysDictEnum     sysDictEnum     = new SysDictEnum(enumId);
        #
        #    return sysDictEnum;
        #}
      ENDSOURCE
      SOURCE #newFromObject
        #public static SysDictEnum newFromObject(object enum)
        #{
        #    SysDictEnum  sysDictEnum;
        #    classId  enumClassId = classidget(enum);
        #
        #    SysDictEnum fromDictEnum(DictEnum obj)
        #    {
        #        return new SysDictEnum(obj.id());
        #    }
        #
        #    SysDictEnum fromSysEnumerator_Enum(sysEnumerator_Enum obj)
        #    {
        #        return obj.base();
        #    }
        #;
        #    Debug::assert(enum != null);
        #
        #    switch( enumClassId )
        #    {
        #        case classnum(SysDictEnum):
        #            sysDictEnum = enum;
        #            break;
        #
        #        case classnum(DictEnum):
        #            sysDictEnum = fromDictEnum(enum);
        #            break;
        #
        #        case classnum(SysEnumerator_Enum):
        #            sysDictEnum = fromSysEnumerator_Enum(enum);
        #            break;
        #
        #        default:
        #            // extra slow calculations
        #            if( SysDictClass::isEqualOrSuperclass(enumClassId, classnum(SysDictEnum)) )
        #            {
        #                sysDictEnum = enum;
        #            }
        #            else if( SysDictClass::isEqualOrSuperclass(enumClassId, classnum(DictEnum)) )
        #            {
        #                sysDictEnum = fromDictEnum(enum);
        #            }
        #            else if( SysDictClass::isEqualOrSuperclass(enumClassId, classnum(SysEnumerator_Enum)) )
        #            {
        #                sysDictEnum = fromSysEnumerator_Enum(enum);
        #            }
        #            else
        #            {
        #                throw error(Error::wrongUseOfFunction(funcname()));
        #            }
        #            break;
        #    }
        #
        #    return sysDictEnum;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: ISysSequence unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #ISysSequence
    PROPERTIES
      Name                #ISysSequence
      Origin              #{9F8F69EF-758A-4694-9998-71C07A336AF6}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public interface ISysSequence
        #{
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations()
        #{
        #}
      ENDSOURCE
      SOURCE #xClone
        #public ISysSequence xClone()
        #{
        #}
      ENDSOURCE
      SOURCE #xContains
        #public boolean xContains(anytype value)
        #{
        #}
      ENDSOURCE
      SOURCE #xCover
        #public boolean xCover(anytype value)
        #{
        #}
      ENDSOURCE
      SOURCE #xDistance
        #public anytype xDistance()
        #{
        #}
      ENDSOURCE
      SOURCE #xEnd
        #public anyType xEnd()
        #{
        #}
      ENDSOURCE
      SOURCE #xEqual
        #public boolean xEqual(ISysSequence range)
        #{
        #}
      ENDSOURCE
      SOURCE #xGetNext
        #public anytype xGetNext(anytype value)
        #{
        #}
      ENDSOURCE
      SOURCE #xIn
        #public boolean xIn(ISysSequence otherSequence)
        #{
        #}
      ENDSOURCE
      SOURCE #xIsBoundary
        #public boolean xIsBoundary(anytype value)
        #{
        #}
      ENDSOURCE
      SOURCE #xNormalize
        #public ISysSequence xNormalize()
        #{
        #}
      ENDSOURCE
      SOURCE #xReverse
        #public ISysSequence xReverse()
        #{
        #}
      ENDSOURCE
      SOURCE #xReversed
        #public boolean xReversed()
        #{
        #}
      ENDSOURCE
      SOURCE #xReverseStep
        #public anytype xReverseStep()
        #{
        #}
      ENDSOURCE
      SOURCE #xStart
        #public anytype xStart()
        #{
        #}
      ENDSOURCE
      SOURCE #xStep
        #public anytype xStep()
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: ISysEnumerator unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  INTERFACE #ISysEnumerator
    PROPERTIES
      Name                #ISysEnumerator
      Origin              #{BD6E04E0-E157-433A-94EF-33A8F70EBD57}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public interface ISysEnumerator
        #{
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #}
      ENDSOURCE
      SOURCE #moveNext
        #public boolean moveNext()
        #{
        #}
      ENDSOURCE
      SOURCE #reset
        #//TODO mazzy: extract to special interface?
        #public void reset()
        #{
        #}
      ENDSOURCE
      SOURCE #skip
        #// TODO int64?
        #public boolean skip(int items = 1)
        #{
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: xSysEnumerator unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #xSysEnumerator
    PROPERTIES
      Name                #xSysEnumerator
      Origin              #{45289936-D226-4403-8CF4-9B915C7C6E62}
    ENDPROPERTIES
    
    METHODS
      SOURCE #begin
        #/// <remarks>
        #/// <remarks>
        #/// Предполагается, что класс потомок может реализовать достаточно тяжеловесную бизнес-логику.
        #/// Поэтому необходимо минимизировать число действий в классе-потомке.
        #///
        #/// Поэтому в классе-потомке сначала должен вызываться super().
        #/// Свои действия класс-потомок должен выполнять только если super возвратил true.
        #///
        #/// Первый вариант реализации:
        #///     protected boolean begin()
        #///     {
        #///         return super() && this.myBeginAction();
        #///     }
        #///
        #/// Второй вариант реализации:
        #///     protected boolean begin()
        #///     {
        #///         boolean ret = super();
        #///
        #///         if( ret )
        #///         {
        #///             // myBeginActions
        #///         }
        #///
        #///         return ret;
        #///     }
        #/// </remarks>
        #protected boolean begin()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public abstract class xSysEnumerator implements ISysEnumerator
        #{
        #    SysEnumeratorPosition position;
        #}
      ENDSOURCE
      SOURCE #currentIdxProvided
        #protected boolean currentIdxProvided()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #definitionString
        #public str definitionString()
        #{
        #    //TODO mazzy
        #    return '';
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = int64Max();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #eventAddedToGroup
        #protected void eventAddedToGroup(SysEnumeratorGroup enumeratorGroup)
        #{
        #}
      ENDSOURCE
      SOURCE #init
        #/// <remarks>
        #/// может вызываться повторно. например, из reset();
        #/// </remarks>
        #protected void init()
        #{;
        #    position = SysEnumeratorPosition::BeforeFirstElement;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    return position != SysEnumeratorPosition::Outside;
        #}
      ENDSOURCE
      SOURCE #moveNext
        #public boolean moveNext()
        #{
        #    boolean ret = this.moveNextPre();
        #
        #    if( ret )
        #    {
        #        switch(this.position())
        #        {
        #            case SysEnumeratorPosition::Inside:
        #                ret = this.next();
        #                ret = ret && this.more();
        #                this.setPosition(ret);
        #                break;
        #
        #            case SysEnumeratorPosition::BeforeFirstElement:
        #                ret = this.begin();
        #                ret = ret && this.more();
        #                this.setPosition(ret);
        #                break;
        #
        #            case SysEnumeratorPosition::Outside:
        #                ret = false;
        #                break;
        #
        #            default:
        #                throw error(Error::wrongUseOfFunction(funcname()));
        #        }
        #    }
        #
        #    ret = this.moveNextPost(ret);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #moveNextPost
        #protected boolean moveNextPost(boolean ret)
        #{
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #moveNextPre
        #protected boolean moveNextPre()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #new
        #/// <remarks>
        #/// в new() потомков рекомендуется вызывать super() после всех инициализаций.
        #/// </remarks>
        #public void new()
        #{
        #    this.init();
        #}
      ENDSOURCE
      SOURCE #next
        #/// <remarks>
        #/// Предполагается, что класс потомок может реализовать достаточно тяжеловесную бизнес-логику.
        #/// Поэтому необходимо минимизировать число действий в классе-потомке.
        #///
        #/// Поэтому в классе-потомке сначала должен вызываться super().
        #/// Свои действия класс-потомок должен выполнять только если super возвратил true.
        #///
        #/// Первый вариант реализации:
        #///     protected boolean next()
        #///     {
        #///         boolean ret = super() && this.myNextAction();
        #///
        #///         return ret;
        #///     }
        #///
        #/// Второй вариант реализации:
        #///     protected boolean begin()
        #///     {
        #///         boolean ret = super();
        #///
        #///         if( ret )
        #///         {
        #///             // myNextActions
        #///         }
        #///
        #///         return ret;
        #///     }
        #/// </remarks>
        #protected boolean next()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #position
        #public SysEnumeratorPosition position()
        #{
        #    return position;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    boolean ret = this.resetPre();
        #
        #    if( ret )
        #    {
        #        this.init();
        #    }
        #
        #    this.resetPost(ret);
        #}
      ENDSOURCE
      SOURCE #resetPost
        #protected boolean resetPost(boolean ret)
        #{
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #resetPre
        #protected boolean resetPre()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #setPosition
        #protected void setPosition(boolean moveNextResult)
        #{
        #    if( moveNextResult )
        #    {
        #        position = SysEnumeratorPosition::Inside;
        #    }
        #    else
        #    {
        #        position = SysEnumeratorPosition::Outside;
        #    }
        #}
      ENDSOURCE
      SOURCE #skip
        #public boolean skip(int items = 1)
        #{
        #    boolean ret = this.skipPre();
        #
        #    while(ret && (items > 0) && this.moveNext())
        #    {
        #        items--;
        #    }
        #
        #    ret = this.skipPost(ret);
        #
        #    return ret && (items == 0);
        #}
      ENDSOURCE
      SOURCE #skipPost
        #protected boolean skipPost(boolean ret)
        #{
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #skipPre
        #protected boolean skipPre()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString()
        #{
        #    //TODO mazzy
        #    return '';
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #abstract public anytype xCurrent()
        #{
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #abstract public anytype xCurrentIdx()
        #{
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #abstract public anytype xCurrentKey()
        #{
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #abstract public anytype xCurrentValue()
        #{
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceAmount unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceAmount
    PROPERTIES
      Name                #SysSequenceAmount
      Origin              #{B38B8966-EAF8-4411-A272-9B6CCAE01E2F}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceAmount implements ISysSequence
        #{
        #    Amount start;
        #    Amount end;
        #    Amount step;
        #}
      ENDSOURCE
      SOURCE #clone
        #public SysSequenceAmount clone()
        #{
        #    SysSequenceAmount range = SysSequenceAmount::construct(this.start(), this.end(), this.step());
        #
        #    return range;
        #}
      ENDSOURCE
      SOURCE #contains
        #public boolean contains(amount value)
        #{
        #    boolean ret = (this.start() <= value && value <= this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #cover
        #public boolean cover(amount value)
        #{
        #    boolean ret = (this.start() < value && value < this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #distance
        #// переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
        #public amount distance()
        #{
        #    amount ret = this.end() - this.start();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #end
        #public amount end()
        #{
        #    return end;
        #}
      ENDSOURCE
      SOURCE #equal
        #public boolean equal(SysSequenceAmount sequence)
        #{
        #    boolean ret =   sequence &&
        #                    this.start() == sequence.start() &&
        #                    this.end() == sequence.end() &&
        #                    this.step() == sequence.step();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations()
        #{
        #    int64 ret = int64Max();
        #    Amount distance = this.distance();
        #    boolean overflow = this.cover(0) && (distance <= 0.0001);
        #
        #    if( overflow )
        #    {
        #        ret = int64Max();
        #    }
        #    else if( distance == 0 )
        #    {
        #        ret = 1;
        #    }
        #    else if( ((distance < 0) && (this.step() > 0))
        #            || ((distance > 0) && (this.step() < 0)) )
        #    {
        #        ret = 0;
        #    }
        #    else if( step == 1 )
        #    {
        #        ret = any2int64(distance + 1.0);
        #    }
        #    else
        #    {
        #        ret = any2int64(distance / this.step() + 1.0);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #public SysEnumerator getEnumerator()
        #{
        #    return SysEnumerator::newFromSequence(this);
        #}
      ENDSOURCE
      SOURCE #getNext
        #public amount getNext(amount value)
        #{
        #    return value + this.step();
        #}
      ENDSOURCE
      SOURCE #in
        #public boolean in(SysSequenceAmount sequence)
        #{
        #    boolean ret = sequence && (sequence.start() <= this.start()) && (this.end() <= sequence.end());
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isBoundary
        #public boolean isBoundary(amount value)
        #{
        #    return (value == this.start()) || (value == this.end());
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(amount _start = 1, amount _end = RealMax(), amount _step = 1)
        #{
        #    Debug::assert(_step != 0.0);
        #
        #    start = _start;
        #    end = _end;
        #    step = _step;
        #}
      ENDSOURCE
      SOURCE #normalize
        #public SysSequenceAmount normalize()
        #{
        #    SysSequenceAmount sequence;
        #
        #    if( this.reversed() )
        #    {
        #        sequence = this.reverse();
        #    }
        #    else
        #    {
        #        sequence = this.clone();
        #    }
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reverse
        #public SysSequenceAmount reverse()
        #{
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(this.end(), this.start(), this.reverseStep());
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reversed
        #public boolean reversed()
        #{
        #    boolean ret = this.start() > this.end();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reverseStep
        #public amount reverseStep()
        #{
        #    return -step;
        #}
      ENDSOURCE
      SOURCE #start
        #public amount start()
        #{
        #    return start;
        #}
      ENDSOURCE
      SOURCE #step
        #public amount step()
        #{
        #    return step;
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString()
        #{
        #    return strfmt('[%1..%2:%3]', this.start(), this.end(), this.step());
        #}
      ENDSOURCE
      SOURCE #xClone
        #public ISysSequence xClone()
        #{
        #    return this.clone();
        #}
      ENDSOURCE
      SOURCE #xContains
        #public boolean xContains(anytype value)
        #{
        #    return this.contains(value);
        #}
      ENDSOURCE
      SOURCE #xCover
        #public boolean xCover(anytype value)
        #{
        #    return this.cover(value);
        #}
      ENDSOURCE
      SOURCE #xDistance
        #// переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
        #public anytype xDistance()
        #{
        #    return this.distance();
        #}
      ENDSOURCE
      SOURCE #xEnd
        #public anytype xEnd()
        #{
        #    return this.end();
        #}
      ENDSOURCE
      SOURCE #xEqual
        #public boolean xEqual(ISysSequence sequence)
        #{
        #    return this.equal(sequence as SysSequenceAmount);
        #}
      ENDSOURCE
      SOURCE #xGetNext
        #public anytype xGetNext(anytype value)
        #{
        #    return this.getNext(value);
        #}
      ENDSOURCE
      SOURCE #xIn
        #public boolean xIn(ISysSequence sequence)
        #{
        #    return this.in(sequence as SysSequenceAmount);
        #}
      ENDSOURCE
      SOURCE #xIsBoundary
        #public boolean xIsBoundary(anytype value)
        #{
        #    return this.isBoundary(value);
        #}
      ENDSOURCE
      SOURCE #xNormalize
        #public ISysSequence xNormalize()
        #{
        #    return this.normalize();
        #}
      ENDSOURCE
      SOURCE #xReverse
        #public ISysSequence xReverse()
        #{
        #    return this.reverse();
        #}
      ENDSOURCE
      SOURCE #xReversed
        #public boolean xReversed()
        #{
        #    return this.reversed();
        #}
      ENDSOURCE
      SOURCE #xReverseStep
        #public anytype xReverseStep()
        #{
        #    return this.reverseStep();
        #}
      ENDSOURCE
      SOURCE #xStart
        #public anytype xStart()
        #{
        #    return this.start();
        #}
      ENDSOURCE
      SOURCE #xStep
        #public anytype xStep()
        #{
        #    return this.step();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysSequenceAmount construct(amount _start = 1, amount _end = RealMax(), amount _step = 1)
        #{
        #    SysSequenceAmount sequence = new SysSequenceAmount(_start, _end, _step);
        #
        #    return sequence;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceAmountTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceAmountTest
    PROPERTIES
      Name                #SysSequenceAmountTest
      Extends             #SysTestCase
      Origin              #{E4A1DE2F-280F-42AC-99B1-43727065F10A}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceAmountTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysSequenceAmount range = SysSequenceAmount::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(1, range.start());
        #    this.assertEquals(RealMax(), range.end());
        #}
      ENDSOURCE
      SOURCE #test2
        #void test2()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 2.0;
        #    int64 iterations = 2;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 3.0;
        #    int64 iterations = 2;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #    SysSequenceAmount clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount middle = 0.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount middle = 0.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceAmount sequence = SysSequenceAmount::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(1.0, sequence.start());
        #    this.assertEquals(RealMax(), sequence.end());
        #    this.assertEquals(RealMax() - 1, sequence.distance());
        #    this.assertEquals(1.0, sequence.step());
        #
        #    this.assertEquals(RealMax(), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysSequenceAmount range = SysSequenceAmount::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(RealMax() - 1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceAmount range = SysSequenceAmount::construct(RealMax(), RealMin());
        #
        #    this.assertNotNull(range);
        #
        #    //this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceAmount range = SysSequenceAmount::construct(RealMin(), RealMax());
        #
        #    this.assertNotNull(range);
        #
        #    //this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #    SysSequenceAmount middleRange = SysSequenceAmount::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #    SysSequenceAmount middleRange = SysSequenceAmount::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMaxMin1
        #void testMaxMin1()
        #{
        #    Amount start = RealMax();
        #    Amount end = RealMin();
        #    Amount step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin2
        #void testMaxMin2()
        #{
        #    Amount start = RealMax();
        #    Amount end = RealMin();
        #    Amount step = 2.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin3
        #void testMaxMin3()
        #{
        #    Amount start = RealMax();
        #    Amount end = RealMin();
        #    Amount step = 3.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    Amount start = RealMin();
        #    Amount end = RealMax();
        #    Amount step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    Amount start = RealMin();
        #    Amount end = RealMax();
        #    Amount step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    Amount start = RealMin();
        #    Amount end = RealMax();
        #    Amount step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    Amount start = -1;
        #    Amount end = RealMax();
        #    Amount step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    Amount start = -1;
        #    Amount end = RealMax();
        #    Amount step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    Amount start = -1;
        #    Amount end = RealMax();
        #    Amount step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative2
        #void testNegative2()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 2.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #    SysSequenceAmount reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse2
        #void testReverse2()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 2.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceAnytype unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceAnytype
    PROPERTIES
      Name                #SysSequenceAnytype
      Origin              #{2DD5F74A-71B8-41FD-85BE-2B5F20FFEF64}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceAnytype implements ISysSequence
        #{
        #    anytype start;
        #    anytype end;
        #    anytype step;
        #}
      ENDSOURCE
      SOURCE #clone
        #public SysSequenceAnytype clone()
        #{
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(this.start(), this.end(), this.step());
        #
        #    return range;
        #}
      ENDSOURCE
      SOURCE #contains
        #public boolean contains(anytype value)
        #{
        #    boolean ret = (this.start() <= value && value <= this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #cover
        #public boolean cover(anytype value)
        #{
        #    boolean ret = (this.start() < value && value < this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #distance
        #// переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
        #public anytype distance()
        #{
        #    anytype ret = this.end() - this.start();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #end
        #public anytype end()
        #{
        #    return end;
        #}
      ENDSOURCE
      SOURCE #equal
        #public boolean equal(SysSequenceAnytype sequence)
        #{
        #    boolean ret =   sequence &&
        #                    this.start() == sequence.start() &&
        #                    this.end() == sequence.end() &&
        #                    this.step() == sequence.step();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations()
        #{
        #    int64 ret = int64Max();
        #    anytype distance = this.distance();
        #    boolean overflow = this.cover(0) && (distance <= 0.0001);
        #
        #    if( overflow )
        #    {
        #        ret = int64Max();
        #    }
        #    else if( distance == 0 )
        #    {
        #        ret = 1;
        #    }
        #    else if( ((distance < 0) && (this.step() > 0))
        #          || ((distance > 0) && (this.step() < 0)) )
        #    {
        #        ret = 0;
        #    }
        #    else if( step == 1 )
        #    {
        #        ret = any2int64(distance + 1.0);
        #    }
        #    else
        #    {
        #        ret = any2int64(distance / this.step() + 1.0);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #public SysEnumerator getEnumerator()
        #{
        #    return SysEnumerator::newFromSequence(this);
        #}
      ENDSOURCE
      SOURCE #getNext
        #public anytype getNext(anytype value)
        #{
        #    return value + this.step();
        #}
      ENDSOURCE
      SOURCE #in
        #public boolean in(SysSequenceAnytype sequence)
        #{
        #    boolean ret = sequence && (sequence.start() <= this.start()) && (this.end() <= sequence.end());
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isBoundary
        #public boolean isBoundary(anytype value)
        #{
        #    return (value == this.start()) || (value == this.end());
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(anytype _start, anytype _end, anytype _step)
        #{
        #    start = _start;
        #    end = _end;
        #    step = _step;
        #}
      ENDSOURCE
      SOURCE #normalize
        #public SysSequenceAnytype normalize()
        #{
        #    SysSequenceAnytype sequence;
        #
        #    if( this.reversed() )
        #    {
        #        sequence = this.reverse();
        #    }
        #    else
        #    {
        #        sequence = this.clone();
        #    }
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reverse
        #public SysSequenceAnytype reverse()
        #{
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(this.end(), this.start(), this.reverseStep());
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reversed
        #public boolean reversed()
        #{
        #    boolean ret = this.start() > this.end();
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reverseStep
        #public anytype reverseStep()
        #{
        #    return 0-step;
        #}
      ENDSOURCE
      SOURCE #start
        #public anytype start()
        #{
        #    return start;
        #}
      ENDSOURCE
      SOURCE #step
        #public anytype step()
        #{
        #    return step;
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString()
        #{
        #    return strfmt('[%1..%2:%3]', this.start(), this.end(), this.step());
        #}
      ENDSOURCE
      SOURCE #xClone
        #public ISysSequence xClone()
        #{
        #    return this.clone();
        #}
      ENDSOURCE
      SOURCE #xContains
        #public boolean xContains(anytype value)
        #{
        #    return this.contains(value);
        #}
      ENDSOURCE
      SOURCE #xCover
        #public boolean xCover(anytype value)
        #{
        #    return this.cover(value);
        #}
      ENDSOURCE
      SOURCE #xDistance
        #// переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
        #public anytype xDistance()
        #{
        #    return this.distance();
        #}
      ENDSOURCE
      SOURCE #xEnd
        #public anytype xEnd()
        #{
        #    return this.end();
        #}
      ENDSOURCE
      SOURCE #xEqual
        #public boolean xEqual(ISysSequence range)
        #{
        #    return this.equal(range as SysSequenceAnytype);
        #}
      ENDSOURCE
      SOURCE #xGetNext
        #public anytype xGetNext(anytype value)
        #{
        #    return this.getNext(value);
        #}
      ENDSOURCE
      SOURCE #xIn
        #public boolean xIn(ISysSequence range)
        #{
        #    return this.in(range as SysSequenceAnytype);
        #}
      ENDSOURCE
      SOURCE #xIsBoundary
        #public boolean xIsBoundary(anytype value)
        #{
        #    return this.isBoundary(value);
        #}
      ENDSOURCE
      SOURCE #xNormalize
        #public ISysSequence xNormalize()
        #{
        #    return this.normalize();
        #}
      ENDSOURCE
      SOURCE #xReverse
        #public ISysSequence xReverse()
        #{
        #    return this.reverse();
        #}
      ENDSOURCE
      SOURCE #xReversed
        #public boolean xReversed()
        #{
        #    return this.reversed();
        #}
      ENDSOURCE
      SOURCE #xReverseStep
        #public anytype xReverseStep()
        #{
        #    return this.reverseStep();
        #}
      ENDSOURCE
      SOURCE #xStart
        #public anytype xStart()
        #{
        #    return this.start();
        #}
      ENDSOURCE
      SOURCE #xStep
        #public anytype xStep()
        #{
        #    return this.step();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysSequenceAnytype construct(anytype _start, anytype _end, anytype _step = 1)
        #{
        #    SysSequenceAnytype sequence = new SysSequenceAnytype(_start, _end, _step);
        #
        #    return sequence;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceAnytypeTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceAnytypeTest
    PROPERTIES
      Name                #SysSequenceAnytypeTest
      Extends             #SysTestCase
      Origin              #{5333683D-8CEF-46F0-A106-80B4E40D897D}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceAnytypeTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #    int64 iterations = 4;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 3;
        #    int64 iterations = 2;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #    SysSequenceAnytype clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int middle = 0;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int middle = 0;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(maxint(), minint());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(minint(), maxint());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #    SysSequenceAnytype middleRange = SysSequenceAnytype::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #    SysSequenceAnytype middleRange = SysSequenceAnytype::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative2
        #void testNegative2()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 2;
        #    int64 iterations = 4;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #    SysSequenceAnytype reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(0-range.distance(), 0+reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceDate unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceDate
    PROPERTIES
      Name                #SysSequenceDate
      Origin              #{C5BD828F-F0CD-4CD0-995C-865890DC2581}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceDate implements ISysSequence
        #{
        #    Date start;
        #    Date end;
        #    int  step;
        #}
      ENDSOURCE
      SOURCE #clone
        #public SysSequenceDate clone()
        #{
        #    SysSequenceDate range = SysSequenceDate::construct(this.start(), this.end(), this.step());
        #
        #    return range;
        #}
      ENDSOURCE
      SOURCE #contains
        #public boolean contains(Date value)
        #{
        #    boolean ret = (this.start() <= value && value <= this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #cover
        #public boolean cover(Date value)
        #{
        #    boolean ret = (this.start() < value && value < this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #distance
        #// переполнения не бывает в  [datenull, datemax]
        #public int distance()
        #{
        #    int ret = this.end() - this.start();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #end
        #public date end()
        #{
        #    return end;
        #}
      ENDSOURCE
      SOURCE #equal
        #public boolean equal(SysSequenceDate sequence)
        #{
        #    boolean ret =   sequence &&
        #                    this.start() == sequence.start() &&
        #                    this.end() == sequence.end() &&
        #                    this.step() == sequence.step();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations()
        #{
        #    int64 ret = int64Max();
        #    int distance = this.distance();
        #
        #    if( distance == 0 )
        #    {
        #        ret = 1;
        #    }
        #    else if( ((distance < 0) && (this.step() > 0))
        #          || ((distance > 0) && (this.step() < 0)) )
        #    {
        #        ret = 0;
        #    }
        #    else if( step == 1 )
        #    {
        #        ret = distance + 1;
        #    }
        #    else
        #    {
        #        ret = distance div this.step() + 1;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #public SysEnumerator getEnumerator()
        #{
        #    return SysEnumerator::newFromSequence(this);
        #}
      ENDSOURCE
      SOURCE #getNext
        #public Date getNext(Date value)
        #{
        #    return value + this.step();
        #}
      ENDSOURCE
      SOURCE #in
        #public boolean in(SysSequenceDate sequence)
        #{
        #    boolean ret = sequence && (sequence.start() <= this.start()) && (this.end() <= sequence.end());
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isBoundary
        #public boolean isBoundary(Date value)
        #{
        #    return (value == this.start()) || (value == this.end());
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(date _start = DateNull(), date _end = DateMax(), int _step = 1)
        #{
        #    Debug::assert(_step != 0);
        #
        #    start = _start;
        #    end = _end;
        #    step = _step;
        #}
      ENDSOURCE
      SOURCE #normalize
        #public SysSequenceDate normalize()
        #{
        #    SysSequenceDate sequence;
        #
        #    if( this.reversed() )
        #    {
        #        sequence = this.reverse();
        #    }
        #    else
        #    {
        #        sequence = this.clone();
        #    }
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reverse
        #public SysSequenceDate reverse()
        #{
        #    SysSequenceDate sequence = SysSequenceDate::construct(this.end(), this.start(), this.reverseStep());
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reversed
        #public boolean reversed()
        #{
        #    boolean ret = this.start() > this.end();
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reverseStep
        #public int reverseStep()
        #{
        #    return -step;
        #}
      ENDSOURCE
      SOURCE #start
        #public date start()
        #{
        #    return start;
        #}
      ENDSOURCE
      SOURCE #step
        #public int step()
        #{
        #    return step;
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString()
        #{
        #    return strfmt('[%1..%2:%3]', this.start(), this.end(), this.step());
        #}
      ENDSOURCE
      SOURCE #xClone
        #public ISysSequence xClone()
        #{
        #    return this.clone();
        #}
      ENDSOURCE
      SOURCE #xContains
        #public boolean xContains(anytype value)
        #{
        #    return this.contains(value);
        #}
      ENDSOURCE
      SOURCE #xCover
        #public boolean xCover(anytype value)
        #{
        #    return this.cover(value);
        #}
      ENDSOURCE
      SOURCE #xDistance
        #public anytype xDistance()
        #{
        #    return this.distance();
        #}
      ENDSOURCE
      SOURCE #xEnd
        #public anytype xEnd()
        #{
        #    return this.end();
        #}
      ENDSOURCE
      SOURCE #xEqual
        #public boolean xEqual(ISysSequence sequence)
        #{
        #    return this.equal(sequence as SysSequenceDate);
        #}
      ENDSOURCE
      SOURCE #xGetNext
        #public anytype xGetNext(anytype value)
        #{
        #    return this.getNext(value);
        #}
      ENDSOURCE
      SOURCE #xIn
        #public boolean xIn(ISysSequence sequence)
        #{
        #    return this.in(sequence as SysSequenceDate);
        #}
      ENDSOURCE
      SOURCE #xIsBoundary
        #public boolean xIsBoundary(anytype value)
        #{
        #    return this.isBoundary(value);
        #}
      ENDSOURCE
      SOURCE #xNormalize
        #public ISysSequence xNormalize()
        #{
        #    return this.normalize();
        #}
      ENDSOURCE
      SOURCE #xReverse
        #public ISysSequence xReverse()
        #{
        #    return this.reverse();
        #}
      ENDSOURCE
      SOURCE #xReversed
        #public boolean xReversed()
        #{
        #    return this.reversed();
        #}
      ENDSOURCE
      SOURCE #xReverseStep
        #public anytype xReverseStep()
        #{
        #    return this.reverseStep();
        #}
      ENDSOURCE
      SOURCE #xStart
        #public anytype xStart()
        #{
        #    return this.start();
        #}
      ENDSOURCE
      SOURCE #xStep
        #public anytype xStep()
        #{
        #    return this.step();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysSequenceDate construct(date _start = DateNull(), date _end = DateMax(), int _step = 1)
        #{
        #    SysSequenceDate sequence = new SysSequenceDate(_start, _end, _step);
        #
        #    return sequence;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceDateTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceDateTest
    PROPERTIES
      Name                #SysSequenceDateTest
      Extends             #SysTestCase
      Origin              #{E071DFDD-5D8E-476C-B284-93950BFDA1AB}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceDateTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysSequenceDate range = SysSequenceDate::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(DateNull(), range.start());
        #    this.assertEquals(DateMax(), range.end());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 3;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 9;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #    SysSequenceDate clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\01\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\01\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceDate sequence = SysSequenceDate::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(DateNull(), sequence.start());
        #    this.assertEquals(DateMax(), sequence.end());
        #    this.assertEquals(any2int(DateMax() - DateNull()), sequence.distance());
        #    this.assertEquals(1, sequence.step());
        #
        #    this.assertEquals(any2int64(DateMax() - DateNull() + 1), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysSequenceDate range = SysSequenceDate::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(93136, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\01\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceDate range = SysSequenceDate::construct(DateMax(), DateNull());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(-93136, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceDate range = SysSequenceDate::construct(DateNull(), DateMax());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(93136, range.distance());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\012\2017;
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #    SysSequenceDate middleRange = SysSequenceDate::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #    SysSequenceDate middleRange = SysSequenceDate::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMaxMin1
        #void testMaxMin1()
        #{
        #    Date start = DateMax();
        #    Date end = DateNull();
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin2
        #void testMaxMin2()
        #{
        #    Date start = DateMax();
        #    Date end = DateNull();
        #    int step = 2;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin3
        #void testMaxMin3()
        #{
        #    Date start = DateMax();
        #    Date end = DateNull();
        #    int step = 3;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    Date start = DateNull();
        #    Date end = DateMax();
        #    int step = 1;
        #    int64 iterations = 93137;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    Date start = DateNull();
        #    Date end = DateMax();
        #    int step = 2;
        #    int64 iterations = 46569;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    Date start = DateNull();
        #    Date end = DateMax();
        #    int step = 3;
        #    int64 iterations = 31046;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #    SysSequenceDate reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 3;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 9;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceInt unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceInt
    PROPERTIES
      Name                #SysSequenceInt
      Origin              #{537C68BD-2CB8-4B6C-B99F-F6BE9F7817F0}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceInt implements ISysSequence
        #{
        #    int start;
        #    int end;
        #    int step;
        #}
      ENDSOURCE
      SOURCE #clone
        #public SysSequenceInt clone()
        #{
        #    SysSequenceInt range = SysSequenceInt::construct(this.start(), this.end(), this.step());
        #
        #    return range;
        #}
      ENDSOURCE
      SOURCE #contains
        #public boolean contains(int value)
        #{
        #    boolean ret = (this.start() <= value && value <= this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #cover
        #public boolean cover(int value)
        #{
        #    boolean ret = (this.start() < value && value < this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #distance
        #// переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
        #public int distance()
        #{
        #    int ret = this.end() - this.start();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #end
        #public int end()
        #{
        #    return end;
        #}
      ENDSOURCE
      SOURCE #equal
        #public boolean equal(SysSequenceInt sequence)
        #{
        #    boolean ret =   sequence &&
        #                    this.start() == sequence.start() &&
        #                    this.end() == sequence.end() &&
        #                    this.step() == sequence.step();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations()
        #{
        #    int64 ret = int64Max();
        #    int distance = this.distance();
        #    boolean overflow = this.cover(0) && (distance <= 0);
        #
        #    if( overflow )
        #    {
        #        ret = int64Max();
        #    }
        #    else if( distance == 0 )
        #    {
        #        ret = 1;
        #    }
        #    else if( ((distance < 0) && (this.step() > 0))
        #          || ((distance > 0) && (this.step() < 0)) )
        #    {
        #        ret = 0;
        #    }
        #    else if( step == 1 )
        #    {
        #        ret = distance + 1;
        #    }
        #    else
        #    {
        #        ret = distance div this.step() + 1;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #public SysEnumerator getEnumerator()
        #{
        #    return SysEnumerator::newFromSequenceInt(this);
        #}
      ENDSOURCE
      SOURCE #getNext
        #public int getNext(int value)
        #{
        #    return value + this.step();
        #}
      ENDSOURCE
      SOURCE #in
        #public boolean in(SysSequenceInt sequence)
        #{
        #    boolean ret = sequence && (sequence.start() <= this.start()) && (this.end() <= sequence.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isBoundary
        #public boolean isBoundary(int value)
        #{
        #    return (value == this.start()) || (value == this.end());
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(int _start = 1, int _end = maxint(), int _step = 1)
        #{
        #    Debug::assert(_step != 0);
        #
        #    start = _start;
        #    end = _end;
        #    step = _step;
        #}
      ENDSOURCE
      SOURCE #normalize
        #public SysSequenceInt normalize()
        #{
        #    SysSequenceInt sequence;
        #
        #    if( this.reversed() )
        #    {
        #        sequence = this.reverse();
        #    }
        #    else
        #    {
        #        sequence = this.clone();
        #    }
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reverse
        #public SysSequenceInt reverse()
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct(this.end(), this.start(), this.reverseStep());
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reversed
        #public boolean reversed()
        #{
        #    boolean ret = this.start() > this.end();
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reverseStep
        #public int reverseStep()
        #{
        #    return -step;
        #}
      ENDSOURCE
      SOURCE #start
        #public int start()
        #{
        #    return start;
        #}
      ENDSOURCE
      SOURCE #step
        #public int step()
        #{
        #    return step;
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString()
        #{
        #    return strfmt('[%1..%2:%3]', this.start(), this.end(), this.step());
        #}
      ENDSOURCE
      SOURCE #xClone
        #public ISysSequence xClone()
        #{
        #    return this.clone();
        #}
      ENDSOURCE
      SOURCE #xContains
        #public boolean xContains(anytype value)
        #{
        #    return this.contains(value);
        #}
      ENDSOURCE
      SOURCE #xCover
        #public boolean xCover(anytype value)
        #{
        #    return this.cover(value);
        #}
      ENDSOURCE
      SOURCE #xDistance
        #// переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
        #public anytype xDistance()
        #{
        #    return this.distance();
        #}
      ENDSOURCE
      SOURCE #xEnd
        #public anytype xEnd()
        #{
        #    return this.end();
        #}
      ENDSOURCE
      SOURCE #xEqual
        #public boolean xEqual(ISysSequence range)
        #{
        #    return this.equal(range as SysSequenceInt);
        #}
      ENDSOURCE
      SOURCE #xGetNext
        #public anytype xGetNext(anytype value)
        #{
        #    return this.getNext(value);
        #}
      ENDSOURCE
      SOURCE #xIn
        #public boolean xIn(ISysSequence range)
        #{
        #    return this.in(range as SysSequenceInt);
        #}
      ENDSOURCE
      SOURCE #xIsBoundary
        #public boolean xIsBoundary(anytype value)
        #{
        #    return this.isBoundary(value);
        #}
      ENDSOURCE
      SOURCE #xNormalize
        #public ISysSequence xNormalize()
        #{
        #    return this.normalize();
        #}
      ENDSOURCE
      SOURCE #xReverse
        #public ISysSequence xReverse()
        #{
        #    return this.reverse();
        #}
      ENDSOURCE
      SOURCE #xReversed
        #public boolean xReversed()
        #{
        #    return this.reversed();
        #}
      ENDSOURCE
      SOURCE #xReverseStep
        #public anytype xReverseStep()
        #{
        #    return this.reverseStep();
        #}
      ENDSOURCE
      SOURCE #xStart
        #public anytype xStart()
        #{
        #    return this.start();
        #}
      ENDSOURCE
      SOURCE #xStep
        #public anytype xStep()
        #{
        #    return this.step();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysSequenceInt construct(int _start = 1, int _end = maxint(), int _step = 1)
        #{
        #    SysSequenceInt sequence = new SysSequenceInt(_start, _end, _step);
        #
        #    return sequence;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceInt64 unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceInt64
    PROPERTIES
      Name                #SysSequenceInt64
      Origin              #{9E8CC6F1-3026-4F49-A718-6AD8403444F2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceInt64 implements ISysSequence
        #{
        #    int64 start;
        #    int64 end;
        #    int64 step;
        #}
      ENDSOURCE
      SOURCE #clone
        #public SysSequenceInt64 clone()
        #{
        #    SysSequenceInt64 range = SysSequenceInt64::construct(this.start(), this.end(), this.step());
        #
        #    return range;
        #}
      ENDSOURCE
      SOURCE #contains
        #public boolean contains(int64 value)
        #{
        #    boolean ret = (this.start() <= value && value <= this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #cover
        #public boolean cover(int64 value)
        #{
        #    boolean ret = (this.start() < value && value < this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #distance
        #// переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
        #public int64 distance()
        #{
        #    int64 ret = this.end() - this.start();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #end
        #public int64 end()
        #{
        #    return end;
        #}
      ENDSOURCE
      SOURCE #equal
        #public boolean equal(SysSequenceInt64 sequence)
        #{
        #    boolean ret =   sequence &&
        #                    this.start() == sequence.start() &&
        #                    this.end() == sequence.end() &&
        #                    this.step() == sequence.step();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations()
        #{
        #    int64 ret = int64Max();
        #    int64 distance = this.distance();
        #    boolean overflow = this.cover(0) && (distance <= 0);
        #
        #    if( overflow )
        #    {
        #        ret = int64Max();
        #    }
        #    else if( distance == 0 )
        #    {
        #        ret = 1;
        #    }
        #    else if( ((distance < 0) && (this.step() > 0))
        #          || ((distance > 0) && (this.step() < 0)) )
        #    {
        #        ret = 0;
        #    }
        #    else if( step == 1 )
        #    {
        #        ret = distance + 1;
        #    }
        #    else
        #    {
        #        ret = distance div this.step() + 1;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #public SysEnumerator getEnumerator()
        #{
        #    return SysEnumerator::newFromSequenceInt64(this);
        #}
      ENDSOURCE
      SOURCE #getNext
        #public int64 getNext(int64 value)
        #{
        #    return value + this.step();
        #}
      ENDSOURCE
      SOURCE #in
        #public boolean in(SysSequenceInt64 sequence)
        #{
        #    boolean ret = sequence && (sequence.start() <= this.start()) && (this.end() <= sequence.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isBoundary
        #public boolean isBoundary(int64 value)
        #{
        #    return (value == this.start()) || (value == this.end());
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(int64 _start = 1, int64 _end = int64Max(), int64 _step = 1)
        #{
        #    Debug::assert(_step != 0);
        #
        #    start = _start;
        #    end = _end;
        #    step = _step;
        #}
      ENDSOURCE
      SOURCE #normalize
        #public SysSequenceInt64 normalize()
        #{
        #    SysSequenceInt64 sequence;
        #
        #    if( this.reversed() )
        #    {
        #        sequence = this.reverse();
        #    }
        #    else
        #    {
        #        sequence = this.clone();
        #    }
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reverse
        #public SysSequenceInt64 reverse()
        #{
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(this.end(), this.start(), this.reverseStep());
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reversed
        #public boolean reversed()
        #{
        #    boolean ret = this.start() > this.end();
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reverseStep
        #public int64 reverseStep()
        #{
        #    return -step;
        #}
      ENDSOURCE
      SOURCE #start
        #public int64 start()
        #{
        #    return start;
        #}
      ENDSOURCE
      SOURCE #step
        #public int64 step()
        #{
        #    return step;
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString()
        #{
        #    return strfmt('[%1..%2:%3]', this.start(), this.end(), this.step());
        #}
      ENDSOURCE
      SOURCE #xClone
        #public ISysSequence xClone()
        #{
        #    return this.clone();
        #}
      ENDSOURCE
      SOURCE #xContains
        #public boolean xContains(anytype value)
        #{
        #    return this.contains(value);
        #}
      ENDSOURCE
      SOURCE #xCover
        #public boolean xCover(anytype value)
        #{
        #    return this.cover(value);
        #}
      ENDSOURCE
      SOURCE #xDistance
        #// переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
        #public anytype xDistance()
        #{
        #    return this.distance();
        #}
      ENDSOURCE
      SOURCE #xEnd
        #public anytype xEnd()
        #{
        #    return this.end();
        #}
      ENDSOURCE
      SOURCE #xEqual
        #public boolean xEqual(ISysSequence range)
        #{
        #    return this.equal(range as SysSequenceInt64);
        #}
      ENDSOURCE
      SOURCE #xGetNext
        #public anytype xGetNext(anytype value)
        #{
        #    return this.getNext(value);
        #}
      ENDSOURCE
      SOURCE #xIn
        #public boolean xIn(ISysSequence range)
        #{
        #    return this.in(range as SysSequenceInt64);
        #}
      ENDSOURCE
      SOURCE #xIsBoundary
        #public boolean xIsBoundary(anytype value)
        #{
        #    return this.isBoundary(value);
        #}
      ENDSOURCE
      SOURCE #xNormalize
        #public ISysSequence xNormalize()
        #{
        #    return this.normalize();
        #}
      ENDSOURCE
      SOURCE #xReverse
        #public ISysSequence xReverse()
        #{
        #    return this.reverse();
        #}
      ENDSOURCE
      SOURCE #xReversed
        #public boolean xReversed()
        #{
        #    return this.reversed();
        #}
      ENDSOURCE
      SOURCE #xReverseStep
        #public anytype xReverseStep()
        #{
        #    return this.reverseStep();
        #}
      ENDSOURCE
      SOURCE #xStart
        #public anytype xStart()
        #{
        #    return this.start();
        #}
      ENDSOURCE
      SOURCE #xStep
        #public anytype xStep()
        #{
        #    return this.step();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysSequenceInt64 construct(int64 _start = 1, int64 _end = int64Max(), int64 _step = 1)
        #{
        #    SysSequenceInt64 sequence = new SysSequenceInt64(_start, _end, _step);
        #
        #    return sequence;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceInt64Test unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceInt64Test
    PROPERTIES
      Name                #SysSequenceInt64Test
      Extends             #SysTestCase
      Origin              #{531E11AE-41DF-4F9B-9596-9D3F73F5C06D}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceInt64Test extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #    int64 iterations = 4;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysSequenceInt64 range = SysSequenceInt64::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(zero64 + 1, range.start());
        #    this.assertEquals(int64Max(), range.end());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 3;
        #    int64 iterations = 2;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #    SysSequenceInt64 clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Int64 start = 5;
        #    Int64 end = 2;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    Int64 start = -5;
        #    Int64 end = 2;
        #    Int64 middle = 0;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Int64 start = 5;
        #    Int64 end = 2;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    Int64 start = -5;
        #    Int64 end = 2;
        #    Int64 middle = 0;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(any2int64(1), sequence.start());
        #    this.assertEquals(int64Max(), sequence.end());
        #    this.assertEquals(int64Max()-1, sequence.distance());
        #    this.assertEquals(any2int64(1), sequence.step());
        #
        #    this.assertEquals(int64Max(), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysSequenceInt64 range = SysSequenceInt64::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(int64Max()-1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Int64 start = 5;
        #    Int64 end = 2;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceInt64 range = SysSequenceInt64::construct(int64Max(), int64Min());
        #    int64 zero64;
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(zero64 + 1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceInt64 range = SysSequenceInt64::construct(int64Min(), int64Max());
        #    int64 zero64;
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(zero64 -1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    int64 start = 5;
        #    int64 end = 2;
        #    int64 step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #    SysSequenceInt64 middleRange = SysSequenceInt64::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #    SysSequenceInt64 middleRange = SysSequenceInt64::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    int64 start = int64Min();
        #    int64 end = int64Max();
        #    int64 step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    int64 start = int64Min();
        #    int64 end = int64Max();
        #    int64 step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    int64 start = int64Min();
        #    int64 end = int64Max();
        #    int64 step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    int64 start = -1;
        #    int64 end = int64Max();
        #    int64 step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    int64 start = -1;
        #    int64 end = int64Max();
        #    int64 step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    int64 start = -1;
        #    int64 end = int64Max();
        #    int64 step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #    SysSequenceInt64 reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceIntTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceIntTest
    PROPERTIES
      Name                #SysSequenceIntTest
      Extends             #SysTestCase
      Origin              #{C2D731CA-EDEC-4052-A6CD-EF41F6042046}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceIntTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #    int64 iterations = 4;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysSequenceInt range = SysSequenceInt::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(1, range.start());
        #    this.assertEquals(maxint(), range.end());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 3;
        #    int64 iterations = 2;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #    SysSequenceInt clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int middle = 0;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int middle = 0;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(1, sequence.start());
        #    this.assertEquals(maxint(), sequence.end());
        #    this.assertEquals(maxint()-1, sequence.distance());
        #    this.assertEquals(1, sequence.step());
        #
        #    this.assertEquals(any2int64(maxint()), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysSequenceInt range = SysSequenceInt::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(maxint()-1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceInt range = SysSequenceInt::construct(maxint(), minint());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceInt range = SysSequenceInt::construct(minint(), maxint());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #    SysSequenceInt middleRange = SysSequenceInt::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #    SysSequenceInt middleRange = SysSequenceInt::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative2
        #void testNegative2()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 2;
        #    int64 iterations = 4;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #    SysSequenceInt reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceReal unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceReal
    PROPERTIES
      Name                #SysSequenceReal
      Origin              #{753EA929-40DB-4B0B-AF6A-9D3399310D98}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceReal implements ISysSequence
        #{
        #    real start;
        #    real end;
        #    real step;
        #}
      ENDSOURCE
      SOURCE #clone
        #public SysSequenceReal clone()
        #{
        #    SysSequenceReal range = SysSequenceReal::construct(this.start(), this.end(), this.step());
        #
        #    return range;
        #}
      ENDSOURCE
      SOURCE #contains
        #public boolean contains(real value)
        #{
        #    boolean ret = (this.start() <= value && value <= this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #cover
        #public boolean cover(real value)
        #{
        #    boolean ret = (this.start() < value && value < this.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #distance
        #// переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
        #public real distance()
        #{
        #    real ret = this.end() - this.start();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #end
        #public real end()
        #{
        #    return end;
        #}
      ENDSOURCE
      SOURCE #equal
        #public boolean equal(SysSequenceReal sequence)
        #{
        #    boolean ret =   sequence &&
        #                    this.start() == sequence.start() &&
        #                    this.end() == sequence.end() &&
        #                    this.step() == sequence.step();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations()
        #{
        #    int64 ret = int64Max();
        #    Amount distance = this.distance();
        #    boolean overflow = this.cover(0) && (distance <= 0.00001);
        #
        #    if( overflow )
        #    {
        #        ret = int64Max();
        #    }
        #    else if( distance == 0 )
        #    {
        #        ret = 1;
        #    }
        #    else if( ((distance < 0) && (this.step() > 0))
        #          || ((distance > 0) && (this.step() < 0)) )
        #    {
        #        ret = 0;
        #    }
        #    else if( step == 1 )
        #    {
        #        ret = any2int64(distance + 1.0);
        #    }
        #    else
        #    {
        #        ret = any2int64(distance / this.step() + 1.0);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #getEnumerator
        #public SysEnumerator getEnumerator()
        #{
        #    return SysEnumerator::newFromToReal(this.start(), this.end(), this.step());
        #}
      ENDSOURCE
      SOURCE #getNext
        #public real getNext(real value)
        #{
        #    return value + this.step();
        #}
      ENDSOURCE
      SOURCE #in
        #public boolean in(SysSequenceReal range)
        #{
        #    boolean ret = range && (range.start() <= this.start()) && (this.end() <= range.end());
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isBoundary
        #public boolean isBoundary(real value)
        #{
        #    return (value == this.start()) || (value == this.end());
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(real _start = 1.0, real _end = RealMax(), real _step = 1.0)
        #{
        #    Debug::assert(_step != 0.0);
        #
        #    start = _start;
        #    end = _end;
        #    step = _step;
        #}
      ENDSOURCE
      SOURCE #normalize
        #public SysSequenceReal normalize()
        #{
        #    SysSequenceReal sequence;
        #
        #    if( this.reversed() )
        #    {
        #        sequence = this.reverse();
        #    }
        #    else
        #    {
        #        sequence = this.clone();
        #    }
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reverse
        #public SysSequenceReal reverse()
        #{
        #    SysSequenceReal sequence = SysSequenceReal::construct(this.end(), this.start(), this.reverseStep());
        #
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #reversed
        #public boolean reversed()
        #{
        #    boolean ret = this.start() > this.end();
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reverseStep
        #public real reverseStep()
        #{
        #    return -step;
        #}
      ENDSOURCE
      SOURCE #start
        #public real start()
        #{
        #    return start;
        #}
      ENDSOURCE
      SOURCE #step
        #public real step()
        #{
        #    return step;
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString()
        #{
        #    return strfmt('[%1..%2:%3]', this.start(), this.end(), this.step());
        #}
      ENDSOURCE
      SOURCE #xClone
        #public ISysSequence xClone()
        #{
        #    return this.clone();
        #}
      ENDSOURCE
      SOURCE #xContains
        #public boolean xContains(anytype value)
        #{
        #    return this.contains(value);
        #}
      ENDSOURCE
      SOURCE #xCover
        #public boolean xCover(anytype value)
        #{
        #    return this.cover(value);
        #}
      ENDSOURCE
      SOURCE #xDistance
        #// переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
        #public anytype xDistance()
        #{
        #    return this.distance();
        #}
      ENDSOURCE
      SOURCE #xEnd
        #public anytype xEnd()
        #{
        #    return this.end();
        #}
      ENDSOURCE
      SOURCE #xEqual
        #public boolean xEqual(ISysSequence range)
        #{
        #    return this.equal(range as SysSequenceReal);
        #}
      ENDSOURCE
      SOURCE #xGetNext
        #public anytype xGetNext(anytype value)
        #{
        #    return this.getNext(value);
        #}
      ENDSOURCE
      SOURCE #xIn
        #public boolean xIn(ISysSequence range)
        #{
        #    return this.in(range as SysSequenceReal);
        #}
      ENDSOURCE
      SOURCE #xIsBoundary
        #public boolean xIsBoundary(anytype value)
        #{
        #    return this.isBoundary(value);
        #}
      ENDSOURCE
      SOURCE #xNormalize
        #public ISysSequence xNormalize()
        #{
        #    return this.normalize();
        #}
      ENDSOURCE
      SOURCE #xReverse
        #public ISysSequence xReverse()
        #{
        #    return this.reverse();
        #}
      ENDSOURCE
      SOURCE #xReversed
        #public boolean xReversed()
        #{
        #    return this.reversed();
        #}
      ENDSOURCE
      SOURCE #xReverseStep
        #public anytype xReverseStep()
        #{
        #    return this.reverseStep();
        #}
      ENDSOURCE
      SOURCE #xStart
        #public anytype xStart()
        #{
        #    return this.start();
        #}
      ENDSOURCE
      SOURCE #xStep
        #public anytype xStep()
        #{
        #    return this.step();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysSequenceReal construct(real _start = 1, real _end = RealMax(), real _step = 1)
        #{
        #    SysSequenceReal sequence = new SysSequenceReal(_start, _end, _step);
        #
        #    return sequence;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceRealTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceRealTest
    PROPERTIES
      Name                #SysSequenceRealTest
      Extends             #SysTestCase
      Origin              #{F03EF8BF-A7F3-4F2F-BA01-9A35EC20D5C7}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceRealTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysSequenceReal range = SysSequenceReal::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(1, range.start());
        #    this.assertEquals(RealMax(), range.end());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 3.0;
        #    int64 iterations = 2;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #    SysSequenceReal clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real middle = 0.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real middle = 0.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceReal sequence = SysSequenceReal::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(1.0, sequence.start());
        #    this.assertEquals(RealMax(), sequence.end());
        #    //this.assertEquals(RealMax(), sequence.distance());
        #    this.assertEquals(1.0, sequence.step());
        #
        #    //this.assertEquals(int64Max()-1, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysSequenceReal range = SysSequenceReal::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(RealMax()-1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceReal range = SysSequenceReal::construct(RealMax(), RealMin());
        #
        #    this.assertNotNull(range);
        #
        #    //this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceReal range = SysSequenceReal::construct(RealMin(), RealMax());
        #
        #    this.assertNotNull(range);
        #
        #    //this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #    SysSequenceReal middleRange = SysSequenceReal::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #    SysSequenceReal middleRange = SysSequenceReal::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMaxMin1
        #void testMaxMin1()
        #{
        #    Real start = RealMax();
        #    Real end = RealMin();
        #    Real step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin2
        #void testMaxMin2()
        #{
        #    Real start = RealMax();
        #    Real end = RealMin();
        #    Real step = 2.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin3
        #void testMaxMin3()
        #{
        #    Real start = RealMax();
        #    Real end = RealMin();
        #    Real step = 3.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    Real start = RealMin();
        #    Real end = RealMax();
        #    Real step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    Real start = RealMin();
        #    Real end = RealMax();
        #    Real step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    Real start = RealMin();
        #    Real end = RealMax();
        #    Real step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    Real start = -1;
        #    Real end = RealMax();
        #    Real step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    Real start = -1;
        #    Real end = RealMax();
        #    Real step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    Real start = -1;
        #    Real end = RealMax();
        #    Real step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #    SysSequenceReal reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    //this.assertEquals(strfmt('%3:[%1..%2]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator
    PROPERTIES
      Name                #SysEnumerator
      Extends             #SysEnumeratorGroup
      Origin              #{16FF2DC6-E772-47C6-A422-3C6A2E418F04}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #
        #/// <summary>
        #/// класс-фабрика. группа, которая может хранить несколько энумераторов.
        #/// </summary>
        #/// <remarks>
        #/// в энумераторах хочется:
        #/// 1. вызывать в цикле методы current*, moveNext, reset, skip у каждого энумератора
        #/// 2. не проверять в цикле as:
        #///    в этой версии аксапты нет встроенного оператора as,
        #///    а проверка интерфейса SysDictClass::as() чудовищно медленная.
        #/// 3. не заставлять программиста реализовывать в каждом энумераторе все методы
        #/// 4. максимально задействовать intellisense аксапты, указывая конкретные методы вместо базового класса или интерфейса
        #///    для этого придется создать похожий код, в котором отличаются только типы
        #/// </remarks>
        #public class SysEnumerator extends SysEnumeratorGroup
        #{
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator construct()
        #{
        #    return new SysEnumerator();
        #}
        #
      ENDSOURCE
      SOURCE #newFromArgsRecord
        #public static SysEnumerator newFromArgsRecord(Args _args)
        #{
        #    SysEnumerator enumerator;
        #;
        #    Debug::assert(_args != null);
        #
        #    enumerator = SysEnumerator::newFromRecordMarked(_args.record());
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromArray
        #public static SysEnumerator newFromArray(Array array, SysSequenceInt sequence = null)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Array::construct(array, sequence));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromContainer
        #public static SysEnumerator newFromContainer(container con, SysSequenceInt sequence = null)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Container::construct(con, sequence));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromEnum
        #public static SysEnumerator newFromEnum(anytype enum, SysSequenceInt sequence = null)
        #{
        #    SysEnumerator enumerator = SysEnumerator::newFromEnumId(DictEnum::value2id(enum), sequence);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromEnumId
        #public static SysEnumerator newFromEnumId(EnumId enumId, SysSequenceInt sequence = null)
        #{
        #    SysEnumerator enumerator = SysEnumerator::newFromSysDictEnum(new SysDictEnum(enumId), sequence);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromList
        #public static SysEnumerator newFromList(List list)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_List::construct(list));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromMap
        #public static SysEnumerator newFromMap(Map map)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Map::construct(map));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromPackedContainer
        #public static SysEnumerator newFromPackedContainer(container con, SysSequenceInt sequence = null)
        #{
        #    SysEnumerator enumerator = SysEnumerator::newFromContainer(con, sequence);
        #;
        #    enumerator.skip(); // first value - version
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromRecord
        #public static SysEnumerator newFromRecord(Common record)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Record::construct(record));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromRecordMarked
        #public static SysEnumerator newFromRecordMarked(Common record)
        #{
        #    SysEnumerator   enumerator;
        #    FormDataSource  formDataSource;
        #
        #    if( record.isFormDataSource() )
        #    {
        #        formDataSource = record.dataSource();
        #        enumerator = SysEnumerator::construct().add(SysEnumerator_DataSourceMarked::construct(formDataSource));
        #    }
        #
        #    if( !enumerator )
        #    {
        #        enumerator = SysEnumerator::newFromRecord(record);
        #    }
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromRunBaseProgress
        ##AviFiles
        #public static SysEnumerator newFromRunBaseProgress( RunBase runbase
        #                                                  , Caption   caption    = ''
        #                                                  , int64     total      = 0
        #                                                  , Filename  animation  = #AviStopwatch)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_RunBaseProgress::newFromRunBase(runbase, caption, total, animation), 'progress');
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromSequence
        #public static SysEnumerator newFromSequence(ISysSequence sequence)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Sequence::construct(sequence));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromSequenceInt
        #public static SysEnumerator newFromSequenceInt(SysSequenceInt sequence)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Int::construct(sequence));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromSequenceInt64
        #public static SysEnumerator newFromSequenceInt64(SysSequenceInt64 sequence)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Int64::construct(sequence));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromSet
        #public static SysEnumerator newFromSet(Set set)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Set::construct(set));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromStruct
        #public static SysEnumerator newFromStruct(Struct struct, SysSequenceInt sequence = null)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Struct::construct(struct, sequence));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromSysDictEnum
        #public static SysEnumerator newFromSysDictEnum(SysDictEnum sysDictEnum, SysSequenceInt sequence = null)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Enum::construct(sysDictEnum, sequence));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromSystemCollection
        #public static SysEnumerator newFromSystemCollection(System.Collections.IEnumerable collection)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_SystemCollection::construct(collection));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromToAmount
        #public static SysEnumerator newFromToAmount(amount start = 0, amount end = RealMax(), amount step = 1)
        #{
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #    SysEnumerator enumerator = SysEnumerator::newFromSequence(sequence);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromToDate
        #public static SysEnumerator newFromToDate(date start = DateNull(), date end = DateMax(), int step = 1)
        #{
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #    SysEnumerator enumerator = SysEnumerator::newFromSequence(sequence);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromToEnum
        #public static SysEnumerator newFromToEnum(anytype enumValueStart, anytype enumValueEnd = null)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Enum::newFromTo(enumValueStart, enumValueEnd));
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromToInt
        #public static SysEnumerator newFromToInt(int start = 1, int end = maxint(), int step = 1)
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #    SysEnumerator enumerator = SysEnumerator::newFromSequenceInt(sequence);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromToInt64
        #public static SysEnumerator newFromToInt64(int64 start = 1, int64 end = maxRecId(), int64 step = 1)
        #{
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #    SysEnumerator enumerator = SysEnumerator::newFromSequenceInt64(sequence);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromToReal
        #public static SysEnumerator newFromToReal(real start = 0, real end = RealMax(), real step = 1)
        #{
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #    SysEnumerator enumerator = SysEnumerator::newFromSequence(sequence);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromXml
        #public static SysEnumerator newFromXml(XmlNodeList node, SysSequenceInt sequence = null)
        #{
        #    SysEnumerator enumerator = SysEnumerator::construct();
        #
        #    if( sequence )
        #    {
        #        enumerator.add(SysEnumerator_XmlNodeListIndex::construct(node, sequence));
        #    }
        #    else
        #    {
        #        enumerator.add(SysEnumerator_XmlNodeList::construct(node));
        #    }
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Array unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Array
    PROPERTIES
      Name                #SysEnumerator_Array
      Extends             #SysEnumerator_Indexed
      Origin              #{817F0407-E153-4CD1-B920-5CE87F5209A2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public Array base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected Array baseOrDefault(Array _base = null)
        #{
        #    if( _base == null )
        #    {
        #        _base = new Array(Types::AnyType);
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Array extends SysEnumerator_Indexed
        #{
        #    Array base;
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    int idx = this.currentIdx();
        #    anytype ret = this.base().value(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().lastIndex();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(Array _base = null, SysSequenceInt _idx = null)
        #{
        #    base = this.baseOrDefault(_base);
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Array construct(Array base = null, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Array enumerator = new SysEnumerator_Array(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ArrayTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ArrayTest
    PROPERTIES
      Name                #SysEnumerator_ArrayTest
      Extends             #SysTestCase
      Origin              #{6CBD5C7D-A3BE-44DD-83A0-83BD133833E4}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ArrayTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testArray
        #public void testArray()
        #{
        #    Array arr = new Array(Types::String);
        #    SysEnumerator_Array se;
        #    int64 zero64;
        #
        #    arr.value(1, 'a');
        #    arr.value(5, 'e');
        #    arr.value(2, 'b');
        #    arr.value(3, 'c');
        #    arr.value(4, 'd');
        #
        #    se = SysEnumerator_Array::construct(arr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testArrayEmpty
        #public void testArrayEmpty()
        #{
        #    Array arr = new Array(Types::String);
        #    SysEnumerator_Array se = SysEnumerator_Array::construct(arr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testArrayNull
        #public void testArrayNull()
        #{
        #    SysEnumerator_Array se = SysEnumerator_Array::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.base());
        #
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testArraySkipUntilEnd
        #public void testArraySkipUntilEnd()
        #{
        #    Array arr = new Array(Types::String);
        #    SysEnumerator_Array se;
        #    int64 zero64;
        #
        #    arr.value(1, 'a');
        #    arr.value(5, 'e');
        #    arr.value(2, 'b');
        #    arr.value(3, 'c');
        #    arr.value(4, 'd');
        #
        #    se = SysEnumerator_Array::construct(arr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertFalse(se.skip(10));
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_AsciiIo unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_AsciiIo
    PROPERTIES
      Name                #SysEnumerator_AsciiIo
      Extends             #SysEnumerator_IoBase
      Origin              #{6B7E7F77-9160-42A8-95A4-8876C5C36846}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public AsciiIo base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_AsciiIo extends SysEnumerator_IoBase
        #{
        #    AsciiIo base;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(AsciiIo _base = null)
        #{
        #    super();
        #    base = _base;
        #}
      ENDSOURCE
      SOURCE #xBase
        #public Io xBase()
        #{
        #    return this.base() as Io;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_AsciiIo construct(AsciiIo base = null)
        #{
        #    SysEnumerator_AsciiIo enumerator = new SysEnumerator_AsciiIo(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_BinaryIo unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_BinaryIo
    PROPERTIES
      Name                #SysEnumerator_BinaryIo
      Extends             #SysEnumerator_IoBase
      Origin              #{4EACFA49-C4A6-4A25-A2FC-21C2E51FB666}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public BinaryIo base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_BinaryIo extends SysEnumerator_IoBase
        #{
        #    BinaryIo base;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(BinaryIo _base = null)
        #{
        #    super();
        #    base = _base;
        #}
      ENDSOURCE
      SOURCE #xBase
        #public Io xBase()
        #{
        #    return this.base() as Io;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_BinaryIo construct(BinaryIo base = null)
        #{
        #    SysEnumerator_BinaryIo enumerator = new SysEnumerator_BinaryIo(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Comma7Io unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Comma7Io
    PROPERTIES
      Name                #SysEnumerator_Comma7Io
      Extends             #SysEnumerator_IoBase
      Origin              #{CBBBA601-B225-415E-8A79-8FBED14B6FF3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public Comma7Io base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Comma7Io extends SysEnumerator_IoBase
        #{
        #    Comma7Io base;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(Comma7Io _base = null)
        #{
        #    super();
        #    base = _base;
        #}
      ENDSOURCE
      SOURCE #xBase
        #public Io xBase()
        #{
        #    return this.base() as Io;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Comma7Io construct(Comma7Io base = null)
        #{
        #    SysEnumerator_Comma7Io enumerator = new SysEnumerator_Comma7Io(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_CommaIo unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_CommaIo
    PROPERTIES
      Name                #SysEnumerator_CommaIo
      Extends             #SysEnumerator_IoBase
      Origin              #{42373915-3680-4C44-AD62-6D793C59B5B7}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public CommaIo base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_CommaIo extends SysEnumerator_IoBase
        #{
        #    CommaIo base;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(CommaIo _base = null)
        #{
        #    super();
        #    base = _base;
        #}
      ENDSOURCE
      SOURCE #xBase
        #public Io xBase()
        #{
        #    return this.base() as Io;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_CommaIo construct(CommaIo base = null)
        #{
        #    SysEnumerator_CommaIo enumerator = new SysEnumerator_CommaIo(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_CommaTextIo unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_CommaTextIo
    PROPERTIES
      Name                #SysEnumerator_CommaTextIo
      Extends             #SysEnumerator_IoBase
      Origin              #{E91A1086-8388-4815-9C52-24A70DABAC68}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public CommaTextIo base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_CommaTextIo extends SysEnumerator_IoBase
        #{
        #    CommaTextIo base;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(CommaTextIo _base = null)
        #{
        #    super();
        #    base = _base;
        #}
      ENDSOURCE
      SOURCE #xBase
        #public Io xBase()
        #{
        #    return this.base() as Io;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_CommaTextIo construct(CommaTextIo base = null)
        #{
        #    SysEnumerator_CommaTextIo enumerator = new SysEnumerator_CommaTextIo(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ConfigurationKeySet unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ConfigurationKeySet
    PROPERTIES
      Name                #SysEnumerator_ConfigurationKeySet
      Extends             #SysEnumerator_Indexed
      Origin              #{202D56DB-EF07-4206-97CD-6F760BC49FE6}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public ConfigurationKeySet base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected ConfigurationKeySet baseOrDefault(ConfigurationKeySet _base = null)
        #{
        #    if( _base == null )
        #    {
        #        _base = new ConfigurationKeySet();
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ConfigurationKeySet extends SysEnumerator_Indexed
        #{
        #    ConfigurationKeySet base;
        #}
      ENDSOURCE
      SOURCE #current
        #public configurationKeyId current()
        #{
        #    int idx = this.currentIdx();
        #    configurationKeyId ret = this.base().cnt2Id(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public SysDictConfigurationKey currentValue()
        #{
        #    SysDictConfigurationKey configurationKey = new SysDictConfigurationKey(this.current());
        #
        #    return configurationKey;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = 0;
        #
        #    if( this.base() )
        #    {
        #        ret = this.base().cnt();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(ConfigurationKeySet _base = null, SysSequenceInt _idx = null)
        #{
        #    base = this.baseOrDefault();
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_ConfigurationKeySet construct(ConfigurationKeySet base = null, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_ConfigurationKeySet enumerator = new SysEnumerator_ConfigurationKeySet(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Container unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Container
    PROPERTIES
      Name                #SysEnumerator_Container
      Extends             #SysEnumerator_Indexed
      Origin              #{C8821573-A369-4122-B709-6B71DD05ECCD}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public container base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Container extends SysEnumerator_Indexed
        #{
        #    container base;
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    int idx = this.currentIdx();
        #    anytype ret = conpeek(this.base(), idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = conlen(this.base());
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(container _base, SysSequenceInt _idx = null)
        #{
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Container construct(container base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Container enumerator = new SysEnumerator_Container(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ContainerClass unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ContainerClass
    PROPERTIES
      Name                #SysEnumerator_ContainerClass
      Extends             #SysEnumerator_Container
      Origin              #{5AF2207E-2C36-4E2C-B8C2-B84DD4BA73F2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #baseClass
        #public ContainerClass baseClass()
        #{
        #    return baseClass;
        #}
      ENDSOURCE
      SOURCE #baseClassOrDefault
        #protected ContainerClass baseClassOrDefault(ContainerClass _baseClass = null)
        #{
        #    if( !_baseClass )
        #    {
        #        _baseClass = new ContainerClass(connull());
        #    }
        #
        #    return _baseClass;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ContainerClass extends SysEnumerator_Container
        #{
        #    ContainerClass baseClass;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(ContainerClass _baseClass = null, SysSequenceInt _idx = null)
        #{
        #    baseClass = this.baseClassOrDefault(_baseClass);
        #    super(baseClass.value(), _idx);
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_ContainerClass construct(ContainerClass base = null, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_ContainerClass enumerator = new SysEnumerator_ContainerClass(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #newFromContainer
        #public static SysEnumerator_ContainerClass newFromContainer(Container con, SysSequenceInt idx = null)
        #{
        #    ContainerClass conClass = new ContainerClass(con);
        #    SysEnumerator_ContainerClass enumerator = new SysEnumerator_ContainerClass(conClass, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ContainerClassTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ContainerClassTest
    PROPERTIES
      Name                #SysEnumerator_ContainerClassTest
      Extends             #SysTestCase
      Origin              #{6B620072-71D4-4269-9AD9-BA1156CD80F2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ContainerClassTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testContainerClass
        #public void testContainerClass()
        #{
        #    container con = ['a','b','c','d','e'];
        #    ContainerClass cc = new ContainerClass(con);
        #    SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::construct(cc);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerEmpty
        #public void testContainerEmpty()
        #{
        #    ContainerClass conClass = new ContainerClass(connull());
        #    SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::construct(conClass);
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.baseClass());
        #    this.assertEquals(connull(), se.base());
        #
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerNull
        #public void testContainerNull()
        #{
        #    SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.baseClass());
        #    this.assertEquals(connull(), se.base());
        #
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerSkip
        #public void testContainerSkip()
        #{
        #    container con = ['a','b','c','d','e'];
        #    SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::newFromContainer(con);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.skip());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.skip(2));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ContainerTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ContainerTest
    PROPERTIES
      Name                #SysEnumerator_ContainerTest
      Extends             #SysTestCase
      Origin              #{6D7935DA-0926-4B5D-8B53-AEC8836E42F7}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ContainerTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testContainer
        #public void testContainer()
        #{
        #    container con = ['a','b','c','d','e'];
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerEmpty
        #public void testContainerEmpty()
        #{
        #    container con = connull();
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerSkip
        #public void testContainerSkip()
        #{
        #    container con = ['a','b','c','d','e'];
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.skip());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.skip(2));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Counter unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Counter
    PROPERTIES
      Name                #SysEnumerator_Counter
      Extends             #xSysEnumerator
      Origin              #{0A99837D-3ED8-4569-B36D-1123A70179DE}
    ENDPROPERTIES
    
    METHODS
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #
        #/// <summary>
        #/// Возвращает порядковый номер текущего элемента.
        #/// После выхода из цикла итерации, содержит общее число проитерированных элементов.
        #/// </summary>
        #public class SysEnumerator_Counter extends xSysEnumerator
        #{
        #    int counter;
        #}
      ENDSOURCE
      SOURCE #current
        #public int current()
        #{
        #    return counter;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public int currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentIdxProvided
        #protected boolean currentIdxProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #init
        #protected void init()
        #{;
        #    counter = 0;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        ++counter;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #parmCounter
        #/// <summary>
        #/// Метод возвращает число выполненных итераций
        #/// </summary>
        #/// <remarks>
        #/// Метод можно вызвать и в цикле, и после завершения цикла
        #/// </remarks>
        #public int parmCounter(int _counter = counter)
        #{;
        #    counter = _counter;
        #    return counter;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Counter construct()
        #{
        #    SysEnumerator_Counter enumerator = new SysEnumerator_Counter();
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Counter64 unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Counter64
    PROPERTIES
      Name                #SysEnumerator_Counter64
      Extends             #xSysEnumerator
      Origin              #{6F609CEC-FF31-49C7-8100-5C6D87727BA7}
    ENDPROPERTIES
    
    METHODS
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #
        #/// <summary>
        #/// Возвращает порядковый номер текущего элемента.
        #/// После выхода из цикла итерации, содержит общее число проитерированных элементов.
        #/// </summary>
        #public class SysEnumerator_Counter64 extends xSysEnumerator
        #{
        #    int64 counter;
        #}
      ENDSOURCE
      SOURCE #current
        #public int64 current()
        #{
        #    return counter;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public int64 currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentIdxProvided
        #protected boolean currentIdxProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int64 currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int64 currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #init
        #protected void init()
        #{;
        #    counter = 0;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        ++counter;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #parmCounter
        #/// <summary>
        #/// Метод возвращает число выполненных итераций
        #/// </summary>
        #/// <remarks>
        #/// Метод можно вызвать и в цикле, и после завершения цикла
        #/// </remarks>
        #public int64 parmCounter(int64 _counter = counter)
        #{;
        #    counter = _counter;
        #    return counter;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Counter64 construct()
        #{
        #    SysEnumerator_Counter64 enumerator = new SysEnumerator_Counter64();
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DataSourceMarked unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DataSourceMarked
    PROPERTIES
      Name                #SysEnumerator_DataSourceMarked
      Extends             #xSysEnumerator
      Origin              #{E0239966-F61A-4B4A-A158-67D8A09973FE}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public FormDataSource base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.base() )
        #    {
        #        record = this.base().getFirst(true);
        #        if( !record )
        #        {
        #            record = this.base().cursor();
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DataSourceMarked extends xSysEnumerator
        #{
        #    FormDataSource base;
        #    Common record;
        #}
      ENDSOURCE
      SOURCE #current
        #public Common current()
        #{
        #    return record;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public Common currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public Common currentKey()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public Common currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = 0;
        #
        #    if( this.base() )
        #    {
        #        if( this.base().anyMarked() )
        #        {
        #            ret = super(estimatedIterations);
        #        }
        #        else
        #        {
        #            ret = 1;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    return (record.RecId != 0);
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(FormDataSource _base)
        #{;
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        record = this.base().getNext();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #record
        #public common record()
        #{
        #    return record;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DataSourceMarked construct(FormDataSource base)
        #{
        #    SysEnumerator_DataSourceMarked enumerator = new SysEnumerator_DataSourceMarked(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictClass unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictClass
    PROPERTIES
      Name                #SysEnumerator_DictClass
      Extends             #SysEnumerator_Indexed
      Origin              #{BB68DB32-53EE-4291-8E3B-B8920D539F89}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public DictClass base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public abstract class SysEnumerator_DictClass extends SysEnumerator_Indexed
        #{
        #    DictClass base;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(DictClass _base, SysSequenceInt _idx = null)
        #{
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictClass_Implements unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictClass_Implements
    PROPERTIES
      Name                #SysEnumerator_DictClass_Implements
      Extends             #SysEnumerator_DictClass
      Origin              #{7645056D-7089-4065-A9B3-1B06E518A7F3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictClass_Implements extends SysEnumerator_DictClass
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public classId current()
        #{
        #    int idx = this.currentIdx();
        #    configurationKeyId ret = this.base().implements(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public classId currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().implementsCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictClass_Implements construct(DictClass base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictClass_Implements enumerator = new SysEnumerator_DictClass_Implements(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictClass_ObjectMethod unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictClass_ObjectMethod
    PROPERTIES
      Name                #SysEnumerator_DictClass_ObjectMethod
      Extends             #SysEnumerator_DictClass
      Origin              #{B9149BDC-1AF5-40BE-BE89-E4C7932581C2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictClass_ObjectMethod extends SysEnumerator_DictClass
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public str current()
        #{
        #    int idx = this.currentIdx();
        #    str ret = this.base().objectMethod(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: sysDictMethod??
        #public DictMethod currentValue()
        #{
        #    int idx = this.currentIdx();
        #    DictMethod ret = this.base().objectMethodObject(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().objectMethodCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictClass_ObjectMethod construct(DictClass base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictClass_ObjectMethod enumerator = new SysEnumerator_DictClass_ObjectMethod(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictClass_StaticMethod unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictClass_StaticMethod
    PROPERTIES
      Name                #SysEnumerator_DictClass_StaticMethod
      Extends             #SysEnumerator_DictClass
      Origin              #{965E265F-C804-4310-8514-130E23D9F1A3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictClass_StaticMethod extends SysEnumerator_DictClass
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public str current()
        #{
        #    int idx = this.currentIdx();
        #    str ret = this.base().staticMethod(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: sysDictMethod??
        #public DictMethod currentValue()
        #{
        #    int idx = this.currentIdx();
        #    DictMethod ret = this.base().staticMethodObject(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().staticMethodCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictClass_StaticMethod construct(DictClass base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictClass_StaticMethod enumerator = new SysEnumerator_DictClass_StaticMethod(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictFieldGroup unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictFieldGroup
    PROPERTIES
      Name                #SysEnumerator_DictFieldGroup
      Extends             #SysEnumerator_Indexed
      Origin              #{AD82CDA9-026B-4266-A65A-11F5BA9DC419}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public DictFieldGroup base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictFieldGroup extends SysEnumerator_Indexed
        #{
        #    DictFieldGroup base;
        #}
      ENDSOURCE
      SOURCE #current
        #public fieldId current()
        #{
        #    int idx = this.currentIdx();
        #    fieldId ret = this.base().field(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public fieldId currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public fieldId currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().numberOfFields();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(DictFieldGroup _base, SysSequenceInt _idx = null)
        #{;
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictFieldGroup construct(DictFieldGroup base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictFieldGroup enumerator = new SysEnumerator_DictFieldGroup(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictIndex unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictIndex
    PROPERTIES
      Name                #SysEnumerator_DictIndex
      Extends             #SysEnumerator_Indexed
      Origin              #{A445C23A-1FE6-49B7-8D5A-2E8CB5CDFEA9}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public DictIndex base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictIndex extends SysEnumerator_Indexed
        #{
        #    DictIndex base;
        #}
      ENDSOURCE
      SOURCE #current
        #public fieldId current()
        #{
        #    int idx = this.currentIdx();
        #    fieldId ret = this.base().field(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public fieldId currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public fieldId currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().numberOfFields();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(DictIndex _base, SysSequenceInt _idx = null)
        #{;
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictIndex construct(DictIndex base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictIndex enumerator = new SysEnumerator_DictIndex(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Dictionary unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Dictionary
    PROPERTIES
      Name                #SysEnumerator_Dictionary
      Extends             #SysEnumerator_Indexed
      Origin              #{E020E60D-0E93-4E72-A397-8F86297F57CE}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public Dictionary base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public abstract class SysEnumerator_Dictionary extends SysEnumerator_Indexed
        #{
        #    Dictionary base;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(Dictionary _base, SysSequenceInt _idx = null)
        #{;
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Dictionary_Class unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Dictionary_Class
    PROPERTIES
      Name                #SysEnumerator_Dictionary_Class
      Extends             #SysEnumerator_Dictionary
      Origin              #{039E00A3-A036-46BB-8A0B-9A7FE464DF1F}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Dictionary_Class extends SysEnumerator_Dictionary
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public classId current()
        #{
        #    int idx = this.currentIdx();
        #    classId ret = this.base().classCnt2Id(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.base().className(this.current());
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictClass??
        #public DictClass currentValue()
        #{
        #    return this.base().classObject(this.current());
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().classCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Dictionary_Class construct(Dictionary base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Dictionary_Class enumerator = new SysEnumerator_Dictionary_Class(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Dictionary_ConfigKey unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Dictionary_ConfigKey
    PROPERTIES
      Name                #SysEnumerator_Dictionary_ConfigKey
      Extends             #SysEnumerator_Dictionary
      Origin              #{77405EF3-505B-4B1D-8689-F349DEF126BC}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Dictionary_ConfigKey extends SysEnumerator_Dictionary
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public classId current()
        #{
        #    int idx = this.currentIdx();
        #    configurationKeyId ret = this.base().classCnt2Id(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.base().className(this.current());
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictClass??
        #public DictConfigurationKey currentValue()
        #{
        #    return this.base().configurationKeyObject(this.current());
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().classCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Dictionary_ConfigKey construct(Dictionary base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Dictionary_ConfigKey enumerator = new SysEnumerator_Dictionary_ConfigKey(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Dictionary_Enum unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Dictionary_Enum
    PROPERTIES
      Name                #SysEnumerator_Dictionary_Enum
      Extends             #SysEnumerator_Dictionary
      Origin              #{B0C155E8-5A59-4F0A-9D25-A27787C2887E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Dictionary_Enum extends SysEnumerator_Dictionary
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public enumId current()
        #{
        #    int idx = this.currentIdx();
        #    enumId ret = this.base().enumCnt2Id(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.base().enumName(this.current());
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictClass??
        #public DictEnum currentValue()
        #{
        #    return this.base().enumObject(this.current());
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().enumCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Dictionary_Enum construct(Dictionary base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Dictionary_Enum enumerator = new SysEnumerator_Dictionary_Enum(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Dictionary_LicenseCode unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Dictionary_LicenseCode
    PROPERTIES
      Name                #SysEnumerator_Dictionary_LicenseCode
      Extends             #SysEnumerator_Dictionary
      Origin              #{250F5E2A-6207-4861-8954-968BC493C44B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Dictionary_LicenseCode extends SysEnumerator_Dictionary
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public licenseCodeId current()
        #{
        #    int idx = this.currentIdx();
        #    configurationKeyId ret = this.base().licenseCodeCnt2Id(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.base().licenseCodeName(this.current());
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictClass??
        #public DictLicenseCode currentValue()
        #{
        #    return this.base().licenseCodeObject(this.current());
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().licenseCodeCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Dictionary_LicenseCode construct(Dictionary base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Dictionary_LicenseCode enumerator = new SysEnumerator_Dictionary_LicenseCode(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Dictionary_SecurityKey unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Dictionary_SecurityKey
    PROPERTIES
      Name                #SysEnumerator_Dictionary_SecurityKey
      Extends             #SysEnumerator_Dictionary
      Origin              #{B32682E3-3962-4CD5-AB5D-7754AB03F6A8}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Dictionary_SecurityKey extends SysEnumerator_Dictionary
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public securityKeyId current()
        #{
        #    int idx = this.currentIdx();
        #    configurationKeyId ret = this.base().securityKeyCnt2Id(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.base().securityKeyName(this.current());
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictClass??
        #public DictSecurityKey currentValue()
        #{
        #    return this.base().securityKeyObject(this.current());
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().securityKeyCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Dictionary_SecurityKey construct(Dictionary base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Dictionary_SecurityKey enumerator = new SysEnumerator_Dictionary_SecurityKey(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Dictionary_Table unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Dictionary_Table
    PROPERTIES
      Name                #SysEnumerator_Dictionary_Table
      Extends             #SysEnumerator_Dictionary
      Origin              #{06FE0368-B0A3-4CC9-A6FF-0565048FD3B0}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Dictionary_Table extends SysEnumerator_Dictionary
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public tableId current()
        #{
        #    int idx = this.currentIdx();
        #    enumId ret = this.base().tableCnt2Id(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.base().tableName(this.current());
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictClass??
        #public DictTable currentValue()
        #{
        #    return this.base().tableObject(this.current());
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().tableCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Dictionary_Table construct(Dictionary base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Dictionary_Table enumerator = new SysEnumerator_Dictionary_Table(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Dictionary_Type unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Dictionary_Type
    PROPERTIES
      Name                #SysEnumerator_Dictionary_Type
      Extends             #SysEnumerator_Dictionary
      Origin              #{F7F5617B-9857-447F-8FD7-8CDE3C1677E8}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Dictionary_Type extends SysEnumerator_Dictionary
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public extendedTypeId current()
        #{
        #    int idx = this.currentIdx();
        #    enumId ret = this.base().typeCnt2Id(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.base().typeName(this.current());
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictClass??
        #public DictType currentValue()
        #{
        #    return this.base().typeObject(this.current());
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().typeCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Dictionary_Type construct(Dictionary base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Dictionary_Type enumerator = new SysEnumerator_Dictionary_Type(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictMethod unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictMethod
    PROPERTIES
      Name                #SysEnumerator_DictMethod
      Extends             #SysEnumerator_Indexed
      Origin              #{FB485A38-6D0D-4E9E-8BAC-D9DE03172C74}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public DictMethod base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public abstract class SysEnumerator_DictMethod extends SysEnumerator_Indexed
        #{
        #    DictMethod base;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(DictMethod _base, SysSequenceInt _idx = null)
        #{;
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictMethod_Parameter unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictMethod_Parameter
    PROPERTIES
      Name                #SysEnumerator_DictMethod_Parameter
      Extends             #SysEnumerator_DictMethod
      Origin              #{96023A7E-5447-494B-A263-262F3B5077A6}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictMethod_Parameter extends SysEnumerator_DictMethod
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public str current()
        #{
        #    int idx = this.currentIdx();
        #    str ret = this.base().parameterName(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public str currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().parameterCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictMethod_Parameter construct(DictMethod base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictMethod_Parameter enumerator = new SysEnumerator_DictMethod_Parameter(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictMethod_Var unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictMethod_Var
    PROPERTIES
      Name                #SysEnumerator_DictMethod_Var
      Extends             #SysEnumerator_DictMethod
      Origin              #{5A283454-BD0A-42AA-87DE-11AEAA7F5A22}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictMethod_Var extends SysEnumerator_DictMethod
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public str current()
        #{
        #    int idx = this.currentIdx();
        #    str ret = this.base().varName(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public str currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().varCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictMethod_Var construct(DictMethod base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictMethod_Var enumerator = new SysEnumerator_DictMethod_Var(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictRelation unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictRelation
    PROPERTIES
      Name                #SysEnumerator_DictRelation
      Extends             #SysEnumerator_Indexed
      Origin              #{F9D494A3-0CED-4AB7-8C24-A2F074748B95}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public DictRelation base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictRelation extends SysEnumerator_Indexed
        #{
        #    DictRelation base;
        #}
      ENDSOURCE
      SOURCE #current
        #public fieldId current()
        #{
        #    int idx = this.currentIdx();
        #    fieldId ret = this.base().lineTableValue(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public fieldId currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public fieldId currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().lines();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(DictRelation _base, SysSequenceInt _idx = null)
        #{;
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictRelation construct(DictRelation base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictRelation enumerator = new SysEnumerator_DictRelation(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictTable unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictTable
    PROPERTIES
      Name                #SysEnumerator_DictTable
      Extends             #SysEnumerator_Indexed
      Origin              #{C02FBAA2-53C9-408E-903C-821BE7E6815B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public DictTable base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public abstract class SysEnumerator_DictTable extends SysEnumerator_Indexed
        #{
        #    DictTable base;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(DictTable _base, SysSequenceInt _idx = null)
        #{;
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictTable_DeleteAction unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictTable_DeleteAction
    PROPERTIES
      Name                #SysEnumerator_DictTable_DeleteAction
      Extends             #SysEnumerator_DictTable
      Origin              #{DC8C8619-9CC7-4FF4-9C6E-28427517F2F0}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictTable_DeleteAction extends SysEnumerator_DictTable
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public tableId current()
        #{
        #    int idx = this.currentIdx();
        #    tableId ret = this.base().deleteActionTableId(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int currentValue()
        #{
        #    int idx = this.currentIdx();
        #    int ret = this.base().deleteActionType(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().deleteActionCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictTable_DeleteAction construct(DictTable base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictTable_DeleteAction enumerator = new SysEnumerator_DictTable_DeleteAction(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictTable_Field unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictTable_Field
    PROPERTIES
      Name                #SysEnumerator_DictTable_Field
      Extends             #SysEnumerator_DictTable
      Origin              #{D8B181B3-9421-41E2-8FD9-B74C32A124F4}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictTable_Field extends SysEnumerator_DictTable
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public fieldId current()
        #{
        #    int idx = this.currentIdx();
        #    fieldId ret = this.base().fieldCnt2Id(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.base().fieldName(this.current());
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictField??
        #public DictField currentValue()
        #{
        #    return this.base().fieldObject(this.current());
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().fieldCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictTable_Field construct(DictTable base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictTable_Field enumerator = new SysEnumerator_DictTable_Field(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictTable_FieldGroup unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictTable_FieldGroup
    PROPERTIES
      Name                #SysEnumerator_DictTable_FieldGroup
      Extends             #SysEnumerator_DictTable
      Origin              #{BF2D4095-7534-492C-A48E-534D5DEA5720}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictTable_FieldGroup extends SysEnumerator_DictTable
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public str current()
        #{
        #    int idx = this.currentIdx();
        #    str ret = this.base().fieldGroup(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictField??
        #public DictFieldGroup currentValue()
        #{
        #    DictFieldGroup dictFieldGroup = new DictFieldGroup(this.base().id(), this.current());
        #
        #    return dictFieldGroup;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().fieldGroupCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictTable_FieldGroup construct(DictTable base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictTable_FieldGroup enumerator = new SysEnumerator_DictTable_FieldGroup(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictTable_Index unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictTable_Index
    PROPERTIES
      Name                #SysEnumerator_DictTable_Index
      Extends             #SysEnumerator_DictTable
      Origin              #{F831728D-EFA5-4CC3-8964-1D028E524BFF}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictTable_Index extends SysEnumerator_DictTable
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public indexId current()
        #{
        #    indexId ret = this.currentValue().id();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.base().indexName(this.current());
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictField??
        #public DictIndex currentValue()
        #{
        #    int idx = this.currentIdx();
        #    DictIndex ret = this.base().indexObject(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().indexCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictTable_Index construct(DictTable base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictTable_Index enumerator = new SysEnumerator_DictTable_Index(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictTable_ObjectMethod unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictTable_ObjectMethod
    PROPERTIES
      Name                #SysEnumerator_DictTable_ObjectMethod
      Extends             #SysEnumerator_DictTable
      Origin              #{1E518230-5E4E-4B5A-AADF-98778658A529}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictTable_ObjectMethod extends SysEnumerator_DictTable
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public str current()
        #{
        #    int idx = this.currentIdx();
        #    str ret = this.base().objectMethod(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictField??
        #public DictMethod currentValue()
        #{
        #    return this.base().objectMethodObject(this.currentIdx());
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().objectMethodCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictTable_ObjectMethod construct(DictTable base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictTable_ObjectMethod enumerator = new SysEnumerator_DictTable_ObjectMethod(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictTable_Relation unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictTable_Relation
    PROPERTIES
      Name                #SysEnumerator_DictTable_Relation
      Extends             #SysEnumerator_DictTable
      Origin              #{DEE6D4AC-F147-4E9E-A036-8DF258295171}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictTable_Relation extends SysEnumerator_DictTable
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public str current()
        #{
        #    int idx = this.currentIdx();
        #    str ret = this.base().relation(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictField??
        #public DictRelation currentValue()
        #{
        #    DictRelation dictRelation = new DictRelation(this.base().id());
        #;
        #    dictRelation.loadNameRelation(this.current());
        #
        #    return dictRelation;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().relationCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictTable_Relation construct(DictTable base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictTable_Relation enumerator = new SysEnumerator_DictTable_Relation(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictTable_StaticMethod unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictTable_StaticMethod
    PROPERTIES
      Name                #SysEnumerator_DictTable_StaticMethod
      Extends             #SysEnumerator_DictTable
      Origin              #{3C8C4627-61CA-49C6-B1FA-17CDA8A1428E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictTable_StaticMethod extends SysEnumerator_DictTable
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public str current()
        #{
        #    int idx = this.currentIdx();
        #    str ret = this.base().staticMethod(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #//TODO mazzy: SysDictField??
        #public DictMethod currentValue()
        #{
        #    return this.base().staticMethodObject(this.currentIdx());
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().staticMethodCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictTable_StaticMethod construct(DictTable base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictTable_StaticMethod enumerator = new SysEnumerator_DictTable_StaticMethod(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_DictView_Datasource unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_DictView_Datasource
    PROPERTIES
      Name                #SysEnumerator_DictView_Datasource
      Extends             #SysEnumerator_Indexed
      Origin              #{EB4D614A-ABD4-41DB-AC5B-7B4725557E25}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public DictView base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_DictView_Datasource extends SysEnumerator_Indexed
        #{
        #    DictView base;
        #}
      ENDSOURCE
      SOURCE #current
        #public tableId current()
        #{
        #    int idx = this.currentIdx();
        #    tableId ret = this.base().datasourceTableId(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public tableId currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public tableId currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().datasourceCnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(DictView _base, SysSequenceInt _idx = null)
        #{;
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_DictView_Datasource construct(DictView base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_DictView_Datasource enumerator = new SysEnumerator_DictView_Datasource(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Empty unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Empty
    PROPERTIES
      Name                #SysEnumerator_Empty
      Extends             #xSysEnumerator
      Origin              #{7CEE54EE-E170-43FB-BE73-6E1BBA52A5B4}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #
        #/// <summary>
        #/// Энумератор по пустой последовательности.
        #/// Бывает полезен при добавлении в группу наряду с другими энумераторами.
        #/// </summary>
        #public class SysEnumerator_Empty extends xSysEnumerator
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public int current()
        #{
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public int currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    return false;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Empty construct()
        #{
        #    SysEnumerator_Empty enumerator = new SysEnumerator_Empty();
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_EmptyTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_EmptyTest
    PROPERTIES
      Name                #SysEnumerator_EmptyTest
      Extends             #SysTestCase
      Origin              #{5FC6FAE8-FB7E-4FC8-95C5-1F0B64CF53D4}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_EmptyTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    SysEnumerator_Empty se = SysEnumerator_Empty::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Enum unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Enum
    PROPERTIES
      Name                #SysEnumerator_Enum
      Extends             #SysEnumerator_Indexed
      Origin              #{93A0DB80-75C7-4DCE-A6BC-863DB2AA5FA9}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public SysDictEnum base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Enum extends SysEnumerator_Indexed
        #{
        #    SysDictEnum base;
        #}
      ENDSOURCE
      SOURCE #current
        #public int current()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    int idx = this.currentIdx();
        #    str ret = this.base().index2Symbol(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int currentValue()
        #{
        #    int idx = this.currentIdx();
        #    int ret = this.base().index2Value(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().values() - 1;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #defaultStart
        #protected int defaultStart()
        #{
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(SysDictEnum _base, SysSequenceInt _idx = null)
        #{;
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Enum construct(SysDictEnum base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Enum enumerator = new SysEnumerator_Enum(base, idx);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
      SOURCE #newFromTo
        #public static SysEnumerator_Enum newFromTo(anytype startEnumValue, anytype endEnumValue = null)
        #{
        #    SysEnumerator_Enum  enumerator;
        #    SysSequenceInt      sequence;
        #    SysDictEnum         base  = SysDictEnum::newFrom(startEnumValue);
        #    int                 startEnumIdx = 0;
        #    int                 endEnumIdx;
        #;
        #    if( typeof(startEnumValue) == types::Enum )
        #    {
        #        startEnumIdx = base.value2Index(startEnumValue);
        #    }
        #
        #    if( typeof(startEnumValue) == types::Enum )
        #    {
        #        endEnumIdx = base.value2Index(endEnumValue);
        #    }
        #    else
        #    {
        #        endEnumIdx = base.values() - 1;
        #    }
        #
        #    sequence = new SysSequenceInt(startEnumIdx, endEnumIdx, 1);
        #    enumerator = new SysEnumerator_Enum(base, sequence);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_EnumTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_EnumTest
    PROPERTIES
      Name                #SysEnumerator_EnumTest
      Extends             #SysTestCase
      Origin              #{0284603C-07BD-4D2A-82CB-A1A0C576F21C}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_EnumTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testEnum
        #public void testEnum()
        #{
        #    DictEnum dictEnum = new DictEnum(enumnum(ABC));
        #    SysEnumerator_Enum se = SysEnumerator_Enum::construct(dictEnum);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 4, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(0, se.current());
        #    this.assertEquals('None', se.currentKey());
        #    this.assertEquals(0+ABC::None, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals('A', se.currentKey());
        #    this.assertEquals(0+ABC::A, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals('B', se.currentKey());
        #    this.assertEquals(0+ABC::B, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals('C', se.currentKey());
        #    this.assertEquals(0+ABC::C, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 4, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_FillSet unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_FillSet
    PROPERTIES
      Name                #SysEnumerator_FillSet
      Extends             #xSysEnumerator
      Origin              #{131663C7-296F-4965-9934-BD87C1BCED7A}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #/// <summary>
        #/// Метод возвращает Set
        #/// </summary>
        #/// <remarks>
        #/// Тип реально хранимых значений мы узнаем только в moveNext. Поэтому инициализация выполняется здесь.
        #/// </remarks>
        #public Set base(types t = types::AnyType)
        #{
        #    if( values == null )
        #    {
        #        Debug::assert(t != Types::AnyType);
        #        values = new Set(t);
        #    }
        #
        #    return values;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public abstract class SysEnumerator_FillSet extends xSysEnumerator
        #{
        #    Set values;
        #    SysEnumeratorGroup enumeratorGroup;
        #}
      ENDSOURCE
      SOURCE #current
        #public Set current()
        #{
        #    return values;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public Set currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public Set currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public Set currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #eventAddedToGroup
        #protected void eventAddedToGroup(SysEnumeratorGroup _enumeratorGroup)
        #{;
        #    enumeratorGroup = _enumeratorGroup;
        #    super(enumeratorGroup);
        #}
      ENDSOURCE
      SOURCE #init
        #protected void init()
        #{
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_FillSetFromCurrent unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_FillSetFromCurrent
    PROPERTIES
      Name                #SysEnumerator_FillSetFromCurrent
      Extends             #SysEnumerator_FillSet
      Origin              #{46660318-94BA-44E6-9110-BB600F0517DB}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_FillSetFromCurrent extends SysEnumerator_FillSet
        #{
        #}
      ENDSOURCE
      SOURCE #moveNextPost
        #protected boolean moveNextPost(boolean ret)
        #{
        #    anytype value;
        #
        #    if( ret && enumeratorGroup )
        #    {
        #        value = enumeratorGroup.current();
        #        ret = this.base(typeof(value)).add(value);
        #    }
        #
        #    ret = super(ret);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_FillSetFromCurrent construct()
        #{
        #    SysEnumerator_FillSetFromCurrent enumerator = new SysEnumerator_FillSetFromCurrent();
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_FillSetFromKey unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_FillSetFromKey
    PROPERTIES
      Name                #SysEnumerator_FillSetFromKey
      Extends             #SysEnumerator_FillSet
      Origin              #{9FC3A4A1-FE8D-4E71-B0EB-3B05325645A5}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_FillSetFromKey extends SysEnumerator_FillSet
        #{
        #}
      ENDSOURCE
      SOURCE #moveNextPost
        #protected boolean moveNextPost(boolean ret)
        #{
        #    anytype value;
        #
        #    if( ret && enumeratorGroup )
        #    {
        #        value = enumeratorGroup.currentKey();
        #        ret = this.base(typeof(value)).add(value);
        #    }
        #
        #    ret = super(ret);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_FillSetFromKey construct()
        #{
        #    SysEnumerator_FillSetFromKey enumerator = new SysEnumerator_FillSetFromKey();
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_FillSetFromValue unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_FillSetFromValue
    PROPERTIES
      Name                #SysEnumerator_FillSetFromValue
      Extends             #SysEnumerator_FillSet
      Origin              #{833917BA-DF4D-4FF4-BC34-36353BFCC7FC}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_FillSetFromValue extends SysEnumerator_FillSet
        #{
        #}
      ENDSOURCE
      SOURCE #moveNextPost
        #protected boolean moveNextPost(boolean ret)
        #{
        #    anytype value;
        #
        #    if( ret && enumeratorGroup )
        #    {
        #        value = enumeratorGroup.currentValue();
        #        ret = this.base(typeof(value)).add(value);
        #    }
        #
        #    ret = super(ret);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_FillSetFromValue construct()
        #{
        #    SysEnumerator_FillSetFromValue enumerator = new SysEnumerator_FillSetFromValue();
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_First unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_First
    PROPERTIES
      Name                #SysEnumerator_First
      Extends             #xSysEnumerator
      Origin              #{2AC9A024-BE93-4369-95A3-9D1C73CFB073}
    ENDPROPERTIES
    
    METHODS
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #
        #/// <summary>
        #/// Прекращает итерацию после пербора N первых элементов.
        #/// Можно вызывать reset энумератора.
        #/// </summary>
        #public class SysEnumerator_First extends xSysEnumerator
        #{
        #    int first;
        #    int remains;
        #}
      ENDSOURCE
      SOURCE #current
        #public int current()
        #{
        #    return this.first() - this.remains();
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public int currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    return this.first();
        #}
      ENDSOURCE
      SOURCE #first
        #/// <summary>
        #/// Метод возвращает число итераций, которые нужно оставить в последовательности
        #/// </summary>
        #/// <remarks>
        #/// Метод можно вызвать и в цикле, и после завершения цикла
        #/// </remarks>
        #public int first()
        #{
        #    return first;
        #}
      ENDSOURCE
      SOURCE #init
        #protected void init()
        #{
        #    remains = first;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    return remains >= 0;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(int items = 1)
        #{
        #    if( items < 0 )
        #    {
        #        items = 0;
        #    }
        #
        #    first = items;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        --remains;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #remains
        #/// <summary>
        #/// Метод возвращает число оставщихся невыполненными итераций
        #/// </summary>
        #/// <remarks>
        #/// Метод можно вызвать и в цикле, и после завершения цикла
        #/// </remarks>
        #public int remains()
        #{
        #    int ret = 0;
        #
        #    if( this.position() != SysEnumeratorPosition::Outside )
        #    {
        #        ret = remains;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_First construct(int items = 1)
        #{
        #    SysEnumerator_First enumerator = new SysEnumerator_First(items);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_FirstTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_FirstTest
    PROPERTIES
      Name                #SysEnumerator_FirstTest
      Extends             #SysTestCase
      Origin              #{A224DE43-5E12-4F3B-88AE-24CD095D18AD}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_FirstTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testFirst
        #public void testFirst()
        #{
        #    SysEnumerator_First se = SysEnumerator_First::construct(3);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #    this.assertEquals(3, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(2, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #    this.assertEquals(2, se.currentValue());
        #    this.assertEquals(1, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testFirstNegative
        #public void testFirstNegative()
        #{
        #    SysEnumerator_First se = SysEnumerator_First::construct(-2);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(0, se.first());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 0, se.estimatedIterations());
        #
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(0, se.first());
        #}
      ENDSOURCE
      SOURCE #testFirstNull
        #public void testFirstNull()
        #{
        #    SysEnumerator_First se = SysEnumerator_First::construct(0);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(0, se.first());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 0, se.estimatedIterations());
        #
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(0, se.first());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Indexed unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Indexed
    PROPERTIES
      Name                #SysEnumerator_Indexed
      Extends             #xSysEnumerator
      Origin              #{EA150456-19A1-4059-86AA-F29C6F0755C1}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public abstract class SysEnumerator_Indexed extends xSysEnumerator
        #{
        #    SysSequenceInt sequence;
        #    int currentIdx;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public int currentIdx()
        #{
        #    return currentIdx;
        #}
      ENDSOURCE
      SOURCE #currentIdxProvided
        #protected boolean currentIdxProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    return maxint();
        #}
      ENDSOURCE
      SOURCE #defaultStart
        #protected int defaultStart()
        #{
        #    return 1;
        #}
      ENDSOURCE
      SOURCE #defaultStep
        #protected int defaultStep()
        #{
        #    return 1;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = 0)
        #{
        #    int64 ret = this.sequence().estimatedIterations();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #init
        #protected void init()
        #{
        #    currentIdx = this.sequence().start();
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = super();
        #    int idx;
        #
        #    if( ret )
        #    {
        #        idx = this.currentIdx();
        #        ret = this.sequence().contains(idx);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(SysSequenceInt _sequence = null)
        #{;
        #    sequence = this.sequenceOrDefault(_sequence);
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #    int idx;
        #
        #    if( ret )
        #    {
        #        idx = this.currentIdx();
        #        currentIdx = this.sequence().getNext(idx);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #sequence
        #public SysSequenceInt sequence()
        #{
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #sequenceOrDefault
        #protected SysSequenceInt sequenceOrDefault(SysSequenceInt _sequence = null)
        #{
        #    if( _sequence == null )
        #    {
        #        _sequence = SysSequenceInt::construct(this.defaultStart(), this.defaultEnd(), this.defaultStep());
        #    }
        #
        #    return _sequence;
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Indexed64 unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Indexed64
    PROPERTIES
      Name                #SysEnumerator_Indexed64
      Extends             #xSysEnumerator
      Origin              #{E3758242-C886-4524-951D-45E5BFFEA521}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public abstract class SysEnumerator_Indexed64 extends xSysEnumerator
        #{
        #    SysSequenceInt64 sequence;
        #    int64 currentIdx;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public int64 currentIdx()
        #{
        #    return currentIdx;
        #}
      ENDSOURCE
      SOURCE #currentIdxProvided
        #protected boolean currentIdxProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int64 defaultEnd()
        #{
        #    return int64Max();
        #}
      ENDSOURCE
      SOURCE #defaultStart
        #protected int64 defaultStart()
        #{
        #    return 1;
        #}
      ENDSOURCE
      SOURCE #defaultStep
        #protected int64 defaultStep()
        #{
        #    return 1;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = 0)
        #{
        #    int64 ret = this.sequence().estimatedIterations();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #init
        #protected void init()
        #{
        #    currentIdx = this.sequence().start();
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = super();
        #    int64 idx;
        #
        #    if( ret )
        #    {
        #        idx = this.currentIdx();
        #        ret = this.sequence().contains(idx);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(SysSequenceInt64 _sequence = null)
        #{;
        #    sequence = this.sequenceOrDefault(_sequence);
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    int64 idx = this.currentIdx();
        #    currentIdx = this.sequence().getNext(idx);
        #
        #    return super();
        #}
      ENDSOURCE
      SOURCE #sequence
        #public SysSequenceInt64 sequence()
        #{
        #    return sequence;
        #}
      ENDSOURCE
      SOURCE #sequenceOrDefault
        #protected SysSequenceInt64 sequenceOrDefault(SysSequenceInt64 _sequence = null)
        #{
        #    if( _sequence == null )
        #    {
        #        _sequence = SysSequenceInt64::construct(this.defaultStart(), this.defaultEnd(), this.defaultStep());
        #    }
        #
        #    return _sequence;
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Int unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Int
    PROPERTIES
      Name                #SysEnumerator_Int
      Extends             #SysEnumerator_Indexed
      Origin              #{FF6C690F-91C5-4B63-925D-657ACCEDE22E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public SysSequenceInt base()
        #{
        #    return sequence;
        #}
        #
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Int extends SysEnumerator_Indexed
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public int current()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int currentValue()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    return maxint();
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(SysSequenceInt _sequence = null)
        #{
        #    super(_sequence);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Int construct(SysSequenceInt sequence = null)
        #{
        #    SysEnumerator_Int enumerator = new SysEnumerator_Int(sequence);
        #
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #newFromTo
        #public static SysEnumerator_Int newFromTo(int start = 1, int end = maxint(), int step = 1)
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #    SysEnumerator_Int enumerator = SysEnumerator_Int::construct(sequence);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Int64 unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Int64
    PROPERTIES
      Name                #SysEnumerator_Int64
      Extends             #SysEnumerator_Indexed64
      Origin              #{133736D4-E129-4784-BF50-DAADB4872D36}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public SysSequenceInt64 base()
        #{
        #    return sequence;
        #}
        #
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Int64 extends SysEnumerator_Indexed64
        #{
        #}
      ENDSOURCE
      SOURCE #current
        #public int64 current()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int64 currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int64 currentValue()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int64 defaultEnd()
        #{
        #    return int64Max();
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(SysSequenceInt64 _sequence = null)
        #{
        #    super(_sequence);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Int64 construct(SysSequenceInt64 sequence = null)
        #{
        #    SysEnumerator_Int64 enumerator = new SysEnumerator_Int64(sequence);
        #
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #newFromTo
        #public static SysEnumerator_Int64 newFromTo(int64 start = 1, int64 end = int64Max(), int64 step = 1)
        #{
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #    SysEnumerator_Int64 enumerator = SysEnumerator_Int64::construct(sequence);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Int64Test unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Int64Test
    PROPERTIES
      Name                #SysEnumerator_Int64Test
      Extends             #SysTestCase
      Origin              #{EBEF04EC-912E-4D05-810B-E1E27268D4CF}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Int64Test extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testInt64
        #public void testInt64()
        #{
        #    SysEnumerator_Int64 se = SysEnumerator_Int64::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(zero64 + 1, se.current());
        #    this.assertEquals(zero64 + 1, se.currentIdx());
        #    this.assertEquals(zero64 + 1, se.currentKey());
        #    this.assertEquals(zero64 + 1, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(zero64 + 2, se.current());
        #    this.assertEquals(zero64 + 2, se.currentIdx());
        #    this.assertEquals(zero64 + 2, se.currentKey());
        #    this.assertEquals(zero64 + 2, se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_IntTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_IntTest
    PROPERTIES
      Name                #SysEnumerator_IntTest
      Extends             #SysTestCase
      Origin              #{AA7E22E2-F8B6-48FF-BD8B-CF59376084B1}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_IntTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testInt
        #public void testInt()
        #{
        #    SysEnumerator_Int se = SysEnumerator_Int::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + maxint(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #    this.assertEquals(1, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #    this.assertEquals(2, se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Io unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Io
    PROPERTIES
      Name                #SysEnumerator_Io
      Extends             #SysEnumerator_IoBase
      Origin              #{DDCFE265-29E0-4E0D-B56C-2347C402AA40}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public Io base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #
        #/// <summary>
        #/// Базовый энумератор для CommaIo, AsciiIo, TextIo, BynaryIo, CommaTxtIo
        #/// </summary>
        #public class SysEnumerator_Io extends SysEnumerator_IoBase
        #{
        #    Io base;
        #}
      ENDSOURCE
      SOURCE #current
        #public container current()
        #{
        #    return current;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public container currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public container currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public container currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = this.base() && (this.base().status() == IO_Status::Ok);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(Io _base = null)
        #{
        #    base = _base;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.base() )
        #    {
        #        current = this.base().read();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    throw error(Error::wrongUseOfFunction(funcname()));
        #}
      ENDSOURCE
      SOURCE #xBase
        #public Io xBase()
        #{
        #    return this.base();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Io construct(Io base = null)
        #{
        #    SysEnumerator_Io enumerator = new SysEnumerator_Io(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_IoBase unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_IoBase
    PROPERTIES
      Name                #SysEnumerator_IoBase
      Extends             #xSysEnumerator
      Origin              #{776BE26B-CCFA-461F-9DF4-5FFAF151DC65}
    ENDPROPERTIES
    
    METHODS
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #
        #/// <summary>
        #/// Базовый энумератор для CommaIo, AsciiIo, TextIo, BynaryIo, CommaTxtIo
        #/// </summary>
        #abstract public class SysEnumerator_IoBase extends xSysEnumerator
        #{
        #    container current;
        #}
      ENDSOURCE
      SOURCE #current
        #public container current()
        #{
        #    return current;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public container currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public container currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public container currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = this.xBase() && (this.xBase().status() == IO_Status::Ok);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.xBase() )
        #    {
        #        current = this.xBase().read();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    throw error(Error::wrongUseOfFunction(funcname()));
        #}
      ENDSOURCE
      SOURCE #xBase
        #abstract public Io xBase()
        #{
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Io construct(Io base = null)
        #{
        #    SysEnumerator_Io enumerator = new SysEnumerator_Io(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Keywords unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Keywords
    PROPERTIES
      Name                #SysEnumerator_Keywords
      Extends             #xSysEnumerator
      Origin              #{4253245E-FCCD-4690-9A1F-2FF3C3E25EBC}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public Keywords base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected Keywords baseOrDefault(Keywords _base = null)
        #{
        #    if( _base == null )
        #    {
        #        _base = new Keywords();
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public abstract class SysEnumerator_Keywords extends xSysEnumerator
        #{
        #    Keywords base;
        #    str current;
        #}
      ENDSOURCE
      SOURCE #current
        #public str current()
        #{
        #    return current;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public str currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public str currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(Keywords _base = null)
        #{
        #    base = this.baseOrDefault(_base);
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Keywords_Function unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Keywords_Function
    PROPERTIES
      Name                #SysEnumerator_Keywords_Function
      Extends             #SysEnumerator_Keywords
      Origin              #{189BDD98-FF48-4DCF-954A-9965BB51AFAD}
    ENDPROPERTIES
    
    METHODS
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.base() )
        #    {
        #        current = this.base().firstFunction();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Keywords_Function extends SysEnumerator_Keywords
        #{
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.base() )
        #    {
        #        current = this.base().nextFunction();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Keywords_Function construct(Keywords base = null)
        #{
        #    SysEnumerator_Keywords_Function enumerator = new SysEnumerator_Keywords_Function(base);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Keywords_FunctionTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Keywords_FunctionTest
    PROPERTIES
      Name                #SysEnumerator_Keywords_FunctionTest
      Extends             #SysTestCase
      Origin              #{763AEC7F-60E7-420C-B6B9-11EFDE314766}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Keywords_FunctionTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testKeywordsFunction
        #public void testKeywordsFunction()
        #{
        #    SysEnumerator_Keywords_Function se = SysEnumerator_Keywords_Function::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('abs', se.current());
        #    this.assertEquals('abs', se.currentIdx());
        #    this.assertEquals('abs', se.currentKey());
        #    this.assertEquals('abs', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('acos', se.current());
        #    this.assertEquals('acos', se.currentIdx());
        #    this.assertEquals('acos', se.currentKey());
        #    this.assertEquals('acos', se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Keywords_Symbol unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Keywords_Symbol
    PROPERTIES
      Name                #SysEnumerator_Keywords_Symbol
      Extends             #SysEnumerator_Keywords
      Origin              #{11DD9D7F-B97A-42D4-9B57-04FDB08BAEC4}
    ENDPROPERTIES
    
    METHODS
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.base() )
        #    {
        #        current = this.base().firstSymbol();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Keywords_Symbol extends SysEnumerator_Keywords
        #{
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.base() )
        #    {
        #        current = this.base().nextSymbol();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Keywords_Symbol construct(Keywords base = null)
        #{
        #    SysEnumerator_Keywords_Symbol enumerator = new SysEnumerator_Keywords_Symbol(base);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Keywords_SymbolTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Keywords_SymbolTest
    PROPERTIES
      Name                #SysEnumerator_Keywords_SymbolTest
      Extends             #SysTestCase
      Origin              #{19A5EA04-5718-482B-8260-81221B60A19B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Keywords_SymbolTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testKeywordsSymbol
        #public void testKeywordsSymbol()
        #{
        #    SysEnumerator_Keywords_Symbol se = SysEnumerator_Keywords_Symbol::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('abstract', se.current());
        #    this.assertEquals('abstract', se.currentIdx());
        #    this.assertEquals('abstract', se.currentKey());
        #    this.assertEquals('abstract', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('anytype', se.current());
        #    this.assertEquals('anytype', se.currentIdx());
        #    this.assertEquals('anytype', se.currentKey());
        #    this.assertEquals('anytype', se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_LastAotSelection unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_LastAotSelection
    PROPERTIES
      Name                #SysEnumerator_LastAotSelection
      Extends             #xSysEnumerator
      Origin              #{7FE9A6EC-CD33-4A1A-A421-9B7270C4E248}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public LastAotSelection base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        current = this.base().first();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_LastAotSelection extends xSysEnumerator
        #{
        #    LastAotSelection base;
        #    TreeNode current;
        #}
      ENDSOURCE
      SOURCE #current
        #public TreeNode current()
        #{
        #    return current;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public TreeNode currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public TreeNode currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public TreeNode currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = this.base().selectionCount();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = super() && (current != null);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(LastAotSelection _base)
        #{;
        #    Debug::assert(_base != null);
        #
        #    base = _base;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        current = this.base().next();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_LastAotSelection construct(LastAotSelection base)
        #{
        #    SysEnumerator_LastAotSelection enumerator = new SysEnumerator_LastAotSelection(base);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_List unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_List
    PROPERTIES
      Name                #SysEnumerator_List
      Extends             #xSysEnumerator
      Origin              #{2CC8DF9E-E9F3-4AE4-B5B5-BF3E2635E4A2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public List base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseEnumerator
        #public ListEnumerator baseEnumerator()
        #{
        #    return baseEnumerator;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected List baseOrDefault(List _base = null)
        #{
        #    if( _base == null )
        #    {
        #        _base = new List(Types::Integer);
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    return super() && this.next();
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_List extends xSysEnumerator
        #{
        #    List base;
        #    ListEnumerator baseEnumerator;
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    anytype ret = baseEnumerator.current();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public anytype currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public anytype currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = this.base().elements();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(List _base = null)
        #{
        #    base = this.baseOrDefault(_base);
        #    baseEnumerator = base.getEnumerator();
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super() && baseEnumerator.moveNext();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    baseEnumerator.reset();
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_List construct(List base = null)
        #{
        #    SysEnumerator_List enumerator = new SysEnumerator_List(base);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ListTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ListTest
    PROPERTIES
      Name                #SysEnumerator_ListTest
      Extends             #SysTestCase
      Origin              #{34C91D0F-5D63-4E76-AFA7-00F792C0FD7B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ListTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testList
        #public void testList()
        #{
        #    List l = new List(Types::String);
        #    SysEnumerator_List se;
        #    int64 zero64;
        #
        #    l.addEnd('a');
        #    l.addEnd('b');
        #    l.addEnd('c');
        #    l.addEnd('d');
        #    l.addEnd('e');
        #
        #    se = SysEnumerator_List::construct(l);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentKey());
        #    this.assertEquals('a', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentKey());
        #    this.assertEquals('b', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #    this.assertEquals('c', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentKey());
        #    this.assertEquals('d', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentKey());
        #    this.assertEquals('e', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testListEmpty
        #public void testListEmpty()
        #{
        #    List l = new List(Types::String);
        #    SysEnumerator_List se = SysEnumerator_List::construct(l);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testListNull
        #public void testListNull()
        #{
        #    SysEnumerator_List se = SysEnumerator_List::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Map unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Map
    PROPERTIES
      Name                #SysEnumerator_Map
      Extends             #xSysEnumerator
      Origin              #{7044AAFA-C55E-40E9-9D6B-A66983D1C2D3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public Map base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseEnumerator
        #public MapEnumerator baseEnumerator()
        #{
        #    return baseEnumerator;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected Map baseOrDefault(Map _base = null)
        #{
        #    if( _base == null )
        #    {
        #        _base = new Map(Types::Integer, Types::Integer);
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Map extends xSysEnumerator
        #{
        #    Map base;
        #    MapEnumerator baseEnumerator;
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    anytype ret = baseEnumerator.current();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public anytype currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public anytype currentKey()
        #{
        #    anytype ret = baseEnumerator.currentKey();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    anytype ret = baseEnumerator.currentValue();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = this.base().elements();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(Map _base = null)
        #{
        #    base = this.baseOrDefault(_base);
        #    baseEnumerator = base.getEnumerator();
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super() && baseEnumerator.moveNext();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    baseEnumerator.reset();
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Map construct(Map base = null)
        #{
        #    SysEnumerator_Map enumerator = new SysEnumerator_Map(base);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_MapTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_MapTest
    PROPERTIES
      Name                #SysEnumerator_MapTest
      Extends             #SysTestCase
      Origin              #{6B6BD89B-0DA3-4824-ADB4-F7A6AA090C33}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_MapTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testMap
        #public void testMap()
        #{
        #    // see also test combined Map + Range
        #
        #    Map m = new Map(Types::Integer,Types::String);
        #    SysEnumerator_Map se;
        #    int64 zero64;
        #
        #    m.insert(10, 'a');
        #    m.insert(50, 'e');
        #    m.insert(20, 'b');
        #    m.insert(30, 'c');
        #    m.insert(40, 'd');
        #
        #    se = SysEnumerator_Map::construct(m);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertNotNull(se);
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(10, se.current());
        #    this.assertEquals(10, se.currentIdx());
        #    this.assertEquals(10, se.currentKey());
        #    this.assertEquals('a', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(20, se.current());
        #    this.assertEquals(20, se.currentIdx());
        #    this.assertEquals(20, se.currentKey());
        #    this.assertEquals('b', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(30, se.current());
        #    this.assertEquals(30, se.currentIdx());
        #    this.assertEquals(30, se.currentKey());
        #    this.assertEquals('c', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(40, se.current());
        #    this.assertEquals(40, se.currentIdx());
        #    this.assertEquals(40, se.currentKey());
        #    this.assertEquals('d', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(50, se.current());
        #    this.assertEquals(50, se.currentIdx());
        #    this.assertEquals(50, se.currentKey());
        #    this.assertEquals('e', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMapEmpty
        #public void testMapEmpty()
        #{
        #    Map m = new Map(Types::Integer, Types::String);
        #    SysEnumerator_Map se = SysEnumerator_Map::construct(m);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_QueryDatasource unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_QueryDatasource
    PROPERTIES
      Name                #SysEnumerator_QueryDatasource
      Extends             #SysEnumerator_Indexed
      Origin              #{ECB0ED27-7A40-4668-BFE7-E31F1576C341}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public Query base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_QueryDatasource extends SysEnumerator_Indexed
        #{
        #    Query base;
        #}
      ENDSOURCE
      SOURCE #current
        #public QueryBuildDataSource current()
        #{
        #    int idx = this.currentIdx();
        #    QueryBuildDataSource ret = this.base().dataSourceNo(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public QueryBuildDataSource currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public QueryBuildDataSource currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().dataSourceCount();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(Query _base, SysSequenceInt _idx = null)
        #{
        #    if( !_base )
        #    {
        #        _base = new Query();
        #    }
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_QueryDatasource construct(Query base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_QueryDatasource enumerator = new SysEnumerator_QueryDatasource(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_QueryRun unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_QueryRun
    PROPERTIES
      Name                #SysEnumerator_QueryRun
      Extends             #SysEnumerator_Indexed64
      Origin              #{D1F2362B-2DE0-4C07-B8F3-14A9562F6B2C}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public QueryRun base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_QueryRun extends SysEnumerator_Indexed64
        #{
        #    QueryRun base;
        #
        #    int64 estimatedIterations;
        #}
      ENDSOURCE
      SOURCE #current
        #public Common current(int dataSourceNo = 1)
        #{
        #    Common ret;
        #
        #    if( this.base() )
        #    {
        #        ret = this.base().getNo(dataSourceNo);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public Common currentKey(int dataSourceNo = 1)
        #{
        #    return this.current(dataSourceNo);
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public Common currentValue(int dataSourceNo = 1)
        #{
        #    return this.current(dataSourceNo);
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 _estimatedIterations = -1)
        #{
        #    if( estimatedIterations < 0
        #     && this.base()
        #     && this.base().query()
        #     && this.base().query().dataSourceCount() )
        #    {
        #        estimatedIterations = SysQuery::countTotal(this.base());
        #    }
        #    else
        #    {
        #        return max(0, estimatedIterations);
        #    }
        #
        #    return estimatedIterations;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(QueryRun _base = null, int64 _estimatedIterations = -1)
        #{
        #    base = _base;
        #    estimatedIterations = _estimatedIterations;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super() && this.base() && this.base().next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    if( this.base() )
        #    {
        #        this.base().reset();
        #    }
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_QueryRun construct(QueryRun base = null, int64 estimatedIterations = -1)
        #{
        #    SysEnumerator_QueryRun enumerator = new SysEnumerator_QueryRun(base, estimatedIterations);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_QueryRunTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_QueryRunTest
    PROPERTIES
      Name                #SysEnumerator_QueryRunTest
      Extends             #SysTestCase
      Origin              #{FA7D8E00-76D9-41F8-B611-B30D32C2B7DB}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_QueryRunTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testQueryRun
        #void testQueryRun()
        #{
        #    UserInfo                userInfo;
        #    Query                   q = new Query();
        #    SysEnumerator_QueryRun  se;
        #;
        #    q.addDataSource(UserInfo.TableId);
        #    se = SysEnumerator_QueryRun::construct(new QueryRun(q));
        #
        #    this.assertNotNull(se);
        #    this.assertNotEqual(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertNotEqual(0, se.current().RecId);
        #}
        #
      ENDSOURCE
      SOURCE #testQueryRunEmpty
        #void testQueryRunEmpty()
        #{
        #    Query q = new Query();
        #    QueryRun qr = new QueryRun(q);
        #    SysEnumerator_QueryRun se = SysEnumerator_QueryRun::construct(qr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.parmExceptionExpected(true);
        #
        #    se.moveNext();
        #}
        #
      ENDSOURCE
      SOURCE #testQueryRunNull
        #void testQueryRunNull()
        #{
        #    SysEnumerator_QueryRun se = SysEnumerator_QueryRun::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Record unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Record
    PROPERTIES
      Name                #SysEnumerator_Record
      Extends             #xSysEnumerator
      Origin              #{E482F337-BA40-4227-B3FA-5EA7594898EE}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public Common base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Record extends xSysEnumerator
        #{
        #    Common base;
        #}
      ENDSOURCE
      SOURCE #current
        #public common current()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public common currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public common currentKey()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public common currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = (this.base().RecId != 0);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(Common _base = null)
        #{
        #    base = _base;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.base().TableId )
        #    {
        #        next base;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #record
        #public common record()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    throw error(Error::wrongUseOfFunction(funcname()));
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Record construct(Common base = null)
        #{
        #    SysEnumerator_Record enumerator = new SysEnumerator_Record(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_RecordLinkList unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_RecordLinkList
    PROPERTIES
      Name                #SysEnumerator_RecordLinkList
      Extends             #xSysEnumerator
      Origin              #{18EF0F1C-A2A4-4CCD-A8C9-6CE24B5DB074}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public RecordLinkList base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected RecordLinkList baseOrDefault(RecordLinkList _base = null)
        #{
        #    if( !_base )
        #    {
        #        _base = new RecordLinkList();
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.base().first(record);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_RecordLinkList extends xSysEnumerator
        #{
        #    RecordLinkList base;
        #    Common record;
        #}
      ENDSOURCE
      SOURCE #current
        #public Common current()
        #{
        #    return record;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public Common currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public Common currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public Common currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = this.base().len();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(RecordLinkList _base = null)
        #{
        #    base = this.baseOrDefault(_base);
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super() && this.base().next(record);
        #
        #    return true;
        #}
      ENDSOURCE
      SOURCE #record
        #public common record()
        #{
        #    return record;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_RecordLinkList construct(RecordLinkList base = null)
        #{
        #    SysEnumerator_RecordLinkList enumerator = new SysEnumerator_RecordLinkList(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_RecordSortedList unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_RecordSortedList
    PROPERTIES
      Name                #SysEnumerator_RecordSortedList
      Extends             #xSysEnumerator
      Origin              #{EF6BB14A-16A7-42EC-9FC5-B999040C3FEA}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public RecordSortedList base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected RecordSortedList baseOrDefault(RecordSortedList _base = null)
        #{
        #    TmpTree tmp;
        #
        #    if( !_base )
        #    {
        #        _base = new RecordSortedList(tmp.TableId);
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        if( this.parmStartFrom() == null )
        #        {
        #            ret = this.base().first(record);
        #        }
        #        else
        #        {
        #            record.data(startFrom);
        #            ret = this.base().find(record);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_RecordSortedList extends xSysEnumerator
        #{
        #    RecordSortedList base;
        #    Common record;
        #    Common startFrom;
        #}
      ENDSOURCE
      SOURCE #current
        #public Common current()
        #{
        #    return record;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public Common currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public Common currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public Common currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = this.base().len();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(RecordSortedList _base = null, Common _startFrom = null)
        #{
        #    base = this.baseOrDefault(_base);
        #    startFrom = _startFrom;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super() && this.base().next(record);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #parmStartFrom
        #public common parmStartFrom(common _startFrom = startFrom)
        #{
        #    startFrom = _startFrom;
        #    return startFrom;
        #}
      ENDSOURCE
      SOURCE #record
        #public common record()
        #{
        #    return record;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_RecordSortedList construct(RecordSortedList base, Common startFrom = null)
        #{
        #    SysEnumerator_RecordSortedList enumerator = new SysEnumerator_RecordSortedList(base, startFrom);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_RecordTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_RecordTest
    PROPERTIES
      Name                #SysEnumerator_RecordTest
      Extends             #SysTestCase
      Origin              #{8BA2FDC2-541F-4ABA-A63C-5DEC1D7C9B16}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_RecordTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testRecord
        #public void testRecord()
        #{
        #    // see also combined Record + value2set
        #
        #    SysUserInfo sysUserInfo = SysUserInfo::find();
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(sysUserInfo);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    while(se.moveNext())
        #    {
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    }
        #
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testRecordEmpty
        #public void testRecordEmpty()
        #{
        #    SysUserInfo sysUserInfo;
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(sysUserInfo);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testRecordNull
        #public void testRecordNull()
        #{
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testRecordReset
        #public void testRecordReset()
        #{
        #    SysUserInfo sysUserInfo = SysUserInfo::find();
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(sysUserInfo);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.parmExceptionExpected(true);
        #
        #    se.reset();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_RunBaseProgress unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_RunBaseProgress
    PROPERTIES
      Name                #SysEnumerator_RunBaseProgress
      Extends             #SysEnumerator_Indexed64
      Origin              #{1FE1C223-A193-4592-BB34-3C7E9B706B0C}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public RunbaseProgress base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected RunbaseProgress baseOrDefault( RunbaseProgress _base = null
        #                                       , Caption caption = ''
        #                                       , int64 total = 0
        #                                       , Filename animation = #AviStopwatch
        #                                       )
        #
        #{
        #    if( _base == null )
        #    {
        #        _base = RunbaseProgress::construct(1);
        #        _base.setCaption(caption);
        #        _base.setTotal(total);
        #        _base.setAnimation(animation);
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_RunBaseProgress extends SysEnumerator_Indexed64
        #{
        #    #AviFiles
        #
        #    RunbaseProgress base;
        #}
      ENDSOURCE
      SOURCE #current
        #public int64 current()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int64 currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int64 currentValue()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret;
        #
        #    if( estimatedIterations >= 0 )
        #    {
        #        this.base().setTotal(estimatedIterations);
        #    }
        #
        #    ret = this.base().getTotal();
        #
        #    if( ret == 0 )
        #    {
        #        ret = super();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #moveNext
        #public boolean moveNext()
        #{
        #    boolean ret = super();
        #
        #    if( !ret )
        #    {
        #        this.base().reset(); // hide progress
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new( RunbaseProgress _base = null
        #               , Caption caption = ''
        #               , int64 total = 0
        #               , Filename animation = #AviStopwatch
        #               )
        #{
        #    base = this.baseOrDefault(_base, caption, total, animation);
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        this.base().incCount();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    this.base().reset();
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_RunBaseProgress construct( RunbaseProgress base = null
        #                                                     , Caption   caption    = ''
        #                                                     , int64     total      = 0
        #                                                     , Filename  animation  = #AviStopwatch
        #                                                     )
        #{
        #    SysEnumerator_RunBaseProgress enumerator = new SysEnumerator_RunBaseProgress(base, caption, total, animation);
        #
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #newFromRunBase
        #public static SysEnumerator_RunBaseProgress newFromRunBase( Runbase   runbase    = null
        #                                                          , Caption   caption    = ''
        #                                                          , int64     total      = 0
        #                                                          , Filename  animation  = #AviStopwatch
        #                                                          )
        #{
        #    RunbaseProgress progress;
        #    SysEnumerator_RunBaseProgress enumerator;
        #
        #    if( runbase )
        #    {
        #        if( !caption )
        #        {
        #            caption = runbase.caption();
        #        }
        #
        #        runbase.progressInit(caption, total, animation);
        #        progress = runbase.parmProgress();
        #    }
        #
        #    enumerator = SysEnumerator_RunBaseProgress::construct(progress, caption, total, animation);
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #newGeneral
        #public static SysEnumerator_RunBaseProgress newGeneral( Filename    animation = #AviStopwatch
        #                                                      , Caption     caption = ''
        #                                                      , int64       total = 0
        #                                                      )
        #{
        #    SysEnumerator_RunBaseProgress enumerator = SysEnumerator_RunBaseProgress::construct(null, caption, total, animation);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_RunBaseProgressTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_RunBaseProgressTest
    PROPERTIES
      Name                #SysEnumerator_RunBaseProgressTest
      Extends             #SysTestCase
      Origin              #{763CA2FF-02EC-47A5-9545-E18A5A797F79}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_RunBaseProgressTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testEstimatedIterations
        #public void testEstimatedIterations()
        #{
        #    int64 estimated = 123;
        #    SysEnumerator_RunBaseProgress se = SysEnumerator_RunBaseProgress::construct();
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(1, se.estimatedIterations());    // total not defined
        #    this.assertEquals(1, se.estimatedIterations(0));   // total = 0
        #
        #    this.assertEquals(estimated, se.estimatedIterations(estimated));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(estimated, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testRunbase
        #public void testRunbase()
        #{
        #    RunBase runBase = Tutorial_RunbaseBatch::construct();
        #    SysEnumerator_RunBaseProgress se = SysEnumerator_RunBaseProgress::newFromRunBase(runBase);
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.base());
        #
        #    this.assertEquals(runBase.parmProgress(), se.base());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SecurityKeySet unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SecurityKeySet
    PROPERTIES
      Name                #SysEnumerator_SecurityKeySet
      Extends             #SysEnumerator_Indexed
      Origin              #{0418AFEA-A7ED-4F95-B065-F29E15CFBE57}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public SecurityKeySet base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected SecurityKeySet baseOrDefault(SecurityKeySet _base = null)
        #{
        #    if( !_base )
        #    {
        #        _base = new SecurityKeySet();
        #    }
        #
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SecurityKeySet extends SysEnumerator_Indexed
        #{
        #    SecurityKeySet base;
        #}
      ENDSOURCE
      SOURCE #current
        #public securityKeyId current()
        #{
        #    int idx = this.currentIdx();
        #    securityKeyId ret = this.base().cnt2Id(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public Struct currentValue()
        #{
        #    Struct securityInfo = this.base().secureNodeInfo(this.current());
        #
        #    return securityInfo;
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().cnt();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(SecurityKeySet _base = null, SysSequenceInt _idx = null)
        #{
        #    base = this.baseOrDefault(_base);
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_SecurityKeySet construct(SecurityKeySet base = null, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_SecurityKeySet enumerator = new SysEnumerator_SecurityKeySet(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Sequence unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Sequence
    PROPERTIES
      Name                #SysEnumerator_Sequence
      Extends             #xSysEnumerator
      Origin              #{A9ED4E7B-03C5-466D-B19B-D045293CE7F5}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public ISysSequence base()
        #{
        #    return sequence;
        #}
        #
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected ISysSequence baseOrDefault(ISysSequence _sequence = null)
        #{
        #    if( !_sequence )
        #    {
        #        _sequence = SysSequenceInt::construct(1, 0);
        #    }
        #
        #    return _sequence;
        #}
        #
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        current = this.base().xStart();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #// TODO добавить SysEnumerator_SequenceDate, SysEnumerator_SequenceInt, SysEnumerator_SequenceInt64
        #public class SysEnumerator_Sequence extends xSysEnumerator
        #{
        #    ISysSequence    sequence;
        #    anytype         current;
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    return current;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public anytype currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public anytype currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = this.base().estimatedIterations();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = this.base().xContains(current);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(ISysSequence _sequence = null)
        #{
        #    sequence = this.baseOrDefault(_sequence);
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        current = this.base().xGetNext(current);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Sequence construct(ISysSequence sequence = null)
        #{
        #    SysEnumerator_Sequence enumerator = new SysEnumerator_Sequence(sequence);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SequenceTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SequenceTest
    PROPERTIES
      Name                #SysEnumerator_SequenceTest
      Extends             #SysTestCase
      Origin              #{33948369-E633-4DF4-8353-62A3926E42B3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SequenceTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testSequence
        #public void testSequence()
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct(1, 5, 2);
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(5, se.current());
        #    this.assertEquals(5, se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSequenceEmpty
        #public void testSequenceEmpty()
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct(1, 0, 2);
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSequenceNull
        #public void testSequenceNull()
        #{
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSequenceReset
        #public void testSequenceReset()
        #{
        #    SysSequenceInt    sequence = SysSequenceInt::construct(1, 5, 2);
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    se.reset();
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(5, se.current());
        #    this.assertEquals(5, se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Set unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Set
    PROPERTIES
      Name                #SysEnumerator_Set
      Extends             #xSysEnumerator
      Origin              #{28B39403-9592-4A04-94FF-C083CEF9271E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public Set base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseEnumerator
        #public SetEnumerator baseEnumerator()
        #{
        #    return baseEnumerator;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected Set baseOrDefault(Set _base = null)
        #{
        #    if( !_base )
        #    {
        #        _base = new Set(Types::Integer);
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Set extends xSysEnumerator
        #{
        #    Set base;
        #    SetEnumerator baseEnumerator;
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    anytype ret = baseEnumerator.current();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public anytype currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public anytype currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = this.base().elements();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(Set _base = null)
        #{
        #    base = this.baseOrDefault(_base);
        #    baseEnumerator = base.getEnumerator();
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super() && baseEnumerator.moveNext();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    baseEnumerator.reset();
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Set construct(Set base = null)
        #{
        #    SysEnumerator_Set enumerator = new SysEnumerator_Set(base);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SetTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SetTest
    PROPERTIES
      Name                #SysEnumerator_SetTest
      Extends             #SysTestCase
      Origin              #{AAB01F52-A107-4DEF-8514-A9462517629D}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SetTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testSet
        #public void testSet()
        #{
        #    Set s = new Set(Types::String);
        #    SysEnumerator_Set se;
        #    int64 zero64;
        #
        #    s.add('a');
        #    s.add('e');
        #    s.add('b');
        #    s.add('c');
        #    s.add('d');
        #
        #    se = SysEnumerator_Set::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSetEmpty
        #public void testSetEmpty()
        #{
        #    Set s = new Set(Types::String);
        #    SysEnumerator_Set se = SysEnumerator_Set::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSetNull
        #public void testSetNull()
        #{
        #    SysEnumerator_Set se = SysEnumerator_Set::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Sleep unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Sleep
    PROPERTIES
      Name                #SysEnumerator_Sleep
      Extends             #xSysEnumerator
      Origin              #{CA57AB57-442C-4682-A5BF-CFF2E165B82A}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #
        #/// <summary>
        #/// Засыпает на указанное число миллисекунд после каждого успешного moveNext (внутри цикла)
        #/// </summary>
        #public class SysEnumerator_Sleep extends xSysEnumerator
        #{
        #    int ms;
        #}
      ENDSOURCE
      SOURCE #current
        #public int current()
        #{
        #    return ms;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public int currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #moveNextPost
        #protected boolean moveNextPost(boolean ret)
        #{
        #    ret = super(ret);
        #
        #    if( ret )
        #    {
        #        sleep(ms);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(int timeInMs = 1000)
        #{
        #    ms = timeInMs;
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Sleep construct(int timeInMs = 1000)
        #{
        #    SysEnumerator_Sleep enumerator = new SysEnumerator_Sleep(timeInMs);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Struct unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Struct
    PROPERTIES
      Name                #SysEnumerator_Struct
      Extends             #SysEnumerator_Indexed
      Origin              #{6A638C5A-C054-4D7A-AB64-C95EB0EAC15C}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public Struct base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected Struct baseOrDefault(Struct _base = null)
        #{
        #    if( !_base )
        #    {
        #        _base = new Struct();
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Struct extends SysEnumerator_Indexed
        #{
        #    struct base;
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    int idx = this.currentIdx();
        #    anytype ret = this.base().valueIndex(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    int idx = this.currentIdx();
        #    str ret = this.base().fieldName(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKeyProvided
        #protected boolean currentKeyProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().fields();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = this.base().fields();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(Struct _base = null, SysSequenceInt _idx = null)
        #{
        #    if( !_base )
        #    {
        #        _base = new Struct();
        #    }
        #
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_Struct construct(Struct base = null, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_Struct enumerator = new SysEnumerator_Struct(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_StructTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_StructTest
    PROPERTIES
      Name                #SysEnumerator_StructTest
      Extends             #SysTestCase
      Origin              #{BC3F344B-3B8D-4D34-8467-898B321BE2DF}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_StructTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testStruct
        #public void testStruct()
        #{
        #    Struct s = new Struct();
        #    SysEnumerator_Struct se;
        #    int64 zero64;
        #
        #    s.add('field1', 'a');
        #    s.add('field5', 'e');
        #    s.add('field2', 'b');
        #    s.add('field3', 'c');
        #    s.add('field4', 'd');
        #
        #    se = SysEnumerator_Struct::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals('field1', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals('field5', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals('field2', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals('field3', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals('field4', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testStructEmpty
        #public void testStructEmpty()
        #{
        #    Struct s = new Struct();
        #    SysEnumerator_Struct se = SysEnumerator_Struct::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testStructNull
        #public void testStructNull()
        #{
        #    SysEnumerator_Struct se = SysEnumerator_Struct::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SysOperationProgress unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SysOperationProgress
    PROPERTIES
      Name                #SysEnumerator_SysOperationProgress
      Extends             #SysEnumerator_Indexed64
      Origin              #{A221B9E4-20F1-4F72-99C9-8577FA05ED1D}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public SysOperationProgress base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected SysOperationProgress baseOrDefault(SysOperationProgress _base = null)
        #{
        #    if( _base == null )
        #    {
        #        _base = SysOperationProgress::newGeneral(#AviStopwatch, '', int64max());
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SysOperationProgress extends SysEnumerator_Indexed64
        #{
        #    #AviFiles
        #
        #    SysOperationProgress base;
        #}
      ENDSOURCE
      SOURCE #current
        #public int64 current()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int64 currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public int64 currentValue()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret;
        #
        #    if( estimatedIterations >= 0 )
        #    {
        #        this.base().setTotal(estimatedIterations);
        #    }
        #
        #    ret = this.base().getTotal();
        #
        #    if( ret == 0 )
        #    {
        #        ret = super();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #moveNext
        #public boolean moveNext()
        #{
        #    boolean ret = super();
        #
        #    if( !ret )
        #    {
        #        this.base().reset(); // hide progress
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(SysOperationProgressBase _base = null)
        #{
        #    base = this.baseOrDefault(_base);
        #
        #    if( base && base.getTotal() )
        #    {
        #        super(SysSequenceInt64::construct(base.getCount_RU(), base.getTotal()));
        #    }
        #    else
        #    {
        #        super();
        #    }
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        this.base().incCount();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    this.base().reset();
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_SysOperationProgress construct(SysOperationProgress base = null)
        #{
        #    SysEnumerator_SysOperationProgress enumerator = new SysEnumerator_SysOperationProgress(base);
        #
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #newGeneral
        #public static SysEnumerator_SysOperationProgress newGeneral(
        #    Filename    animation = #AviStopwatch,
        #    Caption     caption = '',
        #    int64       total = 0)
        #{
        #    SysEnumerator_SysOperationProgress enumerator = SysEnumerator_SysOperationProgress::construct();
        #    SysOperationProgress progress = enumerator.base();
        #;
        #    progress.setAnimation(animation);
        #    progress.setCaption(caption);
        #    progress.setTotal(total);
        #
        #    return enumerator;
        #
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SystemCollection unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SystemCollection
    PROPERTIES
      Name                #SysEnumerator_SystemCollection
      Extends             #xSysEnumerator
      Origin              #{53DB72A4-9FBA-490A-A6F5-55A7404815AA}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public System.Collections.IEnumerable base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseEnumerator
        #public System.Collections.IEnumerator baseEnumerator()
        #{
        #    if( !baseEnumerator )
        #    {
        #        baseEnumerator = this.base().GetEnumerator();
        #    }
        #
        #    return baseEnumerator;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected System.Collections.IEnumerable baseOrDefault(System.Collections.IEnumerable _base = null)
        #{
        #    if( _base == null )
        #    {
        #        _base = new System.Collections.ArrayList();
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SystemCollection extends xSysEnumerator
        #{
        #    System.Collections.IEnumerable      base;
        #    System.Collections.IEnumerator      baseEnumerator;
        #
        #    System.Reflection.PropertyInfo      currentPropery;
        #    System.Reflection.MethodInfo        moveNextMethod;
        #    System.Reflection.MethodInfo        resetMethod;
        #
        #    System.Object[]                     nil;
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    anytype ret;
        #    InteropPermission perm = new InteropPermission(InteropKind::ClrInterop);
        #;
        #    Debug::assert(perm != null);
        #    perm.assert();
        #
        #    ret = CLRInterop::getAnyTypeForObject(this.get_Current());
        #
        #    CodeAccessPermission::revertAssert();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public anytype currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public anytype currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValueProvided
        #protected boolean currentValueProvided()
        #{
        #    return true;
        #}
      ENDSOURCE
      SOURCE #get_Current
        #public System.Object get_Current()
        #{
        #    System.Object ret = currentPropery.GetValue(this.baseEnumerator(), nil);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(System.Collections.IEnumerable _base = null)
        #{
        #    System.Type enumeratorType;
        #;
        #    base = this.baseOrDefault(_base);
        #
        #    nil = CLRInterop::Null('System.Object[]');
        #    enumeratorType = System.Type::GetType('System.Collections.IEnumerator');
        #    currentPropery = enumeratorType.GetProperty('Current');
        #    moveNextMethod = enumeratorType.GetMethod('MoveNext');
        #    resetMethod    = enumeratorType.GetMethod('Reset');
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super() && moveNextMethod.Invoke(this.baseEnumerator(), nil);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    resetMethod.Invoke(this.baseEnumerator(), nil);
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_SystemCollection construct(System.Collections.IEnumerable base = null)
        #{
        #    SysEnumerator_SystemCollection enumerator = new SysEnumerator_SystemCollection(base);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SystemCollectionTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SystemCollectionTest
    PROPERTIES
      Name                #SysEnumerator_SystemCollectionTest
      Extends             #SysTestCase
      Origin              #{0AC68C18-C54E-44FC-A794-C342FE7925D3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SystemCollectionTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testSystemCollection
        #public void testSystemCollection()
        #{
        #    System.Collections.ArrayList array = new System.Collections.ArrayList();
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
        #;
        #    array.Add('a');
        #    array.Add('e');
        #    array.Add('b');
        #    array.Add('c');
        #    array.Add('d');
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.currentIdx());
        #    this.assertEquals('a', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals('e', se.currentIdx());
        #    this.assertEquals('e', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals('b', se.currentIdx());
        #    this.assertEquals('b', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.currentIdx());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals('d', se.currentIdx());
        #    this.assertEquals('d', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSystemCollectionReset
        #public void testSystemCollectionReset()
        #{
        #    System.Collections.ArrayList array = new System.Collections.ArrayList();
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
        #;
        #    array.Add('a');
        #    array.Add('e');
        #    array.Add('b');
        #    array.Add('c');
        #    array.Add('d');
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    se.reset();
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.currentIdx());
        #    this.assertEquals('a', se.currentKey());
        #
        #    se.reset();
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.currentIdx());
        #    this.assertEquals('a', se.currentKey());
        #}
      ENDSOURCE
      SOURCE #testSystemCollectionSkip
        #public void testSystemCollectionSkip()
        #{
        #    System.Collections.ArrayList array = new System.Collections.ArrayList();
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
        #;
        #    array.Add('a');
        #    array.Add('e');
        #    array.Add('b');
        #    array.Add('c');
        #    array.Add('d');
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.skip(3));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testSystemNull
        #public void testSystemNull()
        #{
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(null);
        #;
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.base());
        #
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TextBuffer unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TextBuffer
    PROPERTIES
      Name                #SysEnumerator_TextBuffer
      Extends             #xSysEnumerator
      Origin              #{5552A450-8C51-4DAC-83E3-99C80C85C5C8}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public TextBuffer base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected TextBuffer baseOrDefault(TextBuffer _base = null)
        #{
        #    if( _base == null )
        #    {
        #        _base = new TextBuffer();
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #calcCurrent
        #protected boolean calcCurrent(boolean found)
        #{
        #    TextBuffer text = this.base();
        #    int size = text ? text.size() : 0;
        #    int pos, len;
        #
        #    if( found && text && (start <= size) )
        #    {
        #        pos = text.matchPos();
        #        len = text.matchLen();
        #
        #        current = text.subStr(pos, len);
        #        start = pos + len;
        #    }
        #    else
        #    {
        #        current = '';
        #        start = 0;
        #    }
        #
        #
        #    return found;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TextBuffer extends xSysEnumerator
        #{
        #    TextBuffer base;
        #    str pattern;
        #    str current;
        #    int start;
        #}
      ENDSOURCE
      SOURCE #current
        #public str current()
        #{
        #    return current;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public str currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public str currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public str currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #init
        #protected void init()
        #{
        #    start = 1;
        #    super();
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = super() && start;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(TextBuffer _base = null, str _pattern = '')
        #{
        #    base = this.baseOrDefault(_base);
        #    pattern = _pattern;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.base() )
        #    {
        #        ret = this.calcCurrent(this.base().find(pattern, start));
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_TextBuffer construct(TextBuffer base = null, str pattern = ':n+') // Pattern for a Word
        #{
        #    SysEnumerator_TextBuffer enumerator = new SysEnumerator_TextBuffer(base, pattern);
        #
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #newLine
        #public static SysEnumerator_TextBuffer_Line newLine(TextBuffer base = null)
        #{
        #    SysEnumerator_TextBuffer_Line enumerator = new SysEnumerator_TextBuffer_Line(base, '[^\r\n]*');
        #
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #newSplit
        #public static SysEnumerator_TextBuffer_Split newSplit(TextBuffer base = null, str splitPattern = ',')
        #{
        #    SysEnumerator_TextBuffer_Split enumerator = new SysEnumerator_TextBuffer_Split(base, splitPattern);
        #
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #newTabs
        #public static SysEnumerator_TextBuffer_Split newTabs(TextBuffer base = null)
        #{
        #    SysEnumerator_TextBuffer_Split enumerator = new SysEnumerator_TextBuffer_Split(base, '\t');
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TextBuffer_Line unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TextBuffer_Line
    PROPERTIES
      Name                #SysEnumerator_TextBuffer_Line
      Extends             #SysEnumerator_TextBuffer
      Origin              #{7457911A-125B-4121-905D-4E5CAC05F848}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TextBuffer_Line extends SysEnumerator_TextBuffer
        #{
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = super(estimatedIterations);
        #
        #    if( this.base() )
        #    {
        #        ret = this.base().numLines();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(TextBuffer _base = null, str _pattern = '[^\r\n]+')
        #{
        #    super(_base, _pattern);
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_TextBuffer_Line construct(TextBuffer base = null)
        #{
        #    SysEnumerator_TextBuffer_Line enumerator = new SysEnumerator_TextBuffer_Line(base, '[^\r\n]*');
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TextBuffer_LineTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TextBuffer_LineTest
    PROPERTIES
      Name                #SysEnumerator_TextBuffer_LineTest
      Extends             #SysTestCase
      Origin              #{2D321C46-6198-480A-A008-E64E64839B2B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TextBuffer_LineTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testTextBuffer_1024ok
        #public void testTextBuffer_1024ok()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Line se;
        #    int64 zero64;
        #    str line1 = strrep('-',1024);
        #    str line2 = strrep('=',1024);
        #
        #    text.appendText(line1);
        #    text.appendText('\n');
        #    text.appendText(line2);
        #
        #    se = SysEnumerator_TextBuffer_Line::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 2, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(line1, se.current());
        #    this.assertEquals(line1, se.currentIdx());
        #    this.assertEquals(line1, se.currentKey());
        #    this.assertEquals(line1, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(line2, se.current());
        #    this.assertEquals(line2, se.currentIdx());
        #    this.assertEquals(line2, se.currentKey());
        #    this.assertEquals(line2, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBuffer_1048575ok
        #public void testTextBuffer_1048575ok()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Line se;
        #    int64 zero64;
        #    str line1 = strrep('-',1048574);
        #    str line2 = strrep('=',1048574);
        #
        #    text.appendText(line1);
        #    text.appendText('\n');
        #    text.appendText(line2);
        #
        #    se = SysEnumerator_TextBuffer_Line::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 2, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #}
      ENDSOURCE
      SOURCE #testTextBufferEmpty
        #public void testTextBufferEmpty()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Line se = SysEnumerator_TextBuffer_Line::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferLine
        #public void testTextBufferLine()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Line se;
        #    int64 zero64;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer_Line::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1', se.current());
        #    this.assertEquals('line1', se.currentIdx());
        #    this.assertEquals('line1', se.currentKey());
        #    this.assertEquals('line1', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line2,\t хвост2', se.current());
        #    this.assertEquals('line2,\t хвост2', se.currentIdx());
        #    this.assertEquals('line2,\t хвост2', se.currentKey());
        #    this.assertEquals('line2,\t хвост2', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line3, tail3, and\tmore', se.current());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentIdx());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentKey());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferNull
        #public void testTextBufferNull()
        #{
        #    SysEnumerator_TextBuffer_Line se = SysEnumerator_TextBuffer_Line::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TextBuffer_Split unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TextBuffer_Split
    PROPERTIES
      Name                #SysEnumerator_TextBuffer_Split
      Extends             #SysEnumerator_TextBuffer
      Origin              #{A815C3DF-3985-422A-8A45-C915840FCE08}
    ENDPROPERTIES
    
    METHODS
      SOURCE #calcCurrent
        #protected boolean calcCurrent(boolean found)
        #{
        #    TextBuffer text = this.base();
        #    int size = text ? text.size() : 0;
        #    int pos;
        #
        #    if( !text || (start > size) )
        #    {
        #        current = '';
        #        start = 0;
        #    }
        #    else if( found )
        #    {
        #        pos = text.matchPos();
        #        current = text.subStr(start, pos-start);
        #        start = pos + 1;
        #    }
        #    else
        #    {
        #        pos = size + 1;
        #        current = text.subStr(start, pos-start);
        #        start = pos;
        #        found = true;
        #    }
        #
        #    return found;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TextBuffer_Split extends SysEnumerator_TextBuffer
        #{
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_TextBuffer_Split construct(TextBuffer base = null, str pattern = ',')
        #{
        #    SysEnumerator_TextBuffer_Split enumerator = new SysEnumerator_TextBuffer_Split(base, pattern);
        #
        #    return enumerator;
        #}
      ENDSOURCE
      SOURCE #newWithTabs
        #public static SysEnumerator_TextBuffer_Split newWithTabs(TextBuffer base = null)
        #{
        #    SysEnumerator_TextBuffer_Split enumerator = new SysEnumerator_TextBuffer_Split(base, '\t');
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TextBuffer_SplitTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TextBuffer_SplitTest
    PROPERTIES
      Name                #SysEnumerator_TextBuffer_SplitTest
      Extends             #SysTestCase
      Origin              #{F97F0A25-0F3E-4638-92E5-B9C7D9381971}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TextBuffer_SplitTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testTextBufferCommaSeparated
        #public void testTextBufferCommaSeparated()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Split se;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer_Split::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1\nline2', se.current());
        #    this.assertEquals('line1\nline2', se.currentIdx());
        #    this.assertEquals('line1\nline2', se.currentKey());
        #    this.assertEquals('line1\nline2', se.currentValue());
        #
        #    // not ASCII
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('\t хвост2\nline3', se.current());
        #    this.assertEquals('\t хвост2\nline3', se.currentIdx());
        #    this.assertEquals('\t хвост2\nline3', se.currentKey());
        #    this.assertEquals('\t хвост2\nline3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' tail3', se.current());
        #    this.assertEquals(' tail3', se.currentIdx());
        #    this.assertEquals(' tail3', se.currentKey());
        #    this.assertEquals(' tail3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' and\tmore', se.current());
        #    this.assertEquals(' and\tmore', se.currentIdx());
        #    this.assertEquals(' and\tmore', se.currentKey());
        #    this.assertEquals(' and\tmore', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferEmpty
        #public void testTextBufferEmpty()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Split se = SysEnumerator_TextBuffer_Split::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferNull
        #public void testTextBufferNull()
        #{
        #    SysEnumerator_TextBuffer_Split se = SysEnumerator_TextBuffer_Split::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferTabSeparated
        #public void testTextBufferTabSeparated()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Split se;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer_Split::newWithTabs(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1\nline2,', se.current());
        #    this.assertEquals('line1\nline2,', se.currentIdx());
        #    this.assertEquals('line1\nline2,', se.currentKey());
        #    this.assertEquals('line1\nline2,', se.currentValue());
        #
        #    // not ASCII
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.current());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentIdx());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentKey());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('more', se.current());
        #    this.assertEquals('more', se.currentIdx());
        #    this.assertEquals('more', se.currentKey());
        #    this.assertEquals('more', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TextBufferTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TextBufferTest
    PROPERTIES
      Name                #SysEnumerator_TextBufferTest
      Extends             #SysTestCase
      Origin              #{38E17173-FA62-40EE-873F-A303B43CFDE3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TextBufferTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testTextBufferCommaSeparated
        #public void testTextBufferCommaSeparated()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer se;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer::newSplit(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1\nline2', se.current());
        #    this.assertEquals('line1\nline2', se.currentIdx());
        #    this.assertEquals('line1\nline2', se.currentKey());
        #    this.assertEquals('line1\nline2', se.currentValue());
        #
        #    // not ASCII
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('\t хвост2\nline3', se.current());
        #    this.assertEquals('\t хвост2\nline3', se.currentIdx());
        #    this.assertEquals('\t хвост2\nline3', se.currentKey());
        #    this.assertEquals('\t хвост2\nline3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' tail3', se.current());
        #    this.assertEquals(' tail3', se.currentIdx());
        #    this.assertEquals(' tail3', se.currentKey());
        #    this.assertEquals(' tail3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' and\tmore', se.current());
        #    this.assertEquals(' and\tmore', se.currentIdx());
        #    this.assertEquals(' and\tmore', se.currentKey());
        #    this.assertEquals(' and\tmore', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferEmpty
        #public void testTextBufferEmpty()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer se = SysEnumerator_TextBuffer::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferLine
        #public void testTextBufferLine()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer se;
        #    int64 zero64;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer::newLine(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1', se.current());
        #    this.assertEquals('line1', se.currentIdx());
        #    this.assertEquals('line1', se.currentKey());
        #    this.assertEquals('line1', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line2,\t хвост2', se.current());
        #    this.assertEquals('line2,\t хвост2', se.currentIdx());
        #    this.assertEquals('line2,\t хвост2', se.currentKey());
        #    this.assertEquals('line2,\t хвост2', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line3, tail3, and\tmore', se.current());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentIdx());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentKey());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferNull
        #public void testTextBufferNull()
        #{
        #    SysEnumerator_TextBuffer se = SysEnumerator_TextBuffer::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferTabSeparated
        #public void testTextBufferTabSeparated()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer se;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer::newTabs(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1\nline2,', se.current());
        #    this.assertEquals('line1\nline2,', se.currentIdx());
        #    this.assertEquals('line1\nline2,', se.currentKey());
        #    this.assertEquals('line1\nline2,', se.currentValue());
        #
        #    // not ASCII
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.current());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentIdx());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentKey());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('more', se.current());
        #    this.assertEquals('more', se.currentIdx());
        #    this.assertEquals('more', se.currentKey());
        #    this.assertEquals('more', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferWord
        #public void testTextBufferWord()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer se;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1', se.current());
        #    this.assertEquals('line1', se.currentIdx());
        #    this.assertEquals('line1', se.currentKey());
        #    this.assertEquals('line1', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line2', se.current());
        #    this.assertEquals('line2', se.currentIdx());
        #    this.assertEquals('line2', se.currentKey());
        #    this.assertEquals('line2', se.currentValue());
        #
        #    // not ASCII
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('хвост2', se.current());
        #    this.assertEquals('хвост2', se.currentIdx());
        #    this.assertEquals('хвост2', se.currentKey());
        #    this.assertEquals('хвост2', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line3', se.current());
        #    this.assertEquals('line3', se.currentIdx());
        #    this.assertEquals('line3', se.currentKey());
        #    this.assertEquals('line3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('tail3', se.current());
        #    this.assertEquals('tail3', se.currentIdx());
        #    this.assertEquals('tail3', se.currentKey());
        #    this.assertEquals('tail3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('and', se.current());
        #    this.assertEquals('and', se.currentIdx());
        #    this.assertEquals('and', se.currentKey());
        #    this.assertEquals('and', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('more', se.current());
        #    this.assertEquals('more', se.currentIdx());
        #    this.assertEquals('more', se.currentKey());
        #    this.assertEquals('more', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TextIo unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TextIo
    PROPERTIES
      Name                #SysEnumerator_TextIo
      Extends             #SysEnumerator_IoBase
      Origin              #{321D5580-EFEA-4D09-98D2-F1A3FED6C019}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public TextIo base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TextIo extends SysEnumerator_IoBase
        #{
        #    TextIo base;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(TextIo _base = null)
        #{
        #    super();
        #    base = _base;
        #}
      ENDSOURCE
      SOURCE #xBase
        #public Io xBase()
        #{
        #    return this.base() as Io;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_TextIo construct(TextIo base = null)
        #{
        #    SysEnumerator_TextIo enumerator = new SysEnumerator_TextIo(base);
        #
        #    return enumerator;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TreeNodeChildren unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TreeNodeChildren
    PROPERTIES
      Name                #SysEnumerator_TreeNodeChildren
      Extends             #SysEnumerator_TreeNodeSibling
      Origin              #{1E393966-13E3-4462-9833-5B4C2D6DA5AC}
    ENDPROPERTIES
    
    METHODS
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.origin() )
        #    {
        #        if( this.startFromName() )
        #        {
        #            node = this.origin().AOTfindChild(this.startFromName());
        #        }
        #        else
        #        {
        #            node = this.origin().AOTfirstChild();
        #        }
        #    }
        #    else
        #    {
        #        node = null;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TreeNodeChildren extends SysEnumerator_TreeNodeSibling
        #{
        #    str startFromName;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = 0;
        #
        #    if( this.origin() )
        #    {
        #        ret = this.origin().AOTchildNodeCount();
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(TreeNode _node = null, str _startFromName = '')
        #{
        #    startFromName = _startFromName;
        #    super(_node);
        #}
      ENDSOURCE
      SOURCE #startFromName
        #public str startFromName()
        #{
        #    return startFromName;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_TreeNodeChildren construct(TreeNode node = null, str startFromName = '')
        #{
        #    SysEnumerator_TreeNodeChildren enumerator = new SysEnumerator_TreeNodeChildren(node, startFromName);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TreeNodeChildrenTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TreeNodeChildrenTest
    PROPERTIES
      Name                #SysEnumerator_TreeNodeChildrenTest
      Extends             #SysTestCase
      Origin              #{89F2B5D0-5EE6-47EF-B9C0-1A5D6E9AD121}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TreeNodeChildrenTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    SysDictTable sysDictTable = new SysDictTable(tablenum(CustTable));
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(sysDictTable.treeNode());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Fields', se.current().AOTname());
        #    this.assertEquals('Fields', se.currentValue().AOTname());
        #    this.assertEquals('Fields', se.currentIdx().AOTname());
        #    this.assertEquals('Fields', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Field Groups', se.current().AOTname());
        #    this.assertEquals('Field Groups', se.currentValue().AOTname());
        #    this.assertEquals('Field Groups', se.currentIdx().AOTname());
        #    this.assertEquals('Field Groups', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Indexes', se.current().AOTname());
        #    this.assertEquals('Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Full Text Indexes', se.current().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Relations', se.current().AOTname());
        #    this.assertEquals('Relations', se.currentValue().AOTname());
        #    this.assertEquals('Relations', se.currentIdx().AOTname());
        #    this.assertEquals('Relations', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('DeleteActions', se.current().AOTname());
        #    this.assertEquals('DeleteActions', se.currentValue().AOTname());
        #    this.assertEquals('DeleteActions', se.currentIdx().AOTname());
        #    this.assertEquals('DeleteActions', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Methods', se.current().AOTname());
        #    this.assertEquals('Methods', se.currentValue().AOTname());
        #    this.assertEquals('Methods', se.currentIdx().AOTname());
        #    this.assertEquals('Methods', se.currentKey().AOTname());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    SysDictClass sysDictClass = new SysDictClass(classnum(Global));
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(sysDictClass.treeNode().AOTfirstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testFindChildNodes
        #public void testFindChildNodes()
        #{
        #    SysDictTable    sysDictTable = new SysDictTable(tablenum(CustTable));
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(sysDictTable.treeNode(), 'Indexes');
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Indexes', se.current().AOTname());
        #    this.assertEquals('Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Full Text Indexes', se.current().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Relations', se.current().AOTname());
        #    this.assertEquals('Relations', se.currentValue().AOTname());
        #    this.assertEquals('Relations', se.currentIdx().AOTname());
        #    this.assertEquals('Relations', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('DeleteActions', se.current().AOTname());
        #    this.assertEquals('DeleteActions', se.currentValue().AOTname());
        #    this.assertEquals('DeleteActions', se.currentIdx().AOTname());
        #    this.assertEquals('DeleteActions', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Methods', se.current().AOTname());
        #    this.assertEquals('Methods', se.currentValue().AOTname());
        #    this.assertEquals('Methods', se.currentIdx().AOTname());
        #    this.assertEquals('Methods', se.currentKey().AOTname());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNull
        #public void testNull()
        #{
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(null);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TreeNodeSibling unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TreeNodeSibling
    PROPERTIES
      Name                #SysEnumerator_TreeNodeSibling
      Extends             #xSysEnumerator
      Origin              #{897F0BDA-98C6-45A6-8EFA-50FA8AC30E24}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public TreeNode base()
        #{
        #    return node;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TreeNodeSibling extends xSysEnumerator
        #{
        #    TreeNode node;
        #    TreeNode origin;
        #}
      ENDSOURCE
      SOURCE #current
        #public TreeNode current()
        #{
        #    return node;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public TreeNode currentIdx()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public TreeNode currentKey()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public TreeNode currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = super() && this.base();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(TreeNode _node = null)
        #{
        #    node = _node;
        #    origin = _node;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.base() )
        #    {
        #        node = this.base().AOTnextSibling();
        #    }
        #    else
        #    {
        #        node = null;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #origin
        #public TreeNode origin()
        #{
        #    return origin;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    node = origin;
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_TreeNodeSibling construct(TreeNode node = null)
        #{
        #    SysEnumerator_TreeNodeSibling enumerator = new SysEnumerator_TreeNodeSibling(node);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TreeNodeSiblingTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TreeNodeSiblingTest
    PROPERTIES
      Name                #SysEnumerator_TreeNodeSiblingTest
      Extends             #SysTestCase
      Origin              #{EE712241-DE51-4019-B658-48BC52B9884F}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TreeNodeSiblingTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    SysDictTable    sysDictTable = new SysDictTable(tablenum(CustTable));
        #    SysEnumerator_TreeNodeSibling se = SysEnumerator_TreeNodeSibling::construct(sysDictTable.treeNode().AOTfirstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Fields', se.current().AOTname());
        #    this.assertEquals('Fields', se.currentValue().AOTname());
        #    this.assertEquals('Fields', se.currentIdx().AOTname());
        #    this.assertEquals('Fields', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Field Groups', se.current().AOTname());
        #    this.assertEquals('Field Groups', se.currentValue().AOTname());
        #    this.assertEquals('Field Groups', se.currentIdx().AOTname());
        #    this.assertEquals('Field Groups', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Indexes', se.current().AOTname());
        #    this.assertEquals('Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Full Text Indexes', se.current().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Relations', se.current().AOTname());
        #    this.assertEquals('Relations', se.currentValue().AOTname());
        #    this.assertEquals('Relations', se.currentIdx().AOTname());
        #    this.assertEquals('Relations', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('DeleteActions', se.current().AOTname());
        #    this.assertEquals('DeleteActions', se.currentValue().AOTname());
        #    this.assertEquals('DeleteActions', se.currentIdx().AOTname());
        #    this.assertEquals('DeleteActions', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Methods', se.current().AOTname());
        #    this.assertEquals('Methods', se.currentValue().AOTname());
        #    this.assertEquals('Methods', se.currentIdx().AOTname());
        #    this.assertEquals('Methods', se.currentKey().AOTname());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    SysEnumerator_TreeNodeSibling se = SysEnumerator_TreeNodeSibling::construct(null);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlAttributeArray unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlAttributeArray
    PROPERTIES
      Name                #SysEnumerator_XmlAttributeArray
      Extends             #SysEnumerator_Indexed
      Origin              #{C333D6FB-D15D-4B7C-8AB9-A6E145BE5966}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public XmlAttributeArray base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #baseOrDefault
        #protected XmlAttributeArray baseOrDefault(XmlAttributeArray _base = null)
        #{
        #    if( _base == null )
        #    {
        #        _base = new XmlAttributeArray(0);
        #    }
        #
        #    return _base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlAttributeArray extends SysEnumerator_Indexed
        #{
        #    XmlAttributeArray base;
        #}
      ENDSOURCE
      SOURCE #current
        #public XmlAttribute  current()
        #{
        #    int idx = this.currentIdx();
        #    XmlAttribute  ret = this.base().getItem(idx);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public XmlAttribute currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = this.base().length() - 1;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #defaultStart
        #protected int defaultStart()
        #{
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = super() && this.base().length();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(XmlAttributeArray _base = null, SysSequenceInt _idx = null)
        #{
        #    base = this.baseOrDefault();
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_XmlAttributeArray construct(XmlAttributeArray base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_XmlAttributeArray enumerator = new SysEnumerator_XmlAttributeArray(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlChildren unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlChildren
    PROPERTIES
      Name                #SysEnumerator_XmlChildren
      Extends             #SysEnumerator_XmlSibling
      Origin              #{BBA93573-91AF-4223-98E3-14026FED5706}
    ENDPROPERTIES
    
    METHODS
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.origin() )
        #    {
        #        node = this.origin().firstChild();
        #    }
        #    else
        #    {
        #        node = null;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlChildren extends SysEnumerator_XmlSibling
        #{
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = 0;
        #
        #    if( this.origin() && this.origin().hasChildNodes() )
        #    {
        #        ret = super(estimatedIterations);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_XmlChildren construct(XmlNode node = null)
        #{
        #    SysEnumerator_XmlChildren enumerator = new SysEnumerator_XmlChildren(node);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlChildrenTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlChildrenTest
    PROPERTIES
      Name                #SysEnumerator_XmlChildrenTest
      Extends             #SysTestCase
      Origin              #{A3EAF3E9-E946-47EF-A385-E936D9F2CD8C}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlChildrenTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlChildren se = SysEnumerator_XmlChildren::construct(xmlDoc.root());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlChildren se = SysEnumerator_XmlChildren::construct(xmlDoc);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #public void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlChildren se = SysEnumerator_XmlChildren::construct(xmlDoc.selectSingleNode('root/element'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlNodeList unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlNodeList
    PROPERTIES
      Name                #SysEnumerator_XmlNodeList
      Extends             #xSysEnumerator
      Origin              #{9E3848A8-20E5-40D5-A06C-313F747D1B89}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public XmlNodeList base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlNodeList extends xSysEnumerator
        #{
        #    XmlNodeList base;
        #    XmlNode node;
        #    int idx;
        #}
      ENDSOURCE
      SOURCE #current
        #public XmlNode current()
        #{
        #    return node;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public int currentIdx()
        #{
        #    return idx;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public XmlNode currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = this.base().length();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #init
        #protected void init()
        #{
        #    idx = -1;
        #    super();
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = super() && (node != null);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(XmlNodeList _base = null)
        #{
        #    if( _base == null )
        #    {
        #        _base = XmlDocument::newBlank().root().selectNodes('');
        #    }
        #
        #    base = _base;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret )
        #    {
        #        if( this.base() )
        #        {
        #            node = this.base().nextNode();
        #            idx++;
        #        }
        #        else
        #        {
        #            node = null;
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    if( this.base() )
        #    {
        #        this.base().reset();
        #    }
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_XmlNodeList construct(XmlNodeList base)
        #{
        #    SysEnumerator_XmlNodeList enumerator = new SysEnumerator_XmlNodeList(base);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlNodeListIndex unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlNodeListIndex
    PROPERTIES
      Name                #SysEnumerator_XmlNodeListIndex
      Extends             #SysEnumerator_Indexed
      Origin              #{17B2DC7F-F551-4F34-B964-8DACD74A8C54}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public XmlNodeList base()
        #{
        #    return base;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlNodeListIndex extends SysEnumerator_Indexed
        #{
        #    XmlNodeList base;
        #}
      ENDSOURCE
      SOURCE #current
        #public XmlNode current()
        #{
        #    XmlNode ret;
        #    int idx;
        #
        #    if( this.base() )
        #    {
        #        idx = this.currentIdx();
        #        ret = this.base().item(idx);
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public XmlNode currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #defaultEnd
        #protected int defaultEnd()
        #{
        #    int ret = -1;
        #
        #    if( this.base() )
        #    {
        #        ret = this.base().length() - 1;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #defaultStart
        #protected int defaultStart()
        #{
        #    return 0;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = super() && this.base() && this.base().length();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(XmlNodeList _base = null, SysSequenceInt _idx = null)
        #{
        #    base = _base;
        #    super(_idx);
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_XmlNodeListIndex construct(XmlNodeList base, SysSequenceInt idx = null)
        #{
        #    SysEnumerator_XmlNodeListIndex enumerator = new SysEnumerator_XmlNodeListIndex(base, idx);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlNodeListIndexTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlNodeListIndexTest
    PROPERTIES
      Name                #SysEnumerator_XmlNodeListIndexTest
      Extends             #SysTestCase
      Origin              #{88A0E39B-0DB1-46EB-B4D9-7E67C687B61E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlNodeListIndexTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeListIndex se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.root().childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlNodeListIndex se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #public void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeListIndex se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.selectNodes('root/element/sub'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.1', se.current().text());
        #    this.assertEquals('2.1', se.currentValue().text());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.2', se.current().text());
        #    this.assertEquals('2.2', se.currentValue().text());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.3', se.current().text());
        #    this.assertEquals('2.3', se.currentValue().text());
        #    this.assertEquals(6, se.currentIdx());
        #    this.assertEquals(6, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlNodeListTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlNodeListTest
    PROPERTIES
      Name                #SysEnumerator_XmlNodeListTest
      Extends             #SysTestCase
      Origin              #{6B3D5C61-B0DB-4676-B513-D7D29B40D7F5}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlNodeListTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeList se = SysEnumerator_XmlNodeList::construct(xmlDoc.root().childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlNodeList se = SysEnumerator_XmlNodeList::construct(xmlDoc.childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #public void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeList se = SysEnumerator_XmlNodeList::construct(xmlDoc.selectNodes('root/element/sub'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.1', se.current().text());
        #    this.assertEquals('2.1', se.currentValue().text());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.2', se.current().text());
        #    this.assertEquals('2.2', se.currentValue().text());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.3', se.current().text());
        #    this.assertEquals('2.3', se.currentValue().text());
        #    this.assertEquals(6, se.currentIdx());
        #    this.assertEquals(6, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlSibling unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlSibling
    PROPERTIES
      Name                #SysEnumerator_XmlSibling
      Extends             #xSysEnumerator
      Origin              #{61BD7345-0E95-4C16-A770-0AF31580189D}
    ENDPROPERTIES
    
    METHODS
      SOURCE #base
        #public XmlNode base()
        #{
        #    return node;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlSibling extends xSysEnumerator
        #{
        #    XmlNode node;
        #    XmlNode origin;
        #    int idx;
        #}
      ENDSOURCE
      SOURCE #current
        #public XmlNode current()
        #{
        #    return node;
        #}
      ENDSOURCE
      SOURCE #currentIdx
        #public int currentIdx()
        #{
        #    return idx;
        #}
      ENDSOURCE
      SOURCE #currentKey
        #public int currentKey()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #currentValue
        #public XmlNode currentValue()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #init
        #protected void init()
        #{
        #    idx = 0;
        #    super();
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = super() && this.base();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new(XmlNode _node = null)
        #{
        #    node = _node;
        #    origin = _node;
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super();
        #
        #    if( ret && this.base() )
        #    {
        #        node = this.base().nextSibling();
        #        idx++;
        #    }
        #    else
        #    {
        #        node = null;
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #origin
        #public XmlNode origin()
        #{
        #    return origin;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    node = origin;
        #    super();
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
      SOURCE #construct
        #public static SysEnumerator_XmlSibling construct(XmlNode node = null)
        #{
        #    SysEnumerator_XmlSibling enumerator = new SysEnumerator_XmlSibling(node);
        #
        #    return enumerator;
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlSiblingTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlSiblingTest
    PROPERTIES
      Name                #SysEnumerator_XmlSiblingTest
      Extends             #SysTestCase
      Origin              #{8152D769-51EE-4268-A57A-C54805FB807E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlSiblingTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlSibling se = SysEnumerator_XmlSibling::construct(xmlDoc.root().firstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlSibling se = SysEnumerator_XmlSibling::construct(xmlDoc.firstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #public void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlSibling se = SysEnumerator_XmlSibling::construct(xmlDoc.selectSingleNode('root/element/sub'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumeratorGroup unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumeratorGroup
    PROPERTIES
      Name                #SysEnumeratorGroup
      Extends             #xSysEnumerator
      Origin              #{3435AF94-5F57-4997-9E10-4DB5EBAF2D08}
    ENDPROPERTIES
    
    METHODS
      SOURCE #add
        #public SysEnumeratorGroup add(xSysEnumerator enumerator, str name = '')
        #{
        #    // Circular references are not checked
        #    if( !this.isNotMe(enumerator) )
        #    {
        #        throw error(Error::wrongUseOfFunction(funcname()));
        #    }
        #
        #    if( !this.enumerators().add(enumerator) )
        #    {
        #        throw error(Error::wrongUseOfFunction(funcname()));
        #    }
        #
        #    if( name )
        #    {
        #        this.names().insert(name, enumerator);
        #    }
        #
        #    this.currentEnumerator(enumerator);
        #    this.currentIdxEnumerator(enumerator);
        #    this.currentKeyEnumerator(enumerator);
        #    this.currentValueEnumerator(enumerator);
        #
        #    this.estimatedIterations(this.estimatedIterations());
        #
        #    enumerator.eventAddedToGroup(this);
        #
        #    return this;
        #}
      ENDSOURCE
      SOURCE #begin
        #protected boolean begin()
        #{
        #    boolean ret = super() && this.next();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public abstract class SysEnumeratorGroup extends xSysEnumerator
        #{
        #    Set enumerators;
        #    Map enumeratorNames;
        #
        #    ISysEnumerator currentEnumerator;
        #    ISysEnumerator currentIdxEnumerator;
        #    ISysEnumerator currentKeyEnumerator;
        #    ISysEnumerator currentValueEnumerator;
        #}
      ENDSOURCE
      SOURCE #current
        #public anytype current()
        #{
        #    anytype ret = this.currentEnumerator().xCurrent();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentEnumerator
        #protected ISysEnumerator currentEnumerator(SysEnumerator enumerator = null)
        #{
        #    if( !prmisdefault(enumerator) )
        #    {
        #        currentEnumerator = enumerator;
        #    }
        #
        #    Debug::assert(this.isNotMe(currentEnumerator));
        #
        #    return currentEnumerator;
        #}
        #
      ENDSOURCE
      SOURCE #currentIdx
        #public anytype currentIdx()
        #{
        #    anytype ret = this.currentIdxEnumerator().xCurrentIdx();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentIdxEnumerator
        #protected ISysEnumerator currentIdxEnumerator(SysEnumerator enumerator = null)
        #{
        #    if( !prmisdefault(enumerator)
        #     && (enumerator.currentIdxProvided() || (currentIdxEnumerator == null)) )
        #    {
        #        currentIdxEnumerator = enumerator;
        #    }
        #
        #    Debug::assert(this.isNotMe(currentIdxEnumerator));
        #
        #    return currentKeyEnumerator;
        #}
        #
      ENDSOURCE
      SOURCE #currentKey
        #public anytype currentKey()
        #{
        #    anytype ret = this.currentKeyEnumerator().xCurrentKey();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentKeyEnumerator
        #protected ISysEnumerator currentKeyEnumerator(SysEnumerator enumerator = null)
        #{
        #    if( !prmisdefault(enumerator)
        #     && (enumerator.currentKeyProvided() || (currentKeyEnumerator == null)) )
        #    {
        #        currentKeyEnumerator = enumerator;
        #    }
        #
        #    Debug::assert(this.isNotMe(currentKeyEnumerator));
        #
        #    return currentKeyEnumerator;
        #}
        #
      ENDSOURCE
      SOURCE #currentValue
        #public anytype currentValue()
        #{
        #    anytype ret = this.currentValueEnumerator().xCurrentValue();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #currentValueEnumerator
        #protected ISysEnumerator currentValueEnumerator(SysEnumerator enumerator = null)
        #{
        #    if( !prmisdefault(enumerator)
        #     && (enumerator.currentValueProvided() || (currentValueEnumerator == null)) )
        #    {
        #        currentValueEnumerator = enumerator;
        #    }
        #
        #    Debug::assert(this.isNotMe(currentValueEnumerator));
        #
        #    return currentValueEnumerator;
        #}
        #
      ENDSOURCE
      SOURCE #definitionString
        #public str definitionString()
        #{
        #    //TODO mazzy
        #    return classid2name(classidget(this));
        #}
      ENDSOURCE
      SOURCE #enumerators
        #public Set enumerators()
        #{
        #    return enumerators;
        #}
      ENDSOURCE
      SOURCE #estimatedIterations
        #public int64 estimatedIterations(int64 estimatedIterations = -1)
        #{
        #    int64 ret = super();
        #    SetEnumerator se = this.enumerators().getEnumerator();
        #    xSysEnumerator enumerator;
        #
        #    while(se.moveNext())
        #    {
        #        enumerator = se.current();
        #        if( this.isNotMe(enumerator) )
        #        {
        #            ret = min(enumerator.estimatedIterations(estimatedIterations), ret);
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #get
        #public xSysEnumerator get(str name)
        #{
        #    xSysEnumerator ret = this.names().lookup(name);
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #isNotMe
        #protected boolean isNotMe(ISysEnumerator enumerator)
        #{
        #    ISysEnumerator self = this;
        #    boolean ret = (enumerator && (enumerator != self));
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #more
        #protected boolean more()
        #{
        #    boolean ret = super() && !this.enumerators().empty();
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #names
        #public Map names()
        #{
        #    return enumeratorNames;
        #}
      ENDSOURCE
      SOURCE #new
        #public void new()
        #{
        #    enumerators = new Set(Types::Class);
        #    enumeratorNames = new Map(Types::String, Types::Class);
        #    super();
        #}
      ENDSOURCE
      SOURCE #next
        #protected boolean next()
        #{
        #    boolean ret = super() && this.enumerators();
        #    SetEnumerator se;
        #    xSysEnumerator enumerator;
        #
        #    if( ret )
        #    {
        #        se = this.enumerators().getEnumerator();
        #        while(se.moveNext())
        #        {
        #            enumerator = se.current();
        #            if( this.isNotMe(enumerator) )
        #            {
        #                ret = enumerator.moveNext() && ret; // It calls all hooks anyway.
        #            }
        #        }
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #reset
        #public void reset()
        #{
        #    SetEnumerator se = this.enumerators().getEnumerator();
        #    xSysEnumerator enumerator;
        #
        #    while(se.moveNext())
        #    {
        #        enumerator = se.current();
        #        if( this.isNotMe(enumerator) )
        #        {
        #            enumerator.reset();
        #        }
        #    }
        #
        #    super();
        #}
      ENDSOURCE
      SOURCE #toString
        #public str toString()
        #{
        #    str ret;
        #    anytype emptyStr = '';
        #
        #    //TODO mazzy
        #    if( this.position() == SysEnumeratorPosition::Inside )
        #    {
        #        ret = strfmt('[%2,%3,%4]:{%1}',
        #            this.enumerators().elements(),
        #            this.currentEnumerator() ? this.current() : emptyStr,
        #            this.currentKeyEnumerator() ? this.currentKey() : emptyStr,
        #            this.currentValueEnumerator() ? this.currentValue() : emptyStr);
        #    }
        #    else
        #    {
        #        ret = strfmt('[%2]:{%1}',
        #            this.enumerators().elements(),
        #            this.position());
        #    }
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #xCurrent
        #public anytype xCurrent()
        #{
        #    return this.current();
        #}
      ENDSOURCE
      SOURCE #xCurrentIdx
        #public anytype xCurrentIdx()
        #{
        #    return this.currentIdx();
        #}
      ENDSOURCE
      SOURCE #xCurrentKey
        #public anytype xCurrentKey()
        #{
        #    return this.currentKey();
        #}
      ENDSOURCE
      SOURCE #xCurrentValue
        #public anytype xCurrentValue()
        #{
        #    return this.currentValue();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumeratorGroupTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumeratorGroupTest
    PROPERTIES
      Name                #SysEnumeratorGroupTest
      Extends             #SysTestCase
      Origin              #{CBE8740A-08DF-47CF-9D53-A7D8F0B73729}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumeratorGroupTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testAdd
        #public void testAdd()
        #{
        #    SysEnumerator se = SysEnumerator::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #    this.assertEquals(0, se.enumerators().elements());
        #
        #    se.add(SysEnumerator_Int::newFromTo(1,100));
        #    this.assertEquals(1, se.enumerators().elements());
        #
        #    this.assertEquals(zero64 + 100, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    SysEnumerator se = SysEnumerator::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #    this.assertEquals(0, se.enumerators().elements());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEstimatedIterations
        #public void testEstimatedIterations()
        #{
        #    SysSequenceInt sequnce = SysSequenceInt::construct(1,100);
        #    SysEnumerator_Int intEnumerator = SysEnumerator_Int::construct(sequnce);
        #    SysEnumerator_First first5 = SysEnumerator_First::construct(5);
        #
        #    SysEnumerator se = SysEnumerator::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #    this.assertEquals(0, se.enumerators().elements());
        #
        #    se.add(intEnumerator);
        #    this.assertEquals(1, se.enumerators().elements());
        #    this.assertEquals(zero64 + 100, se.estimatedIterations());
        #
        #    se.add(first5);
        #    this.assertEquals(2, se.enumerators().elements());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumeratorTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumeratorTest
    PROPERTIES
      Name                #SysEnumeratorTest
      Extends             #SysTestCase
      Origin              #{0BD04D6B-4710-4DBC-A4F9-382B2ED55D1E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumeratorTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testArgsRecords
        #public void testArgsRecords()
        #{
        #    Args args = new Args();
        #    DataArea dataArea;
        #    SysEnumerator se;
        #
        #    select dataArea;
        #    args.record(dataArea);
        #
        #    se = SysEnumerator::newFromArgsRecord(args);
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(dataArea, se.current());
        #    this.assertEquals(dataArea, se.currentKey());
        #    this.assertEquals(dataArea, se.currentValue());
        #}
      ENDSOURCE
      SOURCE #testCombinedMapRange
        #public void testCombinedMapRange()
        #{
        #    Map m = new Map(Types::Integer,Types::String);
        #    SysEnumerator se;
        #
        #    m.insert(10, 'a');
        #    m.insert(50, 'e');
        #    m.insert(20, 'b');
        #    m.insert(30, 'c');
        #    m.insert(40, 'd');
        #
        #    se = SysEnumerator::construct()
        #        .add(SysEnumerator_Map::construct(m))
        #        .add(SysEnumerator_Int::construct());
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(10, se.currentKey());
        #    this.assertEquals('a', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals(20, se.currentKey());
        #    this.assertEquals('b', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(30, se.currentKey());
        #    this.assertEquals('c', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(4, se.current());
        #    this.assertEquals(40, se.currentKey());
        #    this.assertEquals('d', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(5, se.current());
        #    this.assertEquals(50, se.currentKey());
        #    this.assertEquals('e', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    SysEnumerator se = SysEnumerator::construct();
        #
        #    this.assertNotNull(se);
        #}
      ENDSOURCE
      SOURCE #testEnum
        #public void testEnum()
        #{
        #    ABC enum;
        #    SysEnumerator se = SysEnumerator::newFromEnum(enum);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(0, se.current());
        #    this.assertEquals('None', se.currentKey());
        #    this.assertEquals(0+ABC::None, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals('A', se.currentKey());
        #    this.assertEquals(0+ABC::A, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals('B', se.currentKey());
        #    this.assertEquals(0+ABC::B, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals('C', se.currentKey());
        #    this.assertEquals(0+ABC::C, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEnumId
        #public void testEnumId()
        #{
        #    SysEnumerator se = SysEnumerator::newFromEnumId(enumnum(ABC));
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(0, se.current());
        #    this.assertEquals('None', se.currentKey());
        #    this.assertEquals(0+ABC::None, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals('A', se.currentKey());
        #    this.assertEquals(0+ABC::A, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals('B', se.currentKey());
        #    this.assertEquals(0+ABC::B, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals('C', se.currentKey());
        #    this.assertEquals(0+ABC::C, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: PerfSysEnumerator_XmlTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #PerfSysEnumerator_XmlTest
    PROPERTIES
      Name                #PerfSysEnumerator_XmlTest
      Extends             #SysTestCase
      Origin              #{FF93CB7D-6062-453B-A0E2-633E28DA1BE2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class PerfSysEnumerator_XmlTest extends SysTestCase
        #{
        #    #define.loopCount(1000)
        #}
      ENDSOURCE
      SOURCE #testXml
        #public void testXml()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeList se;
        #    int64 zero64;
        #
        #    SysEnumerator loop = SysEnumerator::newFromToInt(1, #loopCount);
        #    while(loop.moveNext())
        #    {
        #        se = SysEnumerator_XmlNodeList::construct(xmlDoc.selectNodes('root/element[1]/sub'));
        #        this.assertNotNull(se);
        #        this.assertEquals(zero64 + 4, se.estimatedIterations());
        #        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.1', se.current().text());
        #        this.assertEquals(0, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.2', se.current().text());
        #        this.assertEquals(1, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.3', se.current().text());
        #        this.assertEquals(2, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.4', se.current().text());
        #        this.assertEquals(3, se.currentKey());
        #
        #        this.assertFalse(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #        this.assertEquals(zero64 + 4, se.estimatedIterations());
        #    }
        #}
      ENDSOURCE
      SOURCE #testXmlIndex
        #public void testXmlIndex()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeListIndex se;
        #    int64 zero64;
        #
        #    SysEnumerator loop = SysEnumerator::newFromToInt(1, #loopCount);
        #    while(loop.moveNext())
        #    {
        #        se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.selectNodes('root/element[1]/sub'));
        #        this.assertNotNull(se);
        #        this.assertEquals(zero64 + 4, se.estimatedIterations());
        #        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.1', se.current().text());
        #        this.assertEquals(0, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.2', se.current().text());
        #        this.assertEquals(1, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.3', se.current().text());
        #        this.assertEquals(2, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.4', se.current().text());
        #        this.assertEquals(3, se.currentKey());
        #
        #        this.assertFalse(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #        this.assertEquals(zero64 + 4, se.estimatedIterations());
        #    }
        #}
      ENDSOURCE
      SOURCE #testXmlSibling
        #public void testXmlSibling()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlSibling se;
        #    int64 zero64;
        #
        #    SysEnumerator loop = SysEnumerator::newFromToInt(1, #loopCount);
        #    while(loop.moveNext())
        #    {
        #        se = SysEnumerator_XmlSibling::construct(xmlDoc.root().firstChild().firstChild());
        #        this.assertNotNull(se);
        #        this.assertEquals(int64Max(), se.estimatedIterations());
        #        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.1', se.current().text());
        #        this.assertEquals(0, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.2', se.current().text());
        #        this.assertEquals(1, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.3', se.current().text());
        #        this.assertEquals(2, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.4', se.current().text());
        #        this.assertEquals(3, se.currentKey());
        #
        #        this.assertFalse(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #        this.assertEquals(int64Max(), se.estimatedIterations());
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: PerfSysEnumeratorTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #PerfSysEnumeratorTest
    PROPERTIES
      Name                #PerfSysEnumeratorTest
      Extends             #SysTestCase
      Origin              #{4D9F708F-E289-47A7-B806-F0000EBDF859}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class PerfSysEnumeratorTest extends SysTestCase
        #{
        #    #define.loopCount(5000)
        #}
      ENDSOURCE
      SOURCE #testEnumerator
        #public void testEnumerator()
        #{
        #    int dummy;
        #    SysEnumerator se = SysSequenceInt::construct(1, #loopCount).getEnumerator();
        #
        #    while(se.moveNext())
        #    {
        #        dummy = se.current();
        #    }
        #}
      ENDSOURCE
      SOURCE #testEnumeratorDriver
        #public void testEnumeratorDriver()
        #{
        #    int dummy;
        #    SysEnumerator_Int se = SysEnumerator_Int::construct(SysSequenceInt::construct(1, #loopCount));
        #
        #    while(se.moveNext())
        #    {
        #        dummy = se.current();
        #    }
        #}
      ENDSOURCE
      SOURCE #testFor
        #public void testFor()
        #{
        #    int dummy;
        #    int i;
        #
        #    for(i=1; i<=#loopCount; i++)
        #    {
        #        dummy = i;
        #    }
        #}
      ENDSOURCE
      SOURCE #testWhile
        #public void testWhile()
        #{
        #    int dummy;
        #    int i = 1;
        #
        #    while(i<=#loopCount)
        #    {
        #        dummy = i;
        #        i++;
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : mazzyEnumerators unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #mazzyEnumerators
  SHARED
  PROPERTIES
    Name                #mazzyEnumerators
    Origin              #{60FA1018-1C5C-4B2C-A0DC-D317FD91242B}
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Examples
      PROPERTIES
        Name                #Examples
        ProjectGroupType    #Jobs
        GroupMask           #<SysEnumerator
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #SysEnumeratorExample01_Int
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #SysEnumeratorExample02_Date
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #SysEnumeratorExample03_Container
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #SysEnumeratorExample04_Enum
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #SysEnumeratorExample05_Fields
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #SysEnumeratorExample06_File
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #SysEnumeratorExample07_Group
      ENDNODE
      ENDGROUP
      
    GROUP #Extra
      PROPERTIES
        Name                #Extra
        ProjectGroupType    #All
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 40
        UTILOBJECTID 101331
        NODETYPE 209
        NAME #SysEnumeratorPosition
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 982
        NODETYPE 329
        NAME #SysDictEnum
      ENDNODE
      ENDGROUP
      
    GROUP #Interfaces
      PROPERTIES
        Name                #Interfaces
        ProjectGroupType    #All
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024363
        NODETYPE 329
        NAME #ISysSequence
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024362
        NODETYPE 329
        NAME #ISysEnumerator
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024360
        NODETYPE 329
        NAME #xSysEnumerator
      ENDNODE
      ENDGROUP
      
    GROUP #SysSequences
      PROPERTIES
        Name                #SysSequences
        ProjectGroupType    #Classes
        GroupMask           #<SysSequence
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024364
        NODETYPE 329
        NAME #SysSequenceAmount
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024365
        NODETYPE 329
        NAME #SysSequenceAmountTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024366
        NODETYPE 329
        NAME #SysSequenceAnytype
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024367
        NODETYPE 329
        NAME #SysSequenceAnytypeTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024368
        NODETYPE 329
        NAME #SysSequenceDate
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024369
        NODETYPE 329
        NAME #SysSequenceDateTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024370
        NODETYPE 329
        NAME #SysSequenceInt
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024371
        NODETYPE 329
        NAME #SysSequenceInt64
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024372
        NODETYPE 329
        NAME #SysSequenceInt64Test
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024373
        NODETYPE 329
        NAME #SysSequenceIntTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024374
        NODETYPE 329
        NAME #SysSequenceReal
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024375
        NODETYPE 329
        NAME #SysSequenceRealTest
      ENDNODE
      ENDGROUP
      
    GROUP #SysEnumerators
      PROPERTIES
        Name                #SysEnumerators
        ProjectGroupType    #Classes
        GroupMask           #<SysEnumerator
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024223
        NODETYPE 329
        NAME #SysEnumerator
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024224
        NODETYPE 329
        NAME #SysEnumerator_Array
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024225
        NODETYPE 329
        NAME #SysEnumerator_ArrayTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024226
        NODETYPE 329
        NAME #SysEnumerator_AsciiIo
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024227
        NODETYPE 329
        NAME #SysEnumerator_BinaryIo
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024228
        NODETYPE 329
        NAME #SysEnumerator_Comma7Io
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024229
        NODETYPE 329
        NAME #SysEnumerator_CommaIo
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024230
        NODETYPE 329
        NAME #SysEnumerator_CommaTextIo
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024231
        NODETYPE 329
        NAME #SysEnumerator_ConfigurationKeySet
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024232
        NODETYPE 329
        NAME #SysEnumerator_Container
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024233
        NODETYPE 329
        NAME #SysEnumerator_ContainerClass
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024234
        NODETYPE 329
        NAME #SysEnumerator_ContainerClassTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024235
        NODETYPE 329
        NAME #SysEnumerator_ContainerTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024236
        NODETYPE 329
        NAME #SysEnumerator_Counter
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024237
        NODETYPE 329
        NAME #SysEnumerator_Counter64
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024238
        NODETYPE 329
        NAME #SysEnumerator_DataSourceMarked
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024239
        NODETYPE 329
        NAME #SysEnumerator_DictClass
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024240
        NODETYPE 329
        NAME #SysEnumerator_DictClass_Implements
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024241
        NODETYPE 329
        NAME #SysEnumerator_DictClass_ObjectMethod
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024242
        NODETYPE 329
        NAME #SysEnumerator_DictClass_StaticMethod
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024243
        NODETYPE 329
        NAME #SysEnumerator_DictFieldGroup
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024244
        NODETYPE 329
        NAME #SysEnumerator_DictIndex
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024245
        NODETYPE 329
        NAME #SysEnumerator_Dictionary
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024246
        NODETYPE 329
        NAME #SysEnumerator_Dictionary_Class
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024247
        NODETYPE 329
        NAME #SysEnumerator_Dictionary_ConfigKey
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024248
        NODETYPE 329
        NAME #SysEnumerator_Dictionary_Enum
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024249
        NODETYPE 329
        NAME #SysEnumerator_Dictionary_LicenseCode
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024250
        NODETYPE 329
        NAME #SysEnumerator_Dictionary_SecurityKey
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024251
        NODETYPE 329
        NAME #SysEnumerator_Dictionary_Table
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024252
        NODETYPE 329
        NAME #SysEnumerator_Dictionary_Type
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024253
        NODETYPE 329
        NAME #SysEnumerator_DictMethod
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024254
        NODETYPE 329
        NAME #SysEnumerator_DictMethod_Parameter
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024255
        NODETYPE 329
        NAME #SysEnumerator_DictMethod_Var
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024256
        NODETYPE 329
        NAME #SysEnumerator_DictRelation
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024257
        NODETYPE 329
        NAME #SysEnumerator_DictTable
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024258
        NODETYPE 329
        NAME #SysEnumerator_DictTable_DeleteAction
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024259
        NODETYPE 329
        NAME #SysEnumerator_DictTable_Field
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024260
        NODETYPE 329
        NAME #SysEnumerator_DictTable_FieldGroup
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024261
        NODETYPE 329
        NAME #SysEnumerator_DictTable_Index
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024262
        NODETYPE 329
        NAME #SysEnumerator_DictTable_ObjectMethod
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024263
        NODETYPE 329
        NAME #SysEnumerator_DictTable_Relation
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024264
        NODETYPE 329
        NAME #SysEnumerator_DictTable_StaticMethod
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024265
        NODETYPE 329
        NAME #SysEnumerator_DictView_Datasource
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024266
        NODETYPE 329
        NAME #SysEnumerator_Empty
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024267
        NODETYPE 329
        NAME #SysEnumerator_EmptyTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024268
        NODETYPE 329
        NAME #SysEnumerator_Enum
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024269
        NODETYPE 329
        NAME #SysEnumerator_EnumTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024270
        NODETYPE 329
        NAME #SysEnumerator_FillSet
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024271
        NODETYPE 329
        NAME #SysEnumerator_FillSetFromCurrent
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024272
        NODETYPE 329
        NAME #SysEnumerator_FillSetFromKey
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024273
        NODETYPE 329
        NAME #SysEnumerator_FillSetFromValue
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024274
        NODETYPE 329
        NAME #SysEnumerator_First
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024275
        NODETYPE 329
        NAME #SysEnumerator_FirstTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024276
        NODETYPE 329
        NAME #SysEnumerator_Indexed
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024277
        NODETYPE 329
        NAME #SysEnumerator_Indexed64
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024278
        NODETYPE 329
        NAME #SysEnumerator_Int
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024279
        NODETYPE 329
        NAME #SysEnumerator_Int64
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024280
        NODETYPE 329
        NAME #SysEnumerator_Int64Test
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024281
        NODETYPE 329
        NAME #SysEnumerator_IntTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024282
        NODETYPE 329
        NAME #SysEnumerator_Io
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024361
        NODETYPE 329
        NAME #SysEnumerator_IoBase
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024283
        NODETYPE 329
        NAME #SysEnumerator_Keywords
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024284
        NODETYPE 329
        NAME #SysEnumerator_Keywords_Function
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024285
        NODETYPE 329
        NAME #SysEnumerator_Keywords_FunctionTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024286
        NODETYPE 329
        NAME #SysEnumerator_Keywords_Symbol
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024287
        NODETYPE 329
        NAME #SysEnumerator_Keywords_SymbolTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024288
        NODETYPE 329
        NAME #SysEnumerator_LastAotSelection
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024289
        NODETYPE 329
        NAME #SysEnumerator_List
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024290
        NODETYPE 329
        NAME #SysEnumerator_ListTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024291
        NODETYPE 329
        NAME #SysEnumerator_Map
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024292
        NODETYPE 329
        NAME #SysEnumerator_MapTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024293
        NODETYPE 329
        NAME #SysEnumerator_QueryDatasource
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024294
        NODETYPE 329
        NAME #SysEnumerator_QueryRun
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024295
        NODETYPE 329
        NAME #SysEnumerator_QueryRunTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024296
        NODETYPE 329
        NAME #SysEnumerator_Record
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024297
        NODETYPE 329
        NAME #SysEnumerator_RecordLinkList
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024298
        NODETYPE 329
        NAME #SysEnumerator_RecordSortedList
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024299
        NODETYPE 329
        NAME #SysEnumerator_RecordTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024300
        NODETYPE 329
        NAME #SysEnumerator_RunBaseProgress
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024301
        NODETYPE 329
        NAME #SysEnumerator_RunBaseProgressTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024302
        NODETYPE 329
        NAME #SysEnumerator_SecurityKeySet
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024303
        NODETYPE 329
        NAME #SysEnumerator_Sequence
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024304
        NODETYPE 329
        NAME #SysEnumerator_SequenceTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024305
        NODETYPE 329
        NAME #SysEnumerator_Set
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024306
        NODETYPE 329
        NAME #SysEnumerator_SetTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024307
        NODETYPE 329
        NAME #SysEnumerator_Sleep
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024308
        NODETYPE 329
        NAME #SysEnumerator_Struct
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024309
        NODETYPE 329
        NAME #SysEnumerator_StructTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024310
        NODETYPE 329
        NAME #SysEnumerator_SysOperationProgress
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024311
        NODETYPE 329
        NAME #SysEnumerator_SystemCollection
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024312
        NODETYPE 329
        NAME #SysEnumerator_SystemCollectionTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024313
        NODETYPE 329
        NAME #SysEnumerator_TextBuffer
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024314
        NODETYPE 329
        NAME #SysEnumerator_TextBuffer_Line
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024315
        NODETYPE 329
        NAME #SysEnumerator_TextBuffer_LineTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024316
        NODETYPE 329
        NAME #SysEnumerator_TextBuffer_Split
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024317
        NODETYPE 329
        NAME #SysEnumerator_TextBuffer_SplitTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024318
        NODETYPE 329
        NAME #SysEnumerator_TextBufferTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024319
        NODETYPE 329
        NAME #SysEnumerator_TextIo
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024320
        NODETYPE 329
        NAME #SysEnumerator_TreeNodeChildren
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024321
        NODETYPE 329
        NAME #SysEnumerator_TreeNodeChildrenTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024322
        NODETYPE 329
        NAME #SysEnumerator_TreeNodeSibling
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024323
        NODETYPE 329
        NAME #SysEnumerator_TreeNodeSiblingTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024324
        NODETYPE 329
        NAME #SysEnumerator_XmlAttributeArray
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024325
        NODETYPE 329
        NAME #SysEnumerator_XmlChildren
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024326
        NODETYPE 329
        NAME #SysEnumerator_XmlChildrenTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024327
        NODETYPE 329
        NAME #SysEnumerator_XmlNodeList
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024328
        NODETYPE 329
        NAME #SysEnumerator_XmlNodeListIndex
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024329
        NODETYPE 329
        NAME #SysEnumerator_XmlNodeListIndexTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024330
        NODETYPE 329
        NAME #SysEnumerator_XmlNodeListTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024331
        NODETYPE 329
        NAME #SysEnumerator_XmlSibling
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024332
        NODETYPE 329
        NAME #SysEnumerator_XmlSiblingTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024333
        NODETYPE 329
        NAME #SysEnumeratorGroup
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024334
        NODETYPE 329
        NAME #SysEnumeratorGroupTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024335
        NODETYPE 329
        NAME #SysEnumeratorTest
      ENDNODE
      ENDGROUP
      
    GROUP #PerfSysEnumerators
      PROPERTIES
        Name                #PerfSysEnumerators
        ProjectGroupType    #Classes
        GroupMask           #<PerfSysEnumerator
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024221
        NODETYPE 329
        NAME #PerfSysEnumerator_XmlTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024222
        NODETYPE 329
        NAME #PerfSysEnumeratorTest
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: CLS

; Microsoft Dynamics AX Class: PerfSysEnumerator_XmlTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #PerfSysEnumerator_XmlTest
    PROPERTIES
      Name                #PerfSysEnumerator_XmlTest
      Extends             #SysTestCase
      Origin              #{FF93CB7D-6062-453B-A0E2-633E28DA1BE2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class PerfSysEnumerator_XmlTest extends SysTestCase
        #{
        #    #define.loopCount(1000)
        #}
      ENDSOURCE
      SOURCE #testXml
        #public void testXml()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeList se;
        #    int64 zero64;
        #
        #    SysEnumerator loop = SysEnumerator::newFromToInt(1, #loopCount);
        #    while(loop.moveNext())
        #    {
        #        se = SysEnumerator_XmlNodeList::construct(xmlDoc.selectNodes('root/element[1]/sub'));
        #        this.assertNotNull(se);
        #        this.assertEquals(zero64 + 4, se.estimatedIterations());
        #        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.1', se.current().text());
        #        this.assertEquals(0, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.2', se.current().text());
        #        this.assertEquals(1, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.3', se.current().text());
        #        this.assertEquals(2, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.4', se.current().text());
        #        this.assertEquals(3, se.currentKey());
        #
        #        this.assertFalse(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #        this.assertEquals(zero64 + 4, se.estimatedIterations());
        #    }
        #}
      ENDSOURCE
      SOURCE #testXmlIndex
        #public void testXmlIndex()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeListIndex se;
        #    int64 zero64;
        #
        #    SysEnumerator loop = SysEnumerator::newFromToInt(1, #loopCount);
        #    while(loop.moveNext())
        #    {
        #        se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.selectNodes('root/element[1]/sub'));
        #        this.assertNotNull(se);
        #        this.assertEquals(zero64 + 4, se.estimatedIterations());
        #        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.1', se.current().text());
        #        this.assertEquals(0, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.2', se.current().text());
        #        this.assertEquals(1, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.3', se.current().text());
        #        this.assertEquals(2, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.4', se.current().text());
        #        this.assertEquals(3, se.currentKey());
        #
        #        this.assertFalse(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #        this.assertEquals(zero64 + 4, se.estimatedIterations());
        #    }
        #}
      ENDSOURCE
      SOURCE #testXmlSibling
        #public void testXmlSibling()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlSibling se;
        #    int64 zero64;
        #
        #    SysEnumerator loop = SysEnumerator::newFromToInt(1, #loopCount);
        #    while(loop.moveNext())
        #    {
        #        se = SysEnumerator_XmlSibling::construct(xmlDoc.root().firstChild().firstChild());
        #        this.assertNotNull(se);
        #        this.assertEquals(int64Max(), se.estimatedIterations());
        #        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.1', se.current().text());
        #        this.assertEquals(0, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.2', se.current().text());
        #        this.assertEquals(1, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.3', se.current().text());
        #        this.assertEquals(2, se.currentKey());
        #
        #        this.assertTrue(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #        this.assertEquals('1.4', se.current().text());
        #        this.assertEquals(3, se.currentKey());
        #
        #        this.assertFalse(se.moveNext());
        #        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #        this.assertEquals(int64Max(), se.estimatedIterations());
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: PerfSysEnumeratorTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #PerfSysEnumeratorTest
    PROPERTIES
      Name                #PerfSysEnumeratorTest
      Extends             #SysTestCase
      Origin              #{4D9F708F-E289-47A7-B806-F0000EBDF859}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class PerfSysEnumeratorTest extends SysTestCase
        #{
        #    #define.loopCount(5000)
        #}
      ENDSOURCE
      SOURCE #testEnumerator
        #public void testEnumerator()
        #{
        #    int dummy;
        #    SysEnumerator se = SysSequenceInt::construct(1, #loopCount).getEnumerator();
        #
        #    while(se.moveNext())
        #    {
        #        dummy = se.current();
        #    }
        #}
      ENDSOURCE
      SOURCE #testEnumeratorDriver
        #public void testEnumeratorDriver()
        #{
        #    int dummy;
        #    SysEnumerator_Int se = SysEnumerator_Int::construct(SysSequenceInt::construct(1, #loopCount));
        #
        #    while(se.moveNext())
        #    {
        #        dummy = se.current();
        #    }
        #}
      ENDSOURCE
      SOURCE #testFor
        #public void testFor()
        #{
        #    int dummy;
        #    int i;
        #
        #    for(i=1; i<=#loopCount; i++)
        #    {
        #        dummy = i;
        #    }
        #}
      ENDSOURCE
      SOURCE #testWhile
        #public void testWhile()
        #{
        #    int dummy;
        #    int i = 1;
        #
        #    while(i<=#loopCount)
        #    {
        #        dummy = i;
        #        i++;
        #    }
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : mazzyEnumeratorsPerfTest unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #mazzyEnumeratorsPerfTest
  SHARED
  PROPERTIES
    Name                #mazzyEnumeratorsPerfTest
    Origin              #{E7C25779-2FD2-4147-A932-8199CCEC6701}
  ENDPROPERTIES
  
    PROJECTCLASS SysTestProject
    GROUP #PerfSysEnumerators
      PROPERTIES
        Name                #PerfSysEnumerators
        ProjectGroupType    #Classes
        GroupMask           #<PerfSysEnumerator.*Test>
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024221
        NODETYPE 329
        NAME #PerfSysEnumerator_XmlTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024222
        NODETYPE 329
        NAME #PerfSysEnumeratorTest
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceAmountTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceAmountTest
    PROPERTIES
      Name                #SysSequenceAmountTest
      Extends             #SysTestCase
      Origin              #{E4A1DE2F-280F-42AC-99B1-43727065F10A}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceAmountTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysSequenceAmount range = SysSequenceAmount::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(1, range.start());
        #    this.assertEquals(RealMax(), range.end());
        #}
      ENDSOURCE
      SOURCE #test2
        #void test2()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 2.0;
        #    int64 iterations = 2;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 3.0;
        #    int64 iterations = 2;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #    SysSequenceAmount clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount middle = 0.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount middle = 0.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceAmount sequence = SysSequenceAmount::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(1.0, sequence.start());
        #    this.assertEquals(RealMax(), sequence.end());
        #    this.assertEquals(RealMax() - 1, sequence.distance());
        #    this.assertEquals(1.0, sequence.step());
        #
        #    this.assertEquals(RealMax(), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysSequenceAmount range = SysSequenceAmount::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(RealMax() - 1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceAmount range = SysSequenceAmount::construct(RealMax(), RealMin());
        #
        #    this.assertNotNull(range);
        #
        #    //this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceAmount range = SysSequenceAmount::construct(RealMin(), RealMax());
        #
        #    this.assertNotNull(range);
        #
        #    //this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    Amount start = 5.0;
        #    Amount end = 2.0;
        #    Amount step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #    SysSequenceAmount middleRange = SysSequenceAmount::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #    SysSequenceAmount middleRange = SysSequenceAmount::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMaxMin1
        #void testMaxMin1()
        #{
        #    Amount start = RealMax();
        #    Amount end = RealMin();
        #    Amount step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin2
        #void testMaxMin2()
        #{
        #    Amount start = RealMax();
        #    Amount end = RealMin();
        #    Amount step = 2.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin3
        #void testMaxMin3()
        #{
        #    Amount start = RealMax();
        #    Amount end = RealMin();
        #    Amount step = 3.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    Amount start = RealMin();
        #    Amount end = RealMax();
        #    Amount step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    Amount start = RealMin();
        #    Amount end = RealMax();
        #    Amount step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    Amount start = RealMin();
        #    Amount end = RealMax();
        #    Amount step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    Amount start = -1;
        #    Amount end = RealMax();
        #    Amount step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    Amount start = -1;
        #    Amount end = RealMax();
        #    Amount step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    Amount start = -1;
        #    Amount end = RealMax();
        #    Amount step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    //this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative2
        #void testNegative2()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 2.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount middle = 3.0;
        #
        #    SysSequenceAmount range = SysSequenceAmount::construct(start, end);
        #    SysSequenceAmount reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse2
        #void testReverse2()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 2.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    Amount start = -5.0;
        #    Amount end = 2.0;
        #    Amount step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Amount start = 2.0;
        #    Amount end = 5.0;
        #    Amount step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceAnytypeTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceAnytypeTest
    PROPERTIES
      Name                #SysSequenceAnytypeTest
      Extends             #SysTestCase
      Origin              #{5333683D-8CEF-46F0-A106-80B4E40D897D}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceAnytypeTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #    int64 iterations = 4;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 3;
        #    int64 iterations = 2;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #    SysSequenceAnytype clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int middle = 0;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int middle = 0;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(maxint(), minint());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(minint(), maxint());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #    SysSequenceAnytype middleRange = SysSequenceAnytype::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #    SysSequenceAnytype middleRange = SysSequenceAnytype::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative2
        #void testNegative2()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 2;
        #    int64 iterations = 4;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceAnytype range = SysSequenceAnytype::construct(start, end);
        #    SysSequenceAnytype reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(0-range.distance(), 0+reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceDateTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceDateTest
    PROPERTIES
      Name                #SysSequenceDateTest
      Extends             #SysTestCase
      Origin              #{E071DFDD-5D8E-476C-B284-93950BFDA1AB}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceDateTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysSequenceDate range = SysSequenceDate::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(DateNull(), range.start());
        #    this.assertEquals(DateMax(), range.end());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 3;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 9;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #    SysSequenceDate clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\01\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\01\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceDate sequence = SysSequenceDate::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(DateNull(), sequence.start());
        #    this.assertEquals(DateMax(), sequence.end());
        #    this.assertEquals(any2int(DateMax() - DateNull()), sequence.distance());
        #    this.assertEquals(1, sequence.step());
        #
        #    this.assertEquals(any2int64(DateMax() - DateNull() + 1), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysSequenceDate range = SysSequenceDate::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(93136, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\01\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceDate range = SysSequenceDate::construct(DateMax(), DateNull());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(-93136, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceDate range = SysSequenceDate::construct(DateNull(), DateMax());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(93136, range.distance());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    Date start = 31\12\2017;
        #    Date end = 20\012\2017;
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #    SysSequenceDate middleRange = SysSequenceDate::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #    SysSequenceDate middleRange = SysSequenceDate::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMaxMin1
        #void testMaxMin1()
        #{
        #    Date start = DateMax();
        #    Date end = DateNull();
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin2
        #void testMaxMin2()
        #{
        #    Date start = DateMax();
        #    Date end = DateNull();
        #    int step = 2;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin3
        #void testMaxMin3()
        #{
        #    Date start = DateMax();
        #    Date end = DateNull();
        #    int step = 3;
        #    int64 iterations = 0;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    Date start = DateNull();
        #    Date end = DateMax();
        #    int step = 1;
        #    int64 iterations = 93137;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    Date start = DateNull();
        #    Date end = DateMax();
        #    int step = 2;
        #    int64 iterations = 46569;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    Date start = DateNull();
        #    Date end = DateMax();
        #    int step = 3;
        #    int64 iterations = 31046;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    Date middle = 01\03\2017;
        #
        #    SysSequenceDate range = SysSequenceDate::construct(start, end);
        #    SysSequenceDate reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 3;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 9;
        #
        #    Date current;
        #    int64 iterations;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    current = start;
        #    while( current <= end )
        #    {
        #        current = current + step;
        #        ++iterations;
        #    }
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Date start = 20\01\2017;
        #    Date end = 31\12\2017;
        #    int step = 1;
        #
        #    SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceInt64Test unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceInt64Test
    PROPERTIES
      Name                #SysSequenceInt64Test
      Extends             #SysTestCase
      Origin              #{531E11AE-41DF-4F9B-9596-9D3F73F5C06D}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceInt64Test extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #    int64 iterations = 4;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysSequenceInt64 range = SysSequenceInt64::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(zero64 + 1, range.start());
        #    this.assertEquals(int64Max(), range.end());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 3;
        #    int64 iterations = 2;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #    SysSequenceInt64 clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Int64 start = 5;
        #    Int64 end = 2;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    Int64 start = -5;
        #    Int64 end = 2;
        #    Int64 middle = 0;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Int64 start = 5;
        #    Int64 end = 2;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    Int64 start = -5;
        #    Int64 end = 2;
        #    Int64 middle = 0;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(any2int64(1), sequence.start());
        #    this.assertEquals(int64Max(), sequence.end());
        #    this.assertEquals(int64Max()-1, sequence.distance());
        #    this.assertEquals(any2int64(1), sequence.step());
        #
        #    this.assertEquals(int64Max(), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysSequenceInt64 range = SysSequenceInt64::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(int64Max()-1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Int64 start = 5;
        #    Int64 end = 2;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceInt64 range = SysSequenceInt64::construct(int64Max(), int64Min());
        #    int64 zero64;
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(zero64 + 1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceInt64 range = SysSequenceInt64::construct(int64Min(), int64Max());
        #    int64 zero64;
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(zero64 -1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    int64 start = 5;
        #    int64 end = 2;
        #    int64 step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #    SysSequenceInt64 middleRange = SysSequenceInt64::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #    SysSequenceInt64 middleRange = SysSequenceInt64::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    int64 start = int64Min();
        #    int64 end = int64Max();
        #    int64 step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    int64 start = int64Min();
        #    int64 end = int64Max();
        #    int64 step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    int64 start = int64Min();
        #    int64 end = int64Max();
        #    int64 step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    int64 start = -1;
        #    int64 end = int64Max();
        #    int64 step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    int64 start = -1;
        #    int64 end = int64Max();
        #    int64 step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    int64 start = -1;
        #    int64 end = int64Max();
        #    int64 step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Int64 start = 2;
        #    Int64 end = 5;
        #    Int64 middle = 3;
        #
        #    SysSequenceInt64 range = SysSequenceInt64::construct(start, end);
        #    SysSequenceInt64 reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    int64 start = -5;
        #    int64 end = 2;
        #    int64 step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    int64 start = 2;
        #    int64 end = 5;
        #    int64 step = 1;
        #
        #    SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceIntTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceIntTest
    PROPERTIES
      Name                #SysSequenceIntTest
      Extends             #SysTestCase
      Origin              #{C2D731CA-EDEC-4052-A6CD-EF41F6042046}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceIntTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #    int64 iterations = 4;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysSequenceInt range = SysSequenceInt::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(1, range.start());
        #    this.assertEquals(maxint(), range.end());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 3;
        #    int64 iterations = 2;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #    SysSequenceInt clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int middle = 0;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int middle = 0;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(1, sequence.start());
        #    this.assertEquals(maxint(), sequence.end());
        #    this.assertEquals(maxint()-1, sequence.distance());
        #    this.assertEquals(1, sequence.step());
        #
        #    this.assertEquals(any2int64(maxint()), sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysSequenceInt range = SysSequenceInt::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(maxint()-1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceInt range = SysSequenceInt::construct(maxint(), minint());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceInt range = SysSequenceInt::construct(minint(), maxint());
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    int start = 5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 0;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #    SysSequenceInt middleRange = SysSequenceInt::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #    SysSequenceInt middleRange = SysSequenceInt::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    int start = minint();
        #    int end = maxint();
        #    int step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 1;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 2;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    int start = -1;
        #    int end = maxint();
        #    int step = 3;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative2
        #void testNegative2()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 2;
        #    int64 iterations = 4;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int middle = 3;
        #
        #    SysSequenceInt range = SysSequenceInt::construct(start, end);
        #    SysSequenceInt reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 1;
        #    int64 iterations = 8;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 3;
        #    int64 iterations = 3;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    int start = -5;
        #    int end = 2;
        #    int step = 9;
        #    int64 iterations = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    int start = 2;
        #    int end = 5;
        #    int step = 1;
        #
        #    SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysSequenceRealTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysSequenceRealTest
    PROPERTIES
      Name                #SysSequenceRealTest
      Extends             #SysTestCase
      Origin              #{F03EF8BF-A7F3-4F2F-BA01-9A35EC20D5C7}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysSequenceRealTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #test1st
        #void test1st()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test1stDefault
        #void test1stDefault()
        #{
        #    SysSequenceReal range = SysSequenceReal::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(1, range.start());
        #    this.assertEquals(RealMax(), range.end());
        #}
      ENDSOURCE
      SOURCE #test3
        #void test3()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 3.0;
        #    int64 iterations = 2;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #test9
        #void test9()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testClone
        #void testClone()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #    SysSequenceReal clone = range.clone();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(clone);
        #
        #    this.assertEquals(range.start(), clone.start());
        #    this.assertEquals(range.end(), clone.end());
        #    this.assertEquals(range.distance(), clone.distance());
        #    this.assertEquals(range.reversed(), clone.reversed());
        #}
      ENDSOURCE
      SOURCE #testContains
        #void testContains()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsEmpty
        #void testContainsEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.contains(start));
        #    this.assertFalse(range.contains(end));
        #    this.assertFalse(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testContainsZero
        #void testContainsZero()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real middle = 0.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.contains(start));
        #    this.assertTrue(range.contains(end));
        #    this.assertTrue(range.contains(middle));
        #    this.assertFalse(range.contains(start - 1));
        #    this.assertFalse(range.contains(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCover
        #void testCover()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverEmpty
        #void testCoverEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertFalse(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testCoverZero
        #void testCoverZero()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real middle = 0.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertFalse(range.cover(start));
        #    this.assertFalse(range.cover(end));
        #    this.assertTrue(range.cover(middle));
        #    this.assertFalse(range.cover(start - 1));
        #    this.assertFalse(range.cover(end + 1));
        #}
      ENDSOURCE
      SOURCE #testDefault
        #void testDefault()
        #{
        #    SysSequenceReal sequence = SysSequenceReal::construct();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(1.0, sequence.start());
        #    this.assertEquals(RealMax(), sequence.end());
        #    //this.assertEquals(RealMax(), sequence.distance());
        #    this.assertEquals(1.0, sequence.step());
        #
        #    //this.assertEquals(int64Max()-1, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testDistance
        #void testDistance()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceDefault
        #void testDistanceDefault()
        #{
        #    SysSequenceReal range = SysSequenceReal::construct();
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(RealMax()-1, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceEmpty
        #void testDistanceEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertEquals(end - start, range.distance());
        #}
      ENDSOURCE
      SOURCE #testDistanceMaxMin
        #void testDistanceMaxMin()
        #{
        #    SysSequenceReal range = SysSequenceReal::construct(RealMax(), RealMin());
        #
        #    this.assertNotNull(range);
        #
        #    //this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testDistanceMinMax
        #void testDistanceMinMax()
        #{
        #    SysSequenceReal range = SysSequenceReal::construct(RealMin(), RealMax());
        #
        #    this.assertNotNull(range);
        #
        #    //this.assertEquals(0.00, round(range.distance(),4));
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #void testEmpty()
        #{
        #    Real start = 5.0;
        #    Real end = 2.0;
        #    Real step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEqual
        #void testEqual()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #    SysSequenceReal middleRange = SysSequenceReal::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.equal(range));
        #    this.assertTrue(range.equal(range.clone()));
        #    this.assertTrue(range.equal(range.reverse().reverse()));
        #    this.assertFalse(range.equal(middleRange));
        #    this.assertFalse(range.equal(null));
        #}
      ENDSOURCE
      SOURCE #testGetEnumerator
        #void testGetEnumerator()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #    SysEnumerator se = sequence.getEnumerator();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #}
      ENDSOURCE
      SOURCE #testGetNext
        #void testGetNext()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertEquals(start + step, sequence.getNext(start));
        #    this.assertEquals(end + step, sequence.getNext(end));
        #}
      ENDSOURCE
      SOURCE #testIn
        #void testIn()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #    SysSequenceReal middleRange = SysSequenceReal::construct(middle, end);
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(middleRange);
        #
        #    this.assertTrue(range.in(range));
        #    this.assertTrue(middleRange.in(range));
        #    this.assertFalse(range.in(middleRange));
        #    this.assertFalse(range.in(null));
        #}
      ENDSOURCE
      SOURCE #testIsBoundary
        #void testIsBoundary()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #
        #    this.assertNotNull(range);
        #
        #    this.assertTrue(range.isBoundary(start));
        #    this.assertTrue(range.isBoundary(end));
        #    this.assertFalse(range.isBoundary(middle));
        #}
      ENDSOURCE
      SOURCE #testMaxMin1
        #void testMaxMin1()
        #{
        #    Real start = RealMax();
        #    Real end = RealMin();
        #    Real step = 1.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin2
        #void testMaxMin2()
        #{
        #    Real start = RealMax();
        #    Real end = RealMin();
        #    Real step = 2.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMaxMin3
        #void testMaxMin3()
        #{
        #    Real start = RealMax();
        #    Real end = RealMin();
        #    Real step = 3.0;
        #    int64 iterations = 0;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax1
        #void testMinMax1()
        #{
        #    Real start = RealMin();
        #    Real end = RealMax();
        #    Real step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax2
        #void testMinMax2()
        #{
        #    Real start = RealMin();
        #    Real end = RealMax();
        #    Real step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinMax3
        #void testMinMax3()
        #{
        #    Real start = RealMin();
        #    Real end = RealMax();
        #    Real step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax1
        #void testMinusMax1()
        #{
        #    Real start = -1;
        #    Real end = RealMax();
        #    Real step = 1.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax2
        #void testMinusMax2()
        #{
        #    Real start = -1;
        #    Real end = RealMax();
        #    Real step = 2.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMinusMax3
        #void testMinusMax3()
        #{
        #    Real start = -1;
        #    Real end = RealMax();
        #    Real step = 3.0;
        #    int64 iterations = int64Max();
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    //this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative1
        #void testNegative1()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative3
        #void testNegative3()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNegative9
        #void testNegative9()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(start, sequence.start());
        #    this.assertEquals(end, sequence.end());
        #    this.assertEquals(end - start, sequence.distance());
        #    this.assertEquals(step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse
        #void testReverse()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real middle = 3.0;
        #
        #    SysSequenceReal range = SysSequenceReal::construct(start, end);
        #    SysSequenceReal reverseRange = range.reverse();
        #
        #    this.assertNotNull(range);
        #    this.assertNotNull(reverseRange);
        #
        #    this.assertFalse(range.reversed());
        #    this.assertTrue(reverseRange.reversed());
        #    this.assertEquals(range.start(), reverseRange.end());
        #    this.assertEquals(range.end(), reverseRange.start());
        #    this.assertEquals(-range.distance(), reverseRange.distance());
        #}
      ENDSOURCE
      SOURCE #testReverse1
        #void testReverse1()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 1.0;
        #    int64 iterations = 8;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse3
        #void testReverse3()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 3.0;
        #    int64 iterations = 3;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testReverse9
        #void testReverse9()
        #{
        #    Real start = -5.0;
        #    Real end = 2.0;
        #    Real step = 9.0;
        #    int64 iterations = 1;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step).reverse();
        #
        #    this.assertNotNull(sequence);
        #    this.assertEquals(end, sequence.start());
        #    this.assertEquals(start, sequence.end());
        #    this.assertEquals(start - end, sequence.distance());
        #    this.assertEquals(-step, sequence.step());
        #
        #    this.assertEquals(iterations, sequence.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testToString
        #void testToString()
        #{
        #    Real start = 2.0;
        #    Real end = 5.0;
        #    Real step = 1.0;
        #    int64 iterations = 4;
        #
        #    SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        #
        #    this.assertNotNull(sequence);
        #    //this.assertEquals(strfmt('%3:[%1..%2]', start, end, step), sequence.toString());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ArrayTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ArrayTest
    PROPERTIES
      Name                #SysEnumerator_ArrayTest
      Extends             #SysTestCase
      Origin              #{6CBD5C7D-A3BE-44DD-83A0-83BD133833E4}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ArrayTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testArray
        #public void testArray()
        #{
        #    Array arr = new Array(Types::String);
        #    SysEnumerator_Array se;
        #    int64 zero64;
        #
        #    arr.value(1, 'a');
        #    arr.value(5, 'e');
        #    arr.value(2, 'b');
        #    arr.value(3, 'c');
        #    arr.value(4, 'd');
        #
        #    se = SysEnumerator_Array::construct(arr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testArrayEmpty
        #public void testArrayEmpty()
        #{
        #    Array arr = new Array(Types::String);
        #    SysEnumerator_Array se = SysEnumerator_Array::construct(arr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testArrayNull
        #public void testArrayNull()
        #{
        #    SysEnumerator_Array se = SysEnumerator_Array::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.base());
        #
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testArraySkipUntilEnd
        #public void testArraySkipUntilEnd()
        #{
        #    Array arr = new Array(Types::String);
        #    SysEnumerator_Array se;
        #    int64 zero64;
        #
        #    arr.value(1, 'a');
        #    arr.value(5, 'e');
        #    arr.value(2, 'b');
        #    arr.value(3, 'c');
        #    arr.value(4, 'd');
        #
        #    se = SysEnumerator_Array::construct(arr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertFalse(se.skip(10));
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ContainerClassTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ContainerClassTest
    PROPERTIES
      Name                #SysEnumerator_ContainerClassTest
      Extends             #SysTestCase
      Origin              #{6B620072-71D4-4269-9AD9-BA1156CD80F2}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ContainerClassTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testContainerClass
        #public void testContainerClass()
        #{
        #    container con = ['a','b','c','d','e'];
        #    ContainerClass cc = new ContainerClass(con);
        #    SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::construct(cc);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerEmpty
        #public void testContainerEmpty()
        #{
        #    ContainerClass conClass = new ContainerClass(connull());
        #    SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::construct(conClass);
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.baseClass());
        #    this.assertEquals(connull(), se.base());
        #
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerNull
        #public void testContainerNull()
        #{
        #    SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.baseClass());
        #    this.assertEquals(connull(), se.base());
        #
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerSkip
        #public void testContainerSkip()
        #{
        #    container con = ['a','b','c','d','e'];
        #    SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::newFromContainer(con);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.skip());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.skip(2));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ContainerTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ContainerTest
    PROPERTIES
      Name                #SysEnumerator_ContainerTest
      Extends             #SysTestCase
      Origin              #{6D7935DA-0926-4B5D-8B53-AEC8836E42F7}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ContainerTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testContainer
        #public void testContainer()
        #{
        #    container con = ['a','b','c','d','e'];
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerEmpty
        #public void testContainerEmpty()
        #{
        #    container con = connull();
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testContainerSkip
        #public void testContainerSkip()
        #{
        #    container con = ['a','b','c','d','e'];
        #    SysEnumerator_Container se = SysEnumerator_Container::construct(con);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.skip());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.skip(2));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_EmptyTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_EmptyTest
    PROPERTIES
      Name                #SysEnumerator_EmptyTest
      Extends             #SysTestCase
      Origin              #{5FC6FAE8-FB7E-4FC8-95C5-1F0B64CF53D4}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_EmptyTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    SysEnumerator_Empty se = SysEnumerator_Empty::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_EnumTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_EnumTest
    PROPERTIES
      Name                #SysEnumerator_EnumTest
      Extends             #SysTestCase
      Origin              #{0284603C-07BD-4D2A-82CB-A1A0C576F21C}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_EnumTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testEnum
        #public void testEnum()
        #{
        #    DictEnum dictEnum = new DictEnum(enumnum(ABC));
        #    SysEnumerator_Enum se = SysEnumerator_Enum::construct(dictEnum);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 4, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(0, se.current());
        #    this.assertEquals('None', se.currentKey());
        #    this.assertEquals(0+ABC::None, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals('A', se.currentKey());
        #    this.assertEquals(0+ABC::A, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals('B', se.currentKey());
        #    this.assertEquals(0+ABC::B, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals('C', se.currentKey());
        #    this.assertEquals(0+ABC::C, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 4, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_FirstTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_FirstTest
    PROPERTIES
      Name                #SysEnumerator_FirstTest
      Extends             #SysTestCase
      Origin              #{A224DE43-5E12-4F3B-88AE-24CD095D18AD}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_FirstTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testFirst
        #public void testFirst()
        #{
        #    SysEnumerator_First se = SysEnumerator_First::construct(3);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #    this.assertEquals(3, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(2, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #    this.assertEquals(2, se.currentValue());
        #    this.assertEquals(1, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(3, se.first());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testFirstNegative
        #public void testFirstNegative()
        #{
        #    SysEnumerator_First se = SysEnumerator_First::construct(-2);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(0, se.first());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 0, se.estimatedIterations());
        #
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(0, se.first());
        #}
      ENDSOURCE
      SOURCE #testFirstNull
        #public void testFirstNull()
        #{
        #    SysEnumerator_First se = SysEnumerator_First::construct(0);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(0, se.first());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 0, se.estimatedIterations());
        #
        #    this.assertEquals(0, se.remains());
        #    this.assertEquals(0, se.first());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Int64Test unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Int64Test
    PROPERTIES
      Name                #SysEnumerator_Int64Test
      Extends             #SysTestCase
      Origin              #{EBEF04EC-912E-4D05-810B-E1E27268D4CF}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Int64Test extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testInt64
        #public void testInt64()
        #{
        #    SysEnumerator_Int64 se = SysEnumerator_Int64::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(zero64 + 1, se.current());
        #    this.assertEquals(zero64 + 1, se.currentIdx());
        #    this.assertEquals(zero64 + 1, se.currentKey());
        #    this.assertEquals(zero64 + 1, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(zero64 + 2, se.current());
        #    this.assertEquals(zero64 + 2, se.currentIdx());
        #    this.assertEquals(zero64 + 2, se.currentKey());
        #    this.assertEquals(zero64 + 2, se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_IntTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_IntTest
    PROPERTIES
      Name                #SysEnumerator_IntTest
      Extends             #SysTestCase
      Origin              #{AA7E22E2-F8B6-48FF-BD8B-CF59376084B1}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_IntTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testInt
        #public void testInt()
        #{
        #    SysEnumerator_Int se = SysEnumerator_Int::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + maxint(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #    this.assertEquals(1, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #    this.assertEquals(2, se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Keywords_FunctionTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Keywords_FunctionTest
    PROPERTIES
      Name                #SysEnumerator_Keywords_FunctionTest
      Extends             #SysTestCase
      Origin              #{763AEC7F-60E7-420C-B6B9-11EFDE314766}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Keywords_FunctionTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testKeywordsFunction
        #public void testKeywordsFunction()
        #{
        #    SysEnumerator_Keywords_Function se = SysEnumerator_Keywords_Function::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('abs', se.current());
        #    this.assertEquals('abs', se.currentIdx());
        #    this.assertEquals('abs', se.currentKey());
        #    this.assertEquals('abs', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('acos', se.current());
        #    this.assertEquals('acos', se.currentIdx());
        #    this.assertEquals('acos', se.currentKey());
        #    this.assertEquals('acos', se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_Keywords_SymbolTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_Keywords_SymbolTest
    PROPERTIES
      Name                #SysEnumerator_Keywords_SymbolTest
      Extends             #SysTestCase
      Origin              #{19A5EA04-5718-482B-8260-81221B60A19B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_Keywords_SymbolTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testKeywordsSymbol
        #public void testKeywordsSymbol()
        #{
        #    SysEnumerator_Keywords_Symbol se = SysEnumerator_Keywords_Symbol::construct();
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('abstract', se.current());
        #    this.assertEquals('abstract', se.currentIdx());
        #    this.assertEquals('abstract', se.currentKey());
        #    this.assertEquals('abstract', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('anytype', se.current());
        #    this.assertEquals('anytype', se.currentIdx());
        #    this.assertEquals('anytype', se.currentKey());
        #    this.assertEquals('anytype', se.currentValue());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_ListTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_ListTest
    PROPERTIES
      Name                #SysEnumerator_ListTest
      Extends             #SysTestCase
      Origin              #{34C91D0F-5D63-4E76-AFA7-00F792C0FD7B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_ListTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testList
        #public void testList()
        #{
        #    List l = new List(Types::String);
        #    SysEnumerator_List se;
        #    int64 zero64;
        #
        #    l.addEnd('a');
        #    l.addEnd('b');
        #    l.addEnd('c');
        #    l.addEnd('d');
        #    l.addEnd('e');
        #
        #    se = SysEnumerator_List::construct(l);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentKey());
        #    this.assertEquals('a', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentKey());
        #    this.assertEquals('b', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #    this.assertEquals('c', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentKey());
        #    this.assertEquals('d', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentKey());
        #    this.assertEquals('e', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testListEmpty
        #public void testListEmpty()
        #{
        #    List l = new List(Types::String);
        #    SysEnumerator_List se = SysEnumerator_List::construct(l);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testListNull
        #public void testListNull()
        #{
        #    SysEnumerator_List se = SysEnumerator_List::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_MapTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_MapTest
    PROPERTIES
      Name                #SysEnumerator_MapTest
      Extends             #SysTestCase
      Origin              #{6B6BD89B-0DA3-4824-ADB4-F7A6AA090C33}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_MapTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testMap
        #public void testMap()
        #{
        #    // see also test combined Map + Range
        #
        #    Map m = new Map(Types::Integer,Types::String);
        #    SysEnumerator_Map se;
        #    int64 zero64;
        #
        #    m.insert(10, 'a');
        #    m.insert(50, 'e');
        #    m.insert(20, 'b');
        #    m.insert(30, 'c');
        #    m.insert(40, 'd');
        #
        #    se = SysEnumerator_Map::construct(m);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertNotNull(se);
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(10, se.current());
        #    this.assertEquals(10, se.currentIdx());
        #    this.assertEquals(10, se.currentKey());
        #    this.assertEquals('a', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(20, se.current());
        #    this.assertEquals(20, se.currentIdx());
        #    this.assertEquals(20, se.currentKey());
        #    this.assertEquals('b', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(30, se.current());
        #    this.assertEquals(30, se.currentIdx());
        #    this.assertEquals(30, se.currentKey());
        #    this.assertEquals('c', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(40, se.current());
        #    this.assertEquals(40, se.currentIdx());
        #    this.assertEquals(40, se.currentKey());
        #    this.assertEquals('d', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(50, se.current());
        #    this.assertEquals(50, se.currentIdx());
        #    this.assertEquals(50, se.currentKey());
        #    this.assertEquals('e', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testMapEmpty
        #public void testMapEmpty()
        #{
        #    Map m = new Map(Types::Integer, Types::String);
        #    SysEnumerator_Map se = SysEnumerator_Map::construct(m);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_QueryRunTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_QueryRunTest
    PROPERTIES
      Name                #SysEnumerator_QueryRunTest
      Extends             #SysTestCase
      Origin              #{FA7D8E00-76D9-41F8-B611-B30D32C2B7DB}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_QueryRunTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testQueryRun
        #void testQueryRun()
        #{
        #    UserInfo                userInfo;
        #    Query                   q = new Query();
        #    SysEnumerator_QueryRun  se;
        #;
        #    q.addDataSource(UserInfo.TableId);
        #    se = SysEnumerator_QueryRun::construct(new QueryRun(q));
        #
        #    this.assertNotNull(se);
        #    this.assertNotEqual(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertNotEqual(0, se.current().RecId);
        #}
        #
      ENDSOURCE
      SOURCE #testQueryRunEmpty
        #void testQueryRunEmpty()
        #{
        #    Query q = new Query();
        #    QueryRun qr = new QueryRun(q);
        #    SysEnumerator_QueryRun se = SysEnumerator_QueryRun::construct(qr);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.parmExceptionExpected(true);
        #
        #    se.moveNext();
        #}
        #
      ENDSOURCE
      SOURCE #testQueryRunNull
        #void testQueryRunNull()
        #{
        #    SysEnumerator_QueryRun se = SysEnumerator_QueryRun::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_RecordTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_RecordTest
    PROPERTIES
      Name                #SysEnumerator_RecordTest
      Extends             #SysTestCase
      Origin              #{8BA2FDC2-541F-4ABA-A63C-5DEC1D7C9B16}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_RecordTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testRecord
        #public void testRecord()
        #{
        #    // see also combined Record + value2set
        #
        #    SysUserInfo sysUserInfo = SysUserInfo::find();
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(sysUserInfo);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    while(se.moveNext())
        #    {
        #        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    }
        #
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testRecordEmpty
        #public void testRecordEmpty()
        #{
        #    SysUserInfo sysUserInfo;
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(sysUserInfo);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testRecordNull
        #public void testRecordNull()
        #{
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testRecordReset
        #public void testRecordReset()
        #{
        #    SysUserInfo sysUserInfo = SysUserInfo::find();
        #    SysEnumerator_Record se = SysEnumerator_Record::construct(sysUserInfo);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.parmExceptionExpected(true);
        #
        #    se.reset();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_RunBaseProgressTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_RunBaseProgressTest
    PROPERTIES
      Name                #SysEnumerator_RunBaseProgressTest
      Extends             #SysTestCase
      Origin              #{763CA2FF-02EC-47A5-9545-E18A5A797F79}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_RunBaseProgressTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testEstimatedIterations
        #public void testEstimatedIterations()
        #{
        #    int64 estimated = 123;
        #    SysEnumerator_RunBaseProgress se = SysEnumerator_RunBaseProgress::construct();
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(1, se.estimatedIterations());    // total not defined
        #    this.assertEquals(1, se.estimatedIterations(0));   // total = 0
        #
        #    this.assertEquals(estimated, se.estimatedIterations(estimated));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(estimated, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testRunbase
        #public void testRunbase()
        #{
        #    RunBase runBase = Tutorial_RunbaseBatch::construct();
        #    SysEnumerator_RunBaseProgress se = SysEnumerator_RunBaseProgress::newFromRunBase(runBase);
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.base());
        #
        #    this.assertEquals(runBase.parmProgress(), se.base());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SequenceTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SequenceTest
    PROPERTIES
      Name                #SysEnumerator_SequenceTest
      Extends             #SysTestCase
      Origin              #{33948369-E633-4DF4-8353-62A3926E42B3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SequenceTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testSequence
        #public void testSequence()
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct(1, 5, 2);
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(5, se.current());
        #    this.assertEquals(5, se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSequenceEmpty
        #public void testSequenceEmpty()
        #{
        #    SysSequenceInt sequence = SysSequenceInt::construct(1, 0, 2);
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSequenceNull
        #public void testSequenceNull()
        #{
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSequenceReset
        #public void testSequenceReset()
        #{
        #    SysSequenceInt    sequence = SysSequenceInt::construct(1, 5, 2);
        #    SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    se.reset();
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(1, se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(3, se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(5, se.current());
        #    this.assertEquals(5, se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SetTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SetTest
    PROPERTIES
      Name                #SysEnumerator_SetTest
      Extends             #SysTestCase
      Origin              #{AAB01F52-A107-4DEF-8514-A9462517629D}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SetTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testSet
        #public void testSet()
        #{
        #    Set s = new Set(Types::String);
        #    SysEnumerator_Set se;
        #    int64 zero64;
        #
        #    s.add('a');
        #    s.add('e');
        #    s.add('b');
        #    s.add('c');
        #    s.add('d');
        #
        #    se = SysEnumerator_Set::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSetEmpty
        #public void testSetEmpty()
        #{
        #    Set s = new Set(Types::String);
        #    SysEnumerator_Set se = SysEnumerator_Set::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSetNull
        #public void testSetNull()
        #{
        #    SysEnumerator_Set se = SysEnumerator_Set::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_StructTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_StructTest
    PROPERTIES
      Name                #SysEnumerator_StructTest
      Extends             #SysTestCase
      Origin              #{BC3F344B-3B8D-4D34-8467-898B321BE2DF}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_StructTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testStruct
        #public void testStruct()
        #{
        #    Struct s = new Struct();
        #    SysEnumerator_Struct se;
        #    int64 zero64;
        #
        #    s.add('field1', 'a');
        #    s.add('field5', 'e');
        #    s.add('field2', 'b');
        #    s.add('field3', 'c');
        #    s.add('field4', 'd');
        #
        #    se = SysEnumerator_Struct::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals('field1', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals('field5', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals('field2', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals('field3', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals('field4', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testStructEmpty
        #public void testStructEmpty()
        #{
        #    Struct s = new Struct();
        #    SysEnumerator_Struct se = SysEnumerator_Struct::construct(s);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testStructNull
        #public void testStructNull()
        #{
        #    SysEnumerator_Struct se = SysEnumerator_Struct::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_SystemCollectionTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_SystemCollectionTest
    PROPERTIES
      Name                #SysEnumerator_SystemCollectionTest
      Extends             #SysTestCase
      Origin              #{0AC68C18-C54E-44FC-A794-C342FE7925D3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_SystemCollectionTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testSystemCollection
        #public void testSystemCollection()
        #{
        #    System.Collections.ArrayList array = new System.Collections.ArrayList();
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
        #;
        #    array.Add('a');
        #    array.Add('e');
        #    array.Add('b');
        #    array.Add('c');
        #    array.Add('d');
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.currentIdx());
        #    this.assertEquals('a', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('e', se.current());
        #    this.assertEquals('e', se.currentValue());
        #    this.assertEquals('e', se.currentIdx());
        #    this.assertEquals('e', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('b', se.current());
        #    this.assertEquals('b', se.currentValue());
        #    this.assertEquals('b', se.currentIdx());
        #    this.assertEquals('b', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.currentIdx());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals('d', se.currentIdx());
        #    this.assertEquals('d', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testSystemCollectionReset
        #public void testSystemCollectionReset()
        #{
        #    System.Collections.ArrayList array = new System.Collections.ArrayList();
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
        #;
        #    array.Add('a');
        #    array.Add('e');
        #    array.Add('b');
        #    array.Add('c');
        #    array.Add('d');
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    se.reset();
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.currentIdx());
        #    this.assertEquals('a', se.currentKey());
        #
        #    se.reset();
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('a', se.current());
        #    this.assertEquals('a', se.currentValue());
        #    this.assertEquals('a', se.currentIdx());
        #    this.assertEquals('a', se.currentKey());
        #}
      ENDSOURCE
      SOURCE #testSystemCollectionSkip
        #public void testSystemCollectionSkip()
        #{
        #    System.Collections.ArrayList array = new System.Collections.ArrayList();
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
        #;
        #    array.Add('a');
        #    array.Add('e');
        #    array.Add('b');
        #    array.Add('c');
        #    array.Add('d');
        #
        #    this.assertNotNull(se);
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.skip(3));
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentValue());
        #    this.assertEquals('c', se.current());
        #    this.assertEquals('c', se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentValue());
        #    this.assertEquals('d', se.current());
        #    this.assertEquals('d', se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testSystemNull
        #public void testSystemNull()
        #{
        #    SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(null);
        #;
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.base());
        #
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TextBuffer_LineTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TextBuffer_LineTest
    PROPERTIES
      Name                #SysEnumerator_TextBuffer_LineTest
      Extends             #SysTestCase
      Origin              #{2D321C46-6198-480A-A008-E64E64839B2B}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TextBuffer_LineTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testTextBuffer_1024ok
        #public void testTextBuffer_1024ok()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Line se;
        #    int64 zero64;
        #    str line1 = strrep('-',1024);
        #    str line2 = strrep('=',1024);
        #
        #    text.appendText(line1);
        #    text.appendText('\n');
        #    text.appendText(line2);
        #
        #    se = SysEnumerator_TextBuffer_Line::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 2, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(line1, se.current());
        #    this.assertEquals(line1, se.currentIdx());
        #    this.assertEquals(line1, se.currentKey());
        #    this.assertEquals(line1, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(line2, se.current());
        #    this.assertEquals(line2, se.currentIdx());
        #    this.assertEquals(line2, se.currentKey());
        #    this.assertEquals(line2, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBuffer_1048575ok
        #public void testTextBuffer_1048575ok()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Line se;
        #    int64 zero64;
        #    str line1 = strrep('-',1048574);
        #    str line2 = strrep('=',1048574);
        #
        #    text.appendText(line1);
        #    text.appendText('\n');
        #    text.appendText(line2);
        #
        #    se = SysEnumerator_TextBuffer_Line::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 2, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #}
      ENDSOURCE
      SOURCE #testTextBufferEmpty
        #public void testTextBufferEmpty()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Line se = SysEnumerator_TextBuffer_Line::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferLine
        #public void testTextBufferLine()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Line se;
        #    int64 zero64;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer_Line::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1', se.current());
        #    this.assertEquals('line1', se.currentIdx());
        #    this.assertEquals('line1', se.currentKey());
        #    this.assertEquals('line1', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line2,\t хвост2', se.current());
        #    this.assertEquals('line2,\t хвост2', se.currentIdx());
        #    this.assertEquals('line2,\t хвост2', se.currentKey());
        #    this.assertEquals('line2,\t хвост2', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line3, tail3, and\tmore', se.current());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentIdx());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentKey());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferNull
        #public void testTextBufferNull()
        #{
        #    SysEnumerator_TextBuffer_Line se = SysEnumerator_TextBuffer_Line::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TextBuffer_SplitTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TextBuffer_SplitTest
    PROPERTIES
      Name                #SysEnumerator_TextBuffer_SplitTest
      Extends             #SysTestCase
      Origin              #{F97F0A25-0F3E-4638-92E5-B9C7D9381971}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TextBuffer_SplitTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testTextBufferCommaSeparated
        #public void testTextBufferCommaSeparated()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Split se;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer_Split::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1\nline2', se.current());
        #    this.assertEquals('line1\nline2', se.currentIdx());
        #    this.assertEquals('line1\nline2', se.currentKey());
        #    this.assertEquals('line1\nline2', se.currentValue());
        #
        #    // not ASCII
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('\t хвост2\nline3', se.current());
        #    this.assertEquals('\t хвост2\nline3', se.currentIdx());
        #    this.assertEquals('\t хвост2\nline3', se.currentKey());
        #    this.assertEquals('\t хвост2\nline3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' tail3', se.current());
        #    this.assertEquals(' tail3', se.currentIdx());
        #    this.assertEquals(' tail3', se.currentKey());
        #    this.assertEquals(' tail3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' and\tmore', se.current());
        #    this.assertEquals(' and\tmore', se.currentIdx());
        #    this.assertEquals(' and\tmore', se.currentKey());
        #    this.assertEquals(' and\tmore', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferEmpty
        #public void testTextBufferEmpty()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Split se = SysEnumerator_TextBuffer_Split::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferNull
        #public void testTextBufferNull()
        #{
        #    SysEnumerator_TextBuffer_Split se = SysEnumerator_TextBuffer_Split::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferTabSeparated
        #public void testTextBufferTabSeparated()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer_Split se;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer_Split::newWithTabs(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1\nline2,', se.current());
        #    this.assertEquals('line1\nline2,', se.currentIdx());
        #    this.assertEquals('line1\nline2,', se.currentKey());
        #    this.assertEquals('line1\nline2,', se.currentValue());
        #
        #    // not ASCII
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.current());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentIdx());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentKey());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('more', se.current());
        #    this.assertEquals('more', se.currentIdx());
        #    this.assertEquals('more', se.currentKey());
        #    this.assertEquals('more', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TextBufferTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TextBufferTest
    PROPERTIES
      Name                #SysEnumerator_TextBufferTest
      Extends             #SysTestCase
      Origin              #{38E17173-FA62-40EE-873F-A303B43CFDE3}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TextBufferTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testTextBufferCommaSeparated
        #public void testTextBufferCommaSeparated()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer se;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer::newSplit(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1\nline2', se.current());
        #    this.assertEquals('line1\nline2', se.currentIdx());
        #    this.assertEquals('line1\nline2', se.currentKey());
        #    this.assertEquals('line1\nline2', se.currentValue());
        #
        #    // not ASCII
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('\t хвост2\nline3', se.current());
        #    this.assertEquals('\t хвост2\nline3', se.currentIdx());
        #    this.assertEquals('\t хвост2\nline3', se.currentKey());
        #    this.assertEquals('\t хвост2\nline3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' tail3', se.current());
        #    this.assertEquals(' tail3', se.currentIdx());
        #    this.assertEquals(' tail3', se.currentKey());
        #    this.assertEquals(' tail3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' and\tmore', se.current());
        #    this.assertEquals(' and\tmore', se.currentIdx());
        #    this.assertEquals(' and\tmore', se.currentKey());
        #    this.assertEquals(' and\tmore', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferEmpty
        #public void testTextBufferEmpty()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer se = SysEnumerator_TextBuffer::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferLine
        #public void testTextBufferLine()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer se;
        #    int64 zero64;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer::newLine(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1', se.current());
        #    this.assertEquals('line1', se.currentIdx());
        #    this.assertEquals('line1', se.currentKey());
        #    this.assertEquals('line1', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line2,\t хвост2', se.current());
        #    this.assertEquals('line2,\t хвост2', se.currentIdx());
        #    this.assertEquals('line2,\t хвост2', se.currentKey());
        #    this.assertEquals('line2,\t хвост2', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line3, tail3, and\tmore', se.current());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentIdx());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentKey());
        #    this.assertEquals('line3, tail3, and\tmore', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferNull
        #public void testTextBufferNull()
        #{
        #    SysEnumerator_TextBuffer se = SysEnumerator_TextBuffer::construct(null);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferTabSeparated
        #public void testTextBufferTabSeparated()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer se;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer::newTabs(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1\nline2,', se.current());
        #    this.assertEquals('line1\nline2,', se.currentIdx());
        #    this.assertEquals('line1\nline2,', se.currentKey());
        #    this.assertEquals('line1\nline2,', se.currentValue());
        #
        #    // not ASCII
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.current());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentIdx());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentKey());
        #    this.assertEquals(' хвост2\nline3, tail3, and', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('more', se.current());
        #    this.assertEquals('more', se.currentIdx());
        #    this.assertEquals('more', se.currentKey());
        #    this.assertEquals('more', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testTextBufferWord
        #public void testTextBufferWord()
        #{
        #    TextBuffer text = new TextBuffer();
        #    SysEnumerator_TextBuffer se;
        #
        #    text.appendText(@'line1
        #line2,'+'\t'+@' хвост2
        #line3, tail3, and'+'\tmore');
        #
        #    se = SysEnumerator_TextBuffer::construct(text);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line1', se.current());
        #    this.assertEquals('line1', se.currentIdx());
        #    this.assertEquals('line1', se.currentKey());
        #    this.assertEquals('line1', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line2', se.current());
        #    this.assertEquals('line2', se.currentIdx());
        #    this.assertEquals('line2', se.currentKey());
        #    this.assertEquals('line2', se.currentValue());
        #
        #    // not ASCII
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('хвост2', se.current());
        #    this.assertEquals('хвост2', se.currentIdx());
        #    this.assertEquals('хвост2', se.currentKey());
        #    this.assertEquals('хвост2', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('line3', se.current());
        #    this.assertEquals('line3', se.currentIdx());
        #    this.assertEquals('line3', se.currentKey());
        #    this.assertEquals('line3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('tail3', se.current());
        #    this.assertEquals('tail3', se.currentIdx());
        #    this.assertEquals('tail3', se.currentKey());
        #    this.assertEquals('tail3', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('and', se.current());
        #    this.assertEquals('and', se.currentIdx());
        #    this.assertEquals('and', se.currentKey());
        #    this.assertEquals('and', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('more', se.current());
        #    this.assertEquals('more', se.currentIdx());
        #    this.assertEquals('more', se.currentKey());
        #    this.assertEquals('more', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TreeNodeChildrenTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TreeNodeChildrenTest
    PROPERTIES
      Name                #SysEnumerator_TreeNodeChildrenTest
      Extends             #SysTestCase
      Origin              #{89F2B5D0-5EE6-47EF-B9C0-1A5D6E9AD121}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TreeNodeChildrenTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    SysDictTable sysDictTable = new SysDictTable(tablenum(CustTable));
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(sysDictTable.treeNode());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Fields', se.current().AOTname());
        #    this.assertEquals('Fields', se.currentValue().AOTname());
        #    this.assertEquals('Fields', se.currentIdx().AOTname());
        #    this.assertEquals('Fields', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Field Groups', se.current().AOTname());
        #    this.assertEquals('Field Groups', se.currentValue().AOTname());
        #    this.assertEquals('Field Groups', se.currentIdx().AOTname());
        #    this.assertEquals('Field Groups', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Indexes', se.current().AOTname());
        #    this.assertEquals('Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Full Text Indexes', se.current().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Relations', se.current().AOTname());
        #    this.assertEquals('Relations', se.currentValue().AOTname());
        #    this.assertEquals('Relations', se.currentIdx().AOTname());
        #    this.assertEquals('Relations', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('DeleteActions', se.current().AOTname());
        #    this.assertEquals('DeleteActions', se.currentValue().AOTname());
        #    this.assertEquals('DeleteActions', se.currentIdx().AOTname());
        #    this.assertEquals('DeleteActions', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Methods', se.current().AOTname());
        #    this.assertEquals('Methods', se.currentValue().AOTname());
        #    this.assertEquals('Methods', se.currentIdx().AOTname());
        #    this.assertEquals('Methods', se.currentKey().AOTname());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    SysDictClass sysDictClass = new SysDictClass(classnum(Global));
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(sysDictClass.treeNode().AOTfirstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testFindChildNodes
        #public void testFindChildNodes()
        #{
        #    SysDictTable    sysDictTable = new SysDictTable(tablenum(CustTable));
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(sysDictTable.treeNode(), 'Indexes');
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Indexes', se.current().AOTname());
        #    this.assertEquals('Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Full Text Indexes', se.current().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Relations', se.current().AOTname());
        #    this.assertEquals('Relations', se.currentValue().AOTname());
        #    this.assertEquals('Relations', se.currentIdx().AOTname());
        #    this.assertEquals('Relations', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('DeleteActions', se.current().AOTname());
        #    this.assertEquals('DeleteActions', se.currentValue().AOTname());
        #    this.assertEquals('DeleteActions', se.currentIdx().AOTname());
        #    this.assertEquals('DeleteActions', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Methods', se.current().AOTname());
        #    this.assertEquals('Methods', se.currentValue().AOTname());
        #    this.assertEquals('Methods', se.currentIdx().AOTname());
        #    this.assertEquals('Methods', se.currentKey().AOTname());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testNull
        #public void testNull()
        #{
        #    SysEnumerator_TreeNodeChildren se = SysEnumerator_TreeNodeChildren::construct(null);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(0, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(0, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_TreeNodeSiblingTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_TreeNodeSiblingTest
    PROPERTIES
      Name                #SysEnumerator_TreeNodeSiblingTest
      Extends             #SysTestCase
      Origin              #{EE712241-DE51-4019-B658-48BC52B9884F}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_TreeNodeSiblingTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    SysDictTable    sysDictTable = new SysDictTable(tablenum(CustTable));
        #    SysEnumerator_TreeNodeSibling se = SysEnumerator_TreeNodeSibling::construct(sysDictTable.treeNode().AOTfirstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Fields', se.current().AOTname());
        #    this.assertEquals('Fields', se.currentValue().AOTname());
        #    this.assertEquals('Fields', se.currentIdx().AOTname());
        #    this.assertEquals('Fields', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Field Groups', se.current().AOTname());
        #    this.assertEquals('Field Groups', se.currentValue().AOTname());
        #    this.assertEquals('Field Groups', se.currentIdx().AOTname());
        #    this.assertEquals('Field Groups', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Indexes', se.current().AOTname());
        #    this.assertEquals('Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Full Text Indexes', se.current().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentValue().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentIdx().AOTname());
        #    this.assertEquals('Full Text Indexes', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Relations', se.current().AOTname());
        #    this.assertEquals('Relations', se.currentValue().AOTname());
        #    this.assertEquals('Relations', se.currentIdx().AOTname());
        #    this.assertEquals('Relations', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('DeleteActions', se.current().AOTname());
        #    this.assertEquals('DeleteActions', se.currentValue().AOTname());
        #    this.assertEquals('DeleteActions', se.currentIdx().AOTname());
        #    this.assertEquals('DeleteActions', se.currentKey().AOTname());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('Methods', se.current().AOTname());
        #    this.assertEquals('Methods', se.currentValue().AOTname());
        #    this.assertEquals('Methods', se.currentIdx().AOTname());
        #    this.assertEquals('Methods', se.currentKey().AOTname());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    SysEnumerator_TreeNodeSibling se = SysEnumerator_TreeNodeSibling::construct(null);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlChildrenTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlChildrenTest
    PROPERTIES
      Name                #SysEnumerator_XmlChildrenTest
      Extends             #SysTestCase
      Origin              #{A3EAF3E9-E946-47EF-A385-E936D9F2CD8C}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlChildrenTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlChildren se = SysEnumerator_XmlChildren::construct(xmlDoc.root());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlChildren se = SysEnumerator_XmlChildren::construct(xmlDoc);
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #public void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlChildren se = SysEnumerator_XmlChildren::construct(xmlDoc.selectSingleNode('root/element'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlNodeListIndexTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlNodeListIndexTest
    PROPERTIES
      Name                #SysEnumerator_XmlNodeListIndexTest
      Extends             #SysTestCase
      Origin              #{88A0E39B-0DB1-46EB-B4D9-7E67C687B61E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlNodeListIndexTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeListIndex se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.root().childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlNodeListIndex se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #public void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeListIndex se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.selectNodes('root/element/sub'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.1', se.current().text());
        #    this.assertEquals('2.1', se.currentValue().text());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.2', se.current().text());
        #    this.assertEquals('2.2', se.currentValue().text());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.3', se.current().text());
        #    this.assertEquals('2.3', se.currentValue().text());
        #    this.assertEquals(6, se.currentIdx());
        #    this.assertEquals(6, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlNodeListTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlNodeListTest
    PROPERTIES
      Name                #SysEnumerator_XmlNodeListTest
      Extends             #SysTestCase
      Origin              #{6B3D5C61-B0DB-4676-B513-D7D29B40D7F5}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlNodeListTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeList se = SysEnumerator_XmlNodeList::construct(xmlDoc.root().childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 3, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlNodeList se = SysEnumerator_XmlNodeList::construct(xmlDoc.childNodes());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 1, se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #public void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlNodeList se = SysEnumerator_XmlNodeList::construct(xmlDoc.selectNodes('root/element/sub'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.1', se.current().text());
        #    this.assertEquals('2.1', se.currentValue().text());
        #    this.assertEquals(4, se.currentIdx());
        #    this.assertEquals(4, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.2', se.current().text());
        #    this.assertEquals('2.2', se.currentValue().text());
        #    this.assertEquals(5, se.currentIdx());
        #    this.assertEquals(5, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('2.3', se.current().text());
        #    this.assertEquals('2.3', se.currentValue().text());
        #    this.assertEquals(6, se.currentIdx());
        #    this.assertEquals(6, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(zero64 + 7, se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumerator_XmlSiblingTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumerator_XmlSiblingTest
    PROPERTIES
      Name                #SysEnumerator_XmlSiblingTest
      Extends             #SysTestCase
      Origin              #{8152D769-51EE-4268-A57A-C54805FB807E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumerator_XmlSiblingTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testChildNodes
        #public void testChildNodes()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlSibling se = SysEnumerator_XmlSibling::construct(xmlDoc.root().firstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('ххх', se.current().name());
        #    this.assertEquals('ххх', se.currentValue().name());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('element', se.current().name());
        #    this.assertEquals('element', se.currentValue().name());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    XmlDocument xmlDoc = XmlDocument::newBlank();
        #    SysEnumerator_XmlSibling se = SysEnumerator_XmlSibling::construct(xmlDoc.firstChild());
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('xml', se.current().name());
        #    this.assertEquals('xml', se.currentValue().name());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
      SOURCE #testXPath
        #public void testXPath()
        #{
        #    str xmlStr = @'
        #        <root>
        #            <element id="1">
        #                <sub>1.1</sub>
        #                <sub>1.2</sub>
        #                <sub>1.3</sub>
        #                <sub>1.4</sub>
        #            </element>
        #            <ххх>
        #                <sub>х.1</sub>
        #                <sub>х.2</sub>
        #                <sub>х.3</sub>
        #            </ххх>
        #            <element id="2">
        #                <sub>2.1</sub>
        #                <sub>2.2</sub>
        #                <sub>2.3</sub>
        #            </element>
        #        </root>
        #    ';
        #    XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        #    SysEnumerator_XmlSibling se = SysEnumerator_XmlSibling::construct(xmlDoc.selectSingleNode('root/element/sub'));
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.1', se.current().text());
        #    this.assertEquals('1.1', se.currentValue().text());
        #    this.assertEquals(0, se.currentIdx());
        #    this.assertEquals(0, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.2', se.current().text());
        #    this.assertEquals('1.2', se.currentValue().text());
        #    this.assertEquals(1, se.currentIdx());
        #    this.assertEquals(1, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.3', se.current().text());
        #    this.assertEquals('1.3', se.currentValue().text());
        #    this.assertEquals(2, se.currentIdx());
        #    this.assertEquals(2, se.currentKey());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals('1.4', se.current().text());
        #    this.assertEquals('1.4', se.currentValue().text());
        #    this.assertEquals(3, se.currentIdx());
        #    this.assertEquals(3, se.currentKey());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumeratorGroupTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumeratorGroupTest
    PROPERTIES
      Name                #SysEnumeratorGroupTest
      Extends             #SysTestCase
      Origin              #{CBE8740A-08DF-47CF-9D53-A7D8F0B73729}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumeratorGroupTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testAdd
        #public void testAdd()
        #{
        #    SysEnumerator se = SysEnumerator::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #    this.assertEquals(0, se.enumerators().elements());
        #
        #    se.add(SysEnumerator_Int::newFromTo(1,100));
        #    this.assertEquals(1, se.enumerators().elements());
        #
        #    this.assertEquals(zero64 + 100, se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    SysEnumerator se = SysEnumerator::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #    this.assertEquals(0, se.enumerators().elements());
        #    this.assertEquals(int64Max(), se.estimatedIterations());
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEstimatedIterations
        #public void testEstimatedIterations()
        #{
        #    SysSequenceInt sequnce = SysSequenceInt::construct(1,100);
        #    SysEnumerator_Int intEnumerator = SysEnumerator_Int::construct(sequnce);
        #    SysEnumerator_First first5 = SysEnumerator_First::construct(5);
        #
        #    SysEnumerator se = SysEnumerator::construct();
        #    int64 zero64;
        #
        #    this.assertNotNull(se);
        #    this.assertNotNull(se.enumerators());
        #    this.assertEquals(0, se.enumerators().elements());
        #
        #    se.add(intEnumerator);
        #    this.assertEquals(1, se.enumerators().elements());
        #    this.assertEquals(zero64 + 100, se.estimatedIterations());
        #
        #    se.add(first5);
        #    this.assertEquals(2, se.enumerators().elements());
        #    this.assertEquals(zero64 + 5, se.estimatedIterations());
        #
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: SysEnumeratorTest unloaded
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #SysEnumeratorTest
    PROPERTIES
      Name                #SysEnumeratorTest
      Extends             #SysTestCase
      Origin              #{0BD04D6B-4710-4DBC-A4F9-382B2ED55D1E}
    ENDPROPERTIES
    
    METHODS
      SOURCE #classDeclaration
        #//
        #// mazzy, https://github.com/mazzy-ax/SysEnumerators
        #//
        #public class SysEnumeratorTest extends SysTestCase
        #{
        #}
      ENDSOURCE
      SOURCE #testArgsRecords
        #public void testArgsRecords()
        #{
        #    Args args = new Args();
        #    DataArea dataArea;
        #    SysEnumerator se;
        #
        #    select dataArea;
        #    args.record(dataArea);
        #
        #    se = SysEnumerator::newFromArgsRecord(args);
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(dataArea, se.current());
        #    this.assertEquals(dataArea, se.currentKey());
        #    this.assertEquals(dataArea, se.currentValue());
        #}
      ENDSOURCE
      SOURCE #testCombinedMapRange
        #public void testCombinedMapRange()
        #{
        #    Map m = new Map(Types::Integer,Types::String);
        #    SysEnumerator se;
        #
        #    m.insert(10, 'a');
        #    m.insert(50, 'e');
        #    m.insert(20, 'b');
        #    m.insert(30, 'c');
        #    m.insert(40, 'd');
        #
        #    se = SysEnumerator::construct()
        #        .add(SysEnumerator_Map::construct(m))
        #        .add(SysEnumerator_Int::construct());
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals(10, se.currentKey());
        #    this.assertEquals('a', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals(20, se.currentKey());
        #    this.assertEquals('b', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals(30, se.currentKey());
        #    this.assertEquals('c', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(4, se.current());
        #    this.assertEquals(40, se.currentKey());
        #    this.assertEquals('d', se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(5, se.current());
        #    this.assertEquals(50, se.currentKey());
        #    this.assertEquals('e', se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEmpty
        #public void testEmpty()
        #{
        #    SysEnumerator se = SysEnumerator::construct();
        #
        #    this.assertNotNull(se);
        #}
      ENDSOURCE
      SOURCE #testEnum
        #public void testEnum()
        #{
        #    ABC enum;
        #    SysEnumerator se = SysEnumerator::newFromEnum(enum);
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(0, se.current());
        #    this.assertEquals('None', se.currentKey());
        #    this.assertEquals(0+ABC::None, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals('A', se.currentKey());
        #    this.assertEquals(0+ABC::A, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals('B', se.currentKey());
        #    this.assertEquals(0+ABC::B, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals('C', se.currentKey());
        #    this.assertEquals(0+ABC::C, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
      SOURCE #testEnumId
        #public void testEnumId()
        #{
        #    SysEnumerator se = SysEnumerator::newFromEnumId(enumnum(ABC));
        #
        #    this.assertNotNull(se);
        #    this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(0, se.current());
        #    this.assertEquals('None', se.currentKey());
        #    this.assertEquals(0+ABC::None, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(1, se.current());
        #    this.assertEquals('A', se.currentKey());
        #    this.assertEquals(0+ABC::A, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(2, se.current());
        #    this.assertEquals('B', se.currentKey());
        #    this.assertEquals(0+ABC::B, se.currentValue());
        #
        #    this.assertTrue(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        #    this.assertEquals(3, se.current());
        #    this.assertEquals('C', se.currentKey());
        #    this.assertEquals(0+ABC::C, se.currentValue());
        #
        #    this.assertFalse(se.moveNext());
        #    this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: PRN

; Microsoft Dynamics AX Project : mazzyEnumeratorsTest unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #mazzyEnumeratorsTest
  SHARED
  PROPERTIES
    Name                #mazzyEnumeratorsTest
    Origin              #{6B09B52D-CDB7-44F6-920A-AA5B98DD97DF}
  ENDPROPERTIES
  
    PROJECTCLASS SysTestProject
    APPDATAEXPORT
    SOURCE #mazzyEnumeratorsTest
      #<APPDATA><info><version>3</version><onErrorAction>0</onErrorAction><codeCoverage>0</codeCoverage><recordCount>0</recordCount><testStrategy>0</testStrategy><listeners></listeners></info></APPDATA>
    ENDSOURCE
    ENDAPPDATAEXPORT
    GROUP #SysSequences
      PROPERTIES
        Name                #SysSequences
        ProjectGroupType    #Classes
        GroupMask           #<SysSequence.*Test>
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024365
        NODETYPE 329
        NAME #SysSequenceAmountTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024367
        NODETYPE 329
        NAME #SysSequenceAnytypeTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024369
        NODETYPE 329
        NAME #SysSequenceDateTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024372
        NODETYPE 329
        NAME #SysSequenceInt64Test
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024373
        NODETYPE 329
        NAME #SysSequenceIntTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024375
        NODETYPE 329
        NAME #SysSequenceRealTest
      ENDNODE
      ENDGROUP
      
    GROUP #SysEnumerators
      PROPERTIES
        Name                #SysEnumerators
        ProjectGroupType    #Classes
        GroupMask           #<SysEnumerator.*Test>
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024225
        NODETYPE 329
        NAME #SysEnumerator_ArrayTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024234
        NODETYPE 329
        NAME #SysEnumerator_ContainerClassTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024235
        NODETYPE 329
        NAME #SysEnumerator_ContainerTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024267
        NODETYPE 329
        NAME #SysEnumerator_EmptyTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024269
        NODETYPE 329
        NAME #SysEnumerator_EnumTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024275
        NODETYPE 329
        NAME #SysEnumerator_FirstTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024280
        NODETYPE 329
        NAME #SysEnumerator_Int64Test
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024281
        NODETYPE 329
        NAME #SysEnumerator_IntTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024285
        NODETYPE 329
        NAME #SysEnumerator_Keywords_FunctionTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024287
        NODETYPE 329
        NAME #SysEnumerator_Keywords_SymbolTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024290
        NODETYPE 329
        NAME #SysEnumerator_ListTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024292
        NODETYPE 329
        NAME #SysEnumerator_MapTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024295
        NODETYPE 329
        NAME #SysEnumerator_QueryRunTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024299
        NODETYPE 329
        NAME #SysEnumerator_RecordTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024301
        NODETYPE 329
        NAME #SysEnumerator_RunBaseProgressTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024304
        NODETYPE 329
        NAME #SysEnumerator_SequenceTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024306
        NODETYPE 329
        NAME #SysEnumerator_SetTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024309
        NODETYPE 329
        NAME #SysEnumerator_StructTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024312
        NODETYPE 329
        NAME #SysEnumerator_SystemCollectionTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024315
        NODETYPE 329
        NAME #SysEnumerator_TextBuffer_LineTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024317
        NODETYPE 329
        NAME #SysEnumerator_TextBuffer_SplitTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024318
        NODETYPE 329
        NAME #SysEnumerator_TextBufferTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024321
        NODETYPE 329
        NAME #SysEnumerator_TreeNodeChildrenTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024323
        NODETYPE 329
        NAME #SysEnumerator_TreeNodeSiblingTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024326
        NODETYPE 329
        NAME #SysEnumerator_XmlChildrenTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024329
        NODETYPE 329
        NAME #SysEnumerator_XmlNodeListIndexTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024330
        NODETYPE 329
        NAME #SysEnumerator_XmlNodeListTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024332
        NODETYPE 329
        NAME #SysEnumerator_XmlSiblingTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024334
        NODETYPE 329
        NAME #SysEnumeratorGroupTest
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 1024335
        NODETYPE 329
        NAME #SysEnumeratorTest
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
