//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysSequenceDateTest extends SysTestCase
{

    void test1st()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 1;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void test1stDefault()
    {
        SysSequenceDate range = SysSequenceDate::construct();

        this.assertNotNull(range);

        this.assertEquals(DateNull(), range.start());
        this.assertEquals(DateMax(), range.end());
    }

    void test3()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 3;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void test9()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 9;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testClone()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);
        SysSequenceDate clone = range.clone();

        this.assertNotNull(range);
        this.assertNotNull(clone);

        this.assertEquals(range.start(), clone.start());
        this.assertEquals(range.end(), clone.end());
        this.assertEquals(range.distance(), clone.distance());
        this.assertEquals(range.reversed(), clone.reversed());
    }

    void testContains()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);

        this.assertNotNull(range);

        this.assertTrue(range.contains(start));
        this.assertTrue(range.contains(end));
        this.assertTrue(range.contains(middle));
        this.assertFalse(range.contains(start - 1));
        this.assertFalse(range.contains(end + 1));
    }

    void testContainsEmpty()
    {
        Date start = 31\12\2017;
        Date end = 20\01\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);

        this.assertNotNull(range);

        this.assertFalse(range.contains(start));
        this.assertFalse(range.contains(end));
        this.assertFalse(range.contains(middle));
        this.assertFalse(range.contains(start - 1));
        this.assertFalse(range.contains(end + 1));
    }

    void testCover()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);

        this.assertNotNull(range);

        this.assertFalse(range.cover(start));
        this.assertFalse(range.cover(end));
        this.assertTrue(range.cover(middle));
        this.assertFalse(range.cover(start - 1));
        this.assertFalse(range.cover(end + 1));
    }

    void testCoverEmpty()
    {
        Date start = 31\12\2017;
        Date end = 20\01\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);

        this.assertNotNull(range);

        this.assertFalse(range.cover(start));
        this.assertFalse(range.cover(end));
        this.assertFalse(range.cover(middle));
        this.assertFalse(range.cover(start - 1));
        this.assertFalse(range.cover(end + 1));
    }

    void testDefault()
    {
        SysSequenceDate sequence = SysSequenceDate::construct();

        this.assertNotNull(sequence);
        this.assertEquals(DateNull(), sequence.start());
        this.assertEquals(DateMax(), sequence.end());
        this.assertEquals(any2int(DateMax() - DateNull()), sequence.distance());
        this.assertEquals(1, sequence.step());

        this.assertEquals(any2int64(DateMax() - DateNull() + 1), sequence.estimatedIterations());
    }

    void testDistance()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);

        this.assertNotNull(range);

        this.assertEquals(end - start, range.distance());
    }

    void testDistanceDefault()
    {
        SysSequenceDate range = SysSequenceDate::construct();

        this.assertNotNull(range);

        this.assertEquals(93136, range.distance());
    }

    void testDistanceEmpty()
    {
        Date start = 31\12\2017;
        Date end = 20\01\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);

        this.assertNotNull(range);

        this.assertEquals(end - start, range.distance());
    }

    void testDistanceMaxMin()
    {
        SysSequenceDate range = SysSequenceDate::construct(DateMax(), DateNull());

        this.assertNotNull(range);

        this.assertEquals(-93136, range.distance());
    }

    void testDistanceMinMax()
    {
        SysSequenceDate range = SysSequenceDate::construct(DateNull(), DateMax());

        this.assertNotNull(range);

        this.assertEquals(93136, range.distance());
    }

    void testEmpty()
    {
        Date start = 31\12\2017;
        Date end = 20\012\2017;
        int step = 1;
        int64 iterations = 0;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testEqual()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);
        SysSequenceDate middleRange = SysSequenceDate::construct(middle, end);

        this.assertNotNull(range);
        this.assertNotNull(middleRange);

        this.assertTrue(range.equal(range));
        this.assertTrue(range.equal(range.clone()));
        this.assertTrue(range.equal(range.reverse().reverse()));
        this.assertFalse(range.equal(middleRange));
        this.assertFalse(range.equal(null));
    }

    void testGetEnumerator()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 1;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        SysEnumerator se = sequence.getEnumerator();

        this.assertNotNull(se);
        this.assertNotNull(se.enumerators());
    }

    void testGetNext()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 1;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertEquals(start + step, sequence.getNext(start));
        this.assertEquals(end + step, sequence.getNext(end));
    }

    void testIn()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);
        SysSequenceDate middleRange = SysSequenceDate::construct(middle, end);

        this.assertNotNull(range);
        this.assertNotNull(middleRange);

        this.assertTrue(range.in(range));
        this.assertTrue(middleRange.in(range));
        this.assertFalse(range.in(middleRange));
        this.assertFalse(range.in(null));
    }

    void testIsBoundary()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);

        this.assertNotNull(range);

        this.assertTrue(range.isBoundary(start));
        this.assertTrue(range.isBoundary(end));
        this.assertFalse(range.isBoundary(middle));
    }

    void testMaxMin1()
    {
        Date start = DateMax();
        Date end = DateNull();
        int step = 1;
        int64 iterations = 0;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMaxMin2()
    {
        Date start = DateMax();
        Date end = DateNull();
        int step = 2;
        int64 iterations = 0;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMaxMin3()
    {
        Date start = DateMax();
        Date end = DateNull();
        int step = 3;
        int64 iterations = 0;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinMax1()
    {
        Date start = DateNull();
        Date end = DateMax();
        int step = 1;
        int64 iterations = 93137;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinMax2()
    {
        Date start = DateNull();
        Date end = DateMax();
        int step = 2;
        int64 iterations = 46569;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinMax3()
    {
        Date start = DateNull();
        Date end = DateMax();
        int step = 3;
        int64 iterations = 31046;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        Date middle = 01\03\2017;

        SysSequenceDate range = SysSequenceDate::construct(start, end);
        SysSequenceDate reverseRange = range.reverse();

        this.assertNotNull(range);
        this.assertNotNull(reverseRange);

        this.assertFalse(range.reversed());
        this.assertTrue(reverseRange.reversed());
        this.assertEquals(range.start(), reverseRange.end());
        this.assertEquals(range.end(), reverseRange.start());
        this.assertEquals(-range.distance(), reverseRange.distance());
    }

    void testReverse1()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 1;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse3()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 3;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse9()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 9;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testToString()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 1;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(strfmt('[%1..%2:%3]', start, end, step), sequence.toString());
    }
}