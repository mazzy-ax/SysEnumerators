//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysEnumerator_SystemCollectionTest extends SysTestCase
{

    public void testSystemCollection()
    {
        System.Collections.ArrayList array = new System.Collections.ArrayList();
        SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
    ;
        array.Add('a');
        array.Add('e');
        array.Add('b');
        array.Add('c');
        array.Add('d');

        this.assertNotNull(se);

        this.assertEquals(int64Max(), se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('a', se.current());
        this.assertEquals('a', se.currentValue());
        this.assertEquals('a', se.currentIdx());
        this.assertEquals('a', se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('e', se.current());
        this.assertEquals('e', se.currentValue());
        this.assertEquals('e', se.currentIdx());
        this.assertEquals('e', se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('b', se.current());
        this.assertEquals('b', se.currentValue());
        this.assertEquals('b', se.currentIdx());
        this.assertEquals('b', se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('c', se.currentIdx());
        this.assertEquals('c', se.currentValue());
        this.assertEquals('c', se.current());
        this.assertEquals('c', se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('d', se.current());
        this.assertEquals('d', se.currentValue());
        this.assertEquals('d', se.currentIdx());
        this.assertEquals('d', se.currentKey());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(int64Max(), se.estimatedIterations());
    }

    public void testSystemCollectionReset()
    {
        System.Collections.ArrayList array = new System.Collections.ArrayList();
        SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
    ;
        array.Add('a');
        array.Add('e');
        array.Add('b');
        array.Add('c');
        array.Add('d');

        this.assertNotNull(se);

        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        se.reset();

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('a', se.current());
        this.assertEquals('a', se.currentValue());
        this.assertEquals('a', se.currentIdx());
        this.assertEquals('a', se.currentKey());

        se.reset();

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('a', se.current());
        this.assertEquals('a', se.currentValue());
        this.assertEquals('a', se.currentIdx());
        this.assertEquals('a', se.currentKey());
    }

    public void testSystemCollectionSkip()
    {
        System.Collections.ArrayList array = new System.Collections.ArrayList();
        SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(array);
    ;
        array.Add('a');
        array.Add('e');
        array.Add('b');
        array.Add('c');
        array.Add('d');

        this.assertNotNull(se);

        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.skip(3));

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('c', se.current());
        this.assertEquals('c', se.currentValue());
        this.assertEquals('c', se.current());
        this.assertEquals('c', se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('d', se.current());
        this.assertEquals('d', se.currentValue());
        this.assertEquals('d', se.current());
        this.assertEquals('d', se.currentKey());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
    }

    public void testSystemNull()
    {
        SysEnumerator_SystemCollection se = SysEnumerator_SystemCollection::construct(null);
    ;
        this.assertNotNull(se);
        this.assertNotNull(se.base());

        this.assertEquals(int64Max(), se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(int64Max(), se.estimatedIterations());
    }
}