//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public abstract class SysRange
{

    public abstract SysRange clone()
    {
    }

    public boolean contains(anytype value)
    {
        boolean ret = (this.start() <= value && value <= this.end());

        return ret;
    }

    public boolean cover(anytype value)
    {
        boolean ret = (this.start() < value && value < this.end());
        return ret;
    }

    // переполнение в аксапте не возбуждает исключение, а возвращает значение с отброшенными битами
    public anytype distance()
    {
        anytype ret = this.end() - this.start();

        return ret;
    }

    public abstract anytype end()
    {
    }

    public boolean equal(SysRange range)
    {
        boolean ret = range && (this.start() == range.start()) && (this.end() == range.end());
        return ret;
    }

    public boolean in(SysRange range)
    {
        boolean ret = range && (range.start() <= this.start()) && (this.end() <= range.end());
        return ret;
    }

    public boolean isBoundary(anytype value)
    {
        return (value == this.start()) || (value == this.end());
    }

    public SysRange normalize()
    {
        SysRange range;

        if( this.reversed() )
        {
            range = this.reverse();
        }
        else
        {
            range = this.clone();
        }

        return range;
    }

    public abstract SysRange reverse()
    {
    }

    public boolean reversed()
    {
        boolean ret = this.start() > this.end();
        return ret;
    }

    public abstract anytype start()
    {
    }

    public str toString()
    {
        // SysQuery::range() is not nice
        return strfmt('%1..%2', this.start(), this.end());
    }
}