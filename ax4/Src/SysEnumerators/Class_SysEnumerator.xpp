//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//

/// <summary>
/// класс-фабрика. группа, которая может хранить несколько энумераторов.
/// </summary>
/// <remarks>
/// в энумераторах хочется:
/// 1. вызывать в цикле методы current*, moveNext, reset, skip у каждого энумератора
/// 2. не проверять в цикле as:
///    в этой версии аксапты нет встроенного оператора as,
///    а проверка интерфейса SysDictClass::as() чудовищно медленная.
/// 3. не заставлять программиста реализовывать в каждом энумераторе все методы
/// 4. максимально задействовать intellisense аксапты, указывая конкретные методы вместо базового класса или интерфейса
///    для этого придется создать похожий код, в котором отличаются только типы
/// </remarks>
public class SysEnumerator extends SysEnumeratorGroup
{

    public static SysEnumerator construct()
    {
        return new SysEnumerator();
    }


    public static SysEnumerator newFromArgsRecord(Args _args)
    {
        SysEnumerator enumerator;
    ;
        Debug::assert(_args != null);

        enumerator = SysEnumerator::newFromRecordMarked(_args.record());

        return enumerator;
    }


    public static SysEnumerator newFromArray(Array array, SysSequenceInt sequence = null)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Array::construct(array, sequence));

        return enumerator;
    }


    public static SysEnumerator newFromContainer(container con, SysSequenceInt sequence = null)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Container::construct(con, sequence));

        return enumerator;
    }


    public static SysEnumerator newFromEnum(anytype enum, SysSequenceInt sequence = null)
    {
        SysEnumerator enumerator = SysEnumerator::newFromEnumId(DictEnum::value2id(enum), sequence);

        return enumerator;
    }


    public static SysEnumerator newFromEnumId(EnumId enumId, SysSequenceInt sequence = null)
    {
        SysEnumerator enumerator = SysEnumerator::newFromSysDictEnum(new SysDictEnum(enumId), sequence);

        return enumerator;
    }


    public static SysEnumerator newFromList(List list)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_List::construct(list));

        return enumerator;
    }


    public static SysEnumerator newFromMap(Map map)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Map::construct(map));

        return enumerator;
    }


    public static SysEnumerator newFromPackedContainer(container con, SysSequenceInt sequence = null)
    {
        SysEnumerator enumerator = SysEnumerator::newFromContainer(con, sequence);
    ;
        enumerator.skip(); // first value - version

        return enumerator;
    }


    public static SysEnumerator newFromRecord(Common record)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Record::construct(record));

        return enumerator;
    }


    public static SysEnumerator newFromRecordMarked(Common record)
    {
        SysEnumerator   enumerator;
        FormDataSource  formDataSource;

        if( record.isFormDataSource() )
        {
            formDataSource = record.dataSource();
            enumerator = SysEnumerator::construct().add(SysEnumerator_DataSourceMarked::construct(formDataSource));
        }

        if( !enumerator )
        {
            enumerator = SysEnumerator::newFromRecord(record);
        }

        return enumerator;
    }


    public static SysEnumerator newFromSequence(ISysSequence sequence)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Sequence::construct(sequence));

        return enumerator;
    }


    public static SysEnumerator newFromSequenceInt(SysSequenceInt sequence)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Int::construct(sequence));

        return enumerator;
    }


    public static SysEnumerator newFromSequenceInt64(SysSequenceInt64 sequence)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Int64::construct(sequence));

        return enumerator;
    }


    public static SysEnumerator newFromSet(Set set)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Set::construct(set));

        return enumerator;
    }


    public static SysEnumerator newFromStruct(Struct struct, SysSequenceInt sequence = null)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Struct::construct(struct, sequence));

        return enumerator;
    }


    public static SysEnumerator newFromSysDictEnum(SysDictEnum sysDictEnum, SysSequenceInt sequence = null)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Enum::construct(sysDictEnum, sequence));

        return enumerator;
    }


    public static SysEnumerator newFromToAmount(amount start = 0, amount end = RealMax(), amount step = 1)
    {
        SysSequenceAmount sequence = SysSequenceAmount::construct(start, end, step);
        SysEnumerator enumerator = SysEnumerator::newFromSequence(sequence);

        return enumerator;
    }


    public static SysEnumerator newFromToDate(date start = DateNull(), date end = DateMax(), int step = 1)
    {
        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        SysEnumerator enumerator = SysEnumerator::newFromSequence(sequence);

        return enumerator;
    }


    public static SysEnumerator newFromToEnum(anytype enumValueStart, anytype enumValueEnd = null)
    {
        SysEnumerator enumerator = SysEnumerator::construct().add(SysEnumerator_Enum::newFromTo(enumValueStart, enumValueEnd));

        return enumerator;
    }


    public static SysEnumerator newFromToInt(int start = 1, int end = maxint(), int step = 1)
    {
        SysSequenceInt sequence = SysSequenceInt::construct(start, end, step);
        SysEnumerator enumerator = SysEnumerator::newFromSequenceInt(sequence);

        return enumerator;
    }


    public static SysEnumerator newFromToInt64(int64 start = 1, int64 end = maxRecId(), int64 step = 1)
    {
        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        SysEnumerator enumerator = SysEnumerator::newFromSequenceInt64(sequence);

        return enumerator;
    }


    public static SysEnumerator newFromToReal(real start = 0, real end = RealMax(), real step = 1)
    {
        SysSequenceReal sequence = SysSequenceReal::construct(start, end, step);
        SysEnumerator enumerator = SysEnumerator::newFromSequence(sequence);

        return enumerator;
    }


    public static SysEnumerator newFromXml(XmlNodeList node, SysSequenceInt sequence = null)
    {
        SysEnumerator enumerator = SysEnumerator::construct();

        if( sequence )
        {
            enumerator.add(SysEnumerator_XmlNodeListIndex::construct(node, sequence));
        }
        else
        {
            enumerator.add(SysEnumerator_XmlNodeList::construct(node));
        }

        return enumerator;
    }

}