//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysSequenceDate extends SysRangeDate implements ISysSequence, Enumerable
{
    int step;

    public SysSequenceDate clone()
    {
        SysSequenceDate range = SysSequenceDate::construct(this.start(), this.end(), this.step());

        return range;
    }

    public boolean equal(SysSequenceDate sequence)
    {
        boolean ret = super(sequence) && (this.step() == sequence.step());
        return ret;
    }

    public int64 estimatedIterations()
    {
        int64 ret = int64Max();
        int distance = this.distance();

        if( distance == 0 )
        {
            ret = 1;
        }
        else if( ((distance < 0) && (this.step() > 0))
              || ((distance > 0) && (this.step() < 0)) )
        {
            ret = 0;
        }
        else if( step == 1 )
        {
            ret = distance + 1;
        }
        else
        {
            ret = distance div this.step() + 1;
        }

        return ret;
    }

    public SysEnumerator getEnumerator()
    {
        return SysEnumerator::newFromSequence(this);
    }

    public Date getNext(Date value)
    {
        return value + this.step();
    }

    public void new(date _start = DateNull(), date _end = DateMax(), int _step = 1)
    {;
        Debug::assert(_step != 0);

        super(_start, _end);
        step = _step;
    }

    public SysSequenceDate reverse()
    {
        SysSequenceDate sequence = SysSequenceDate::construct(this.end(), this.start(), this.reverseStep());

        return sequence;
    }

    public int reverseStep()
    {
        return -step;
    }

    public int step()
    {
        return step;
    }

    public str toString()
    {
        return strfmt('%1:[%2]', this.step(), super());
    }

    public static SysSequenceDate construct(date _start = DateNull(), date _end = DateMax(), int _step = 1)
    {
        SysSequenceDate sequence = new SysSequenceDate(_start, _end, _step);

        return sequence;
    }
}