//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysEnumerator_ContainerClassTest extends SysTestCase
{

    public void testContainerClass()
    {
        container con = ['a','b','c','d','e'];
        ContainerClass cc = new ContainerClass(con);
        SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::construct(cc);
        int64 zero64;

        this.assertNotNull(se);
        this.assertEquals(zero64 + 5, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('a', se.current());
        this.assertEquals('a', se.currentValue());
        this.assertEquals(1, se.currentIdx());
        this.assertEquals(1, se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('b', se.current());
        this.assertEquals('b', se.currentValue());
        this.assertEquals(2, se.currentIdx());
        this.assertEquals(2, se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('c', se.current());
        this.assertEquals('c', se.currentValue());
        this.assertEquals(3, se.currentIdx());
        this.assertEquals(3, se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('d', se.current());
        this.assertEquals('d', se.currentValue());
        this.assertEquals(4, se.currentIdx());
        this.assertEquals(4, se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('e', se.current());
        this.assertEquals('e', se.currentValue());
        this.assertEquals(5, se.currentIdx());
        this.assertEquals(5, se.currentKey());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(zero64 + 5, se.estimatedIterations());
    }

    public void testContainerEmpty()
    {
        ContainerClass conClass = new ContainerClass(connull());
        SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::construct(conClass);

        this.assertNotNull(se);
        this.assertNotNull(se.baseClass());
        this.assertEquals(connull(), se.base());

        this.assertEquals(0, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(0, se.estimatedIterations());
    }

    public void testContainerNull()
    {
        SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::construct();

        this.assertNotNull(se);
        this.assertNotNull(se.baseClass());
        this.assertEquals(connull(), se.base());

        this.assertEquals(0, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(0, se.estimatedIterations());
    }

    public void testContainerSkip()
    {
        container con = ['a','b','c','d','e'];
        SysEnumerator_ContainerClass se = SysEnumerator_ContainerClass::newFromContainer(con);
        int64 zero64;

        this.assertNotNull(se);
        this.assertEquals(zero64 + 5, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.skip());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('b', se.current());
        this.assertEquals('b', se.currentValue());
        this.assertEquals(2, se.currentIdx());
        this.assertEquals(2, se.currentKey());

        this.assertTrue(se.skip(2));

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('e', se.current());
        this.assertEquals('e', se.currentValue());
        this.assertEquals(5, se.currentIdx());
        this.assertEquals(5, se.currentKey());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(zero64 + 5, se.estimatedIterations());
    }
}