//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysEnumerator_MapTest extends SysTestCase
{

    public void testMap()
    {
        // see also test combined Map + Range

        Map m = new Map(Types::Integer,Types::String);
        SysEnumerator_Map se;
        int64 zero64;

        m.insert(10, 'a');
        m.insert(50, 'e');
        m.insert(20, 'b');
        m.insert(30, 'c');
        m.insert(40, 'd');

        se = SysEnumerator_Map::construct(m);
        this.assertEquals(zero64 + 5, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertNotNull(se);

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(10, se.current());
        this.assertEquals(10, se.currentIdx());
        this.assertEquals(10, se.currentKey());
        this.assertEquals('a', se.currentValue());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(20, se.current());
        this.assertEquals(20, se.currentIdx());
        this.assertEquals(20, se.currentKey());
        this.assertEquals('b', se.currentValue());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(30, se.current());
        this.assertEquals(30, se.currentIdx());
        this.assertEquals(30, se.currentKey());
        this.assertEquals('c', se.currentValue());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(40, se.current());
        this.assertEquals(40, se.currentIdx());
        this.assertEquals(40, se.currentKey());
        this.assertEquals('d', se.currentValue());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(50, se.current());
        this.assertEquals(50, se.currentIdx());
        this.assertEquals(50, se.currentKey());
        this.assertEquals('e', se.currentValue());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(zero64 + 5, se.estimatedIterations());
    }

    public void testMapEmpty()
    {
        Map m = new Map(Types::Integer, Types::String);
        SysEnumerator_Map se = SysEnumerator_Map::construct(m);

        this.assertNotNull(se);
        this.assertEquals(0, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(0, se.estimatedIterations());
    }
}