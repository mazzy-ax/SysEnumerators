//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysEnumerator_FirstTest extends SysTestCase
{

    public void testFirst()
    {
        SysEnumerator_First se = SysEnumerator_First::construct(3);
        int64 zero64;

        this.assertNotNull(se);
        this.assertEquals(zero64 + 3, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        this.assertEquals(3, se.remains());
        this.assertEquals(3, se.first());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(1, se.current());
        this.assertEquals(1, se.currentIdx());
        this.assertEquals(1, se.currentKey());
        this.assertEquals(1, se.currentValue());
        this.assertEquals(2, se.remains());
        this.assertEquals(3, se.first());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(2, se.current());
        this.assertEquals(2, se.currentIdx());
        this.assertEquals(2, se.currentKey());
        this.assertEquals(2, se.currentValue());
        this.assertEquals(1, se.remains());
        this.assertEquals(3, se.first());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(3, se.current());
        this.assertEquals(3, se.currentIdx());
        this.assertEquals(3, se.currentKey());
        this.assertEquals(3, se.currentValue());
        this.assertEquals(0, se.remains());
        this.assertEquals(3, se.first());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(zero64 + 3, se.estimatedIterations());
    }

    public void testFirstNegative()
    {
        SysEnumerator_First se = SysEnumerator_First::construct(-2);
        int64 zero64;

        this.assertNotNull(se);
        this.assertEquals(zero64 + 0, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        this.assertEquals(0, se.remains());
        this.assertEquals(0, se.first());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(zero64 + 0, se.estimatedIterations());

        this.assertEquals(0, se.remains());
        this.assertEquals(0, se.first());
    }

    public void testFirstNull()
    {
        SysEnumerator_First se = SysEnumerator_First::construct(0);
        int64 zero64;

        this.assertNotNull(se);
        this.assertEquals(zero64 + 0, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());
        this.assertEquals(0, se.remains());
        this.assertEquals(0, se.first());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(zero64 + 0, se.estimatedIterations());

        this.assertEquals(0, se.remains());
        this.assertEquals(0, se.first());
    }
}