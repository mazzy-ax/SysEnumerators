//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysSequenceAnytypeTest extends SysTestCase
{

    void test1st()
    {
        int start = 2;
        int end = 5;
        int step = 1;
        int64 iterations = 4;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void test3()
    {
        int start = 2;
        int end = 5;
        int step = 3;
        int64 iterations = 2;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void test9()
    {
        int start = 2;
        int end = 5;
        int step = 9;
        int64 iterations = 1;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testEmpty()
    {
        int start = 5;
        int end = 2;
        int step = 1;
        int64 iterations = 0;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testGetEnumerator()
    {
        int start = 2;
        int end = 5;
        int step = 1;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);
        SysEnumerator se = sequence.getEnumerator();

        this.assertNotNull(se);
        this.assertNotNull(se.enumerators());
    }

    void testGetNext()
    {
        int start = 2;
        int end = 5;
        int step = 1;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertEquals(start + step, sequence.getNext(start));
        this.assertEquals(end + step, sequence.getNext(end));
    }

    void testMinMax1()
    {
        int start = minint();
        int end = maxint();
        int step = 1;
        int64 iterations = int64Max();

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinMax2()
    {
        int start = minint();
        int end = maxint();
        int step = 2;
        int64 iterations = int64Max();

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinMax3()
    {
        int start = minint();
        int end = maxint();
        int step = 3;
        int64 iterations = int64Max();

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinusMax1()
    {
        int start = -1;
        int end = maxint();
        int step = 1;
        int64 iterations = int64Max();

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinusMax2()
    {
        int start = -1;
        int end = maxint();
        int step = 2;
        int64 iterations = int64Max();

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinusMax3()
    {
        int start = -1;
        int end = maxint();
        int step = 3;
        int64 iterations = int64Max();

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testNegative1()
    {
        int start = -5;
        int end = 2;
        int step = 1;
        int64 iterations = 8;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testNegative2()
    {
        int start = -5;
        int end = 2;
        int step = 2;
        int64 iterations = 4;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testNegative3()
    {
        int start = -5;
        int end = 2;
        int step = 3;
        int64 iterations = 3;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testNegative9()
    {
        int start = -5;
        int end = 2;
        int step = 9;
        int64 iterations = 1;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse1()
    {
        int start = -5;
        int end = 2;
        int step = 1;
        int64 iterations = 8;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse3()
    {
        int start = -5;
        int end = 2;
        int step = 3;
        int64 iterations = 3;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse9()
    {
        int start = -5;
        int end = 2;
        int step = 9;
        int64 iterations = 1;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testToString()
    {
        int start = 2;
        int end = 5;
        int step = 1;

        SysSequenceAnytype sequence = SysSequenceAnytype::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(strfmt('%3:[%1..%2]', start, end, step), sequence.toString());
    }
}