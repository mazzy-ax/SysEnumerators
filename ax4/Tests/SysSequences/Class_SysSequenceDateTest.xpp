//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysSequenceDateTest extends SysTestCase
{

    void test1st()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 1;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void test3()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 3;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void test9()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 9;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testDefault()
    {
        SysSequenceDate sequence = SysSequenceDate::construct();

        this.assertNotNull(sequence);
        this.assertEquals(DateNull(), sequence.start());
        this.assertEquals(DateMax(), sequence.end());
        this.assertEquals(any2int(DateMax() - DateNull()), sequence.distance());
        this.assertEquals(1, sequence.step());

        this.assertEquals(any2int64(DateMax() - DateNull() + 1), sequence.estimatedIterations());
    }

    void testEmpty()
    {
        Date start = 31\12\2017;
        Date end = 20\012\2017;
        int step = 1;
        int64 iterations = 0;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testGetEnumerator()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 1;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);
        SysEnumerator se = sequence.getEnumerator();

        this.assertNotNull(se);
        this.assertNotNull(se.enumerators());
    }

    void testGetNext()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 1;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertEquals(start + step, sequence.getNext(start));
        this.assertEquals(end + step, sequence.getNext(end));
    }

    void testMaxMin1()
    {
        Date start = DateMax();
        Date end = DateNull();
        int step = 1;
        int64 iterations = 0;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMaxMin2()
    {
        Date start = DateMax();
        Date end = DateNull();
        int step = 2;
        int64 iterations = 0;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMaxMin3()
    {
        Date start = DateMax();
        Date end = DateNull();
        int step = 3;
        int64 iterations = 0;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinMax1()
    {
        Date start = DateNull();
        Date end = DateMax();
        int step = 1;
        int64 iterations = 93137;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinMax2()
    {
        Date start = DateNull();
        Date end = DateMax();
        int step = 2;
        int64 iterations = 46569;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinMax3()
    {
        Date start = DateNull();
        Date end = DateMax();
        int step = 3;
        int64 iterations = 31046;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse1()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 1;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse3()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 3;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse9()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 9;

        Date current;
        int64 iterations;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        current = start;
        while( current <= end )
        {
            current = current + step;
            ++iterations;
        }

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testToString()
    {
        Date start = 20\01\2017;
        Date end = 31\12\2017;
        int step = 1;

        SysSequenceDate sequence = SysSequenceDate::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(strfmt('%3:[%1..%2]', start, end, step), sequence.toString());
    }
}