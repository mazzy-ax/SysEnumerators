//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysSequenceAnytype extends SysRangeAnytype implements ISysSequence, Enumerable
{
    anytype step;

    public SysSequenceAnytype clone()
    {
        SysSequenceAnytype range = SysSequenceAnytype::construct(this.start(), this.end(), this.step());

        return range;
    }

    public boolean equal(SysSequenceAnytype sequence)
    {
        boolean ret = super(sequence) && (this.step() == sequence.step());
        return ret;
    }

    public int64 estimatedIterations()
    {
        int64 ret = int64Max();
        anytype distance = this.distance();
        boolean overflow = this.cover(0) && (distance <= 0.0001);

        if( overflow )
        {
            ret = int64Max();
        }
        else if( distance == 0 )
        {
            ret = 1;
        }
        else if( ((distance < 0) && (this.step() > 0))
              || ((distance > 0) && (this.step() < 0)) )
        {
            ret = 0;
        }
        else if( step == 1 )
        {
            ret = any2int64(distance + 1.0);
        }
        else
        {
            ret = any2int64(distance / this.step() + 1.0);
        }

        return ret;
    }

    public SysEnumerator getEnumerator()
    {
        return SysEnumerator::newFromSequence(this);
    }

    public anytype getNext(anytype value)
    {
        return value + this.step();
    }

    public void new(anytype _start, anytype _end, anytype _step)
    {
        super(_start, _end);
        step = _step;
    }

    public SysSequenceAnytype reverse()
    {
        SysSequenceAnytype sequence = SysSequenceAnytype::construct(this.end(), this.start(), this.reverseStep());

        return sequence;
    }

    public anytype reverseStep()
    {
        return 0-step;
    }

    public anytype step()
    {
        return step;
    }

    public str toString()
    {
        return strfmt('%1:[%2]', this.step(), super());
    }

    public static SysSequenceAnytype construct(anytype _start, anytype _end, anytype _step)
    {
        SysSequenceAnytype sequence = new SysSequenceAnytype(_start, _end, _step);

        return sequence;
    }
}