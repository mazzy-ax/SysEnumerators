//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysEnumerator_SequenceTest extends SysTestCase
{

    public void testSequence()
    {
        SysSequenceInt sequence = SysSequenceInt::construct(1, 5, 2);
        SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        int64 zero64;

        this.assertNotNull(se);
        this.assertEquals(zero64 + 3, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(1, se.current());
        this.assertEquals(1, se.currentValue());
        this.assertEquals(1, se.currentIdx());
        this.assertEquals(1, se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(3, se.current());
        this.assertEquals(3, se.currentValue());
        this.assertEquals(3, se.currentIdx());
        this.assertEquals(3, se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(5, se.current());
        this.assertEquals(5, se.currentValue());
        this.assertEquals(5, se.currentIdx());
        this.assertEquals(5, se.currentKey());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(zero64 + 3, se.estimatedIterations());
    }

    public void testSequenceEmpty()
    {
        SysSequenceInt sequence = SysSequenceInt::construct(1, 0, 2);
        SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);

        this.assertNotNull(se);
        this.assertEquals(0, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(0, se.estimatedIterations());
    }

    public void testSequenceNull()
    {
        SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(null);

        this.assertNotNull(se);
        this.assertEquals(0, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(0, se.estimatedIterations());
    }

    public void testSequenceReset()
    {
        SysSequenceInt    sequence = SysSequenceInt::construct(1, 5, 2);
        SysEnumerator_Sequence se = SysEnumerator_Sequence::construct(sequence);
        int64 zero64;

        this.assertNotNull(se);
        this.assertEquals(zero64 + 3, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(1, se.current());
        this.assertEquals(1, se.currentValue());
        this.assertEquals(1, se.currentIdx());
        this.assertEquals(1, se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(3, se.current());
        this.assertEquals(3, se.currentValue());
        this.assertEquals(3, se.currentIdx());
        this.assertEquals(3, se.currentKey());

        se.reset();

        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(1, se.current());
        this.assertEquals(1, se.currentValue());
        this.assertEquals(1, se.currentIdx());
        this.assertEquals(1, se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(3, se.current());
        this.assertEquals(3, se.currentValue());
        this.assertEquals(3, se.currentIdx());
        this.assertEquals(3, se.currentKey());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(5, se.current());
        this.assertEquals(5, se.currentValue());
        this.assertEquals(5, se.currentIdx());
        this.assertEquals(5, se.currentKey());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(zero64 + 3, se.estimatedIterations());
    }
}