//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysEnumerator_TextBuffer_LineTest extends SysTestCase
{

    public void testTextBuffer_1024ok()
    {
        TextBuffer text = new TextBuffer();
        SysEnumerator_TextBuffer_Line se;
        int64 zero64;
        str line1 = strrep('-',1024);
        str line2 = strrep('=',1024);

        text.appendText(line1);
        text.appendText('\n');
        text.appendText(line2);

        se = SysEnumerator_TextBuffer_Line::construct(text);

        this.assertNotNull(se);
        this.assertEquals(zero64 + 2, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(line1, se.current());
        this.assertEquals(line1, se.currentIdx());
        this.assertEquals(line1, se.currentKey());
        this.assertEquals(line1, se.currentValue());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals(line2, se.current());
        this.assertEquals(line2, se.currentIdx());
        this.assertEquals(line2, se.currentKey());
        this.assertEquals(line2, se.currentValue());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
    }

    public void testTextBuffer_1048575ok()
    {
        TextBuffer text = new TextBuffer();
        SysEnumerator_TextBuffer_Line se;
        int64 zero64;
        str line1 = strrep('-',1048574);
        str line2 = strrep('=',1048574);

        text.appendText(line1);
        text.appendText('\n');
        text.appendText(line2);

        se = SysEnumerator_TextBuffer_Line::construct(text);

        this.assertNotNull(se);
        this.assertEquals(zero64 + 2, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
    }

    public void testTextBufferEmpty()
    {
        TextBuffer text = new TextBuffer();
        SysEnumerator_TextBuffer_Line se = SysEnumerator_TextBuffer_Line::construct(text);

        this.assertNotNull(se);
        this.assertEquals(0, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
    }

    public void testTextBufferLine()
    {
        TextBuffer text = new TextBuffer();
        SysEnumerator_TextBuffer_Line se;
        int64 zero64;

        text.appendText(@'line1
    line2,'+'\t'+@' хвост2
    line3, tail3, and'+'\tmore');

        se = SysEnumerator_TextBuffer_Line::construct(text);

        this.assertNotNull(se);
        this.assertEquals(zero64 + 3, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('line1', se.current());
        this.assertEquals('line1', se.currentIdx());
        this.assertEquals('line1', se.currentKey());
        this.assertEquals('line1', se.currentValue());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('line2,\t хвост2', se.current());
        this.assertEquals('line2,\t хвост2', se.currentIdx());
        this.assertEquals('line2,\t хвост2', se.currentKey());
        this.assertEquals('line2,\t хвост2', se.currentValue());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('line3, tail3, and\tmore', se.current());
        this.assertEquals('line3, tail3, and\tmore', se.currentIdx());
        this.assertEquals('line3, tail3, and\tmore', se.currentKey());
        this.assertEquals('line3, tail3, and\tmore', se.currentValue());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
    }

    public void testTextBufferNull()
    {
        SysEnumerator_TextBuffer_Line se = SysEnumerator_TextBuffer_Line::construct(null);

        this.assertNotNull(se);
        this.assertEquals(0, se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
    }
}