//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysEnumerator_TreeNodeSiblingTest extends SysTestCase
{

    public void testChildNodes()
    {
        SysDictTable    sysDictTable = new SysDictTable(tablenum(CustTable));
        SysEnumerator_TreeNodeSibling se = SysEnumerator_TreeNodeSibling::construct(sysDictTable.treeNode().AOTfirstChild());
        int64 zero64;

        this.assertNotNull(se);
        this.assertEquals(int64Max(), se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('Fields', se.current().AOTname());
        this.assertEquals('Fields', se.currentValue().AOTname());
        this.assertEquals('Fields', se.currentIdx().AOTname());
        this.assertEquals('Fields', se.currentKey().AOTname());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('Field Groups', se.current().AOTname());
        this.assertEquals('Field Groups', se.currentValue().AOTname());
        this.assertEquals('Field Groups', se.currentIdx().AOTname());
        this.assertEquals('Field Groups', se.currentKey().AOTname());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('Indexes', se.current().AOTname());
        this.assertEquals('Indexes', se.currentValue().AOTname());
        this.assertEquals('Indexes', se.currentIdx().AOTname());
        this.assertEquals('Indexes', se.currentKey().AOTname());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('Relations', se.current().AOTname());
        this.assertEquals('Relations', se.currentValue().AOTname());
        this.assertEquals('Relations', se.currentIdx().AOTname());
        this.assertEquals('Relations', se.currentKey().AOTname());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('DeleteActions', se.current().AOTname());
        this.assertEquals('DeleteActions', se.currentValue().AOTname());
        this.assertEquals('DeleteActions', se.currentIdx().AOTname());
        this.assertEquals('DeleteActions', se.currentKey().AOTname());

        this.assertTrue(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Inside, se.position());
        this.assertEquals('Methods', se.current().AOTname());
        this.assertEquals('Methods', se.currentValue().AOTname());
        this.assertEquals('Methods', se.currentIdx().AOTname());
        this.assertEquals('Methods', se.currentKey().AOTname());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(int64Max(), se.estimatedIterations());
    }

    public void testEmpty()
    {
        SysEnumerator_TreeNodeSibling se = SysEnumerator_TreeNodeSibling::construct(null);
        int64 zero64;

        this.assertNotNull(se);
        this.assertEquals(int64Max(), se.estimatedIterations());
        this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

        this.assertFalse(se.moveNext());
        this.assertEquals(SysEnumeratorPosition::Outside, se.position());
        this.assertEquals(int64Max(), se.estimatedIterations());
    }
}