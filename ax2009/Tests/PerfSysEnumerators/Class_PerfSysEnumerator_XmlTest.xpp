//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class PerfSysEnumerator_XmlTest extends SysTestCase
{
    #define.loopCount(1000)

    public void testXml()
    {
        str xmlStr = @'
            <root>
                <element id="1">
                    <sub>1.1</sub>
                    <sub>1.2</sub>
                    <sub>1.3</sub>
                    <sub>1.4</sub>
                </element>
                <ххх>
                    <sub>х.1</sub>
                    <sub>х.2</sub>
                    <sub>х.3</sub>
                </ххх>
                <element id="2">
                    <sub>2.1</sub>
                    <sub>2.2</sub>
                    <sub>2.3</sub>
                </element>
            </root>
        ';
        XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        SysEnumerator_XmlNodeList se;
        int64 zero64;

        SysEnumerator loop = SysEnumerator::newFromToInt(1, #loopCount);
        while(loop.moveNext())
        {
            se = SysEnumerator_XmlNodeList::construct(xmlDoc.selectNodes('root/element[1]/sub'));
            this.assertNotNull(se);
            this.assertEquals(zero64 + 4, se.estimatedIterations());
            this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.1', se.current().text());
            this.assertEquals(0, se.currentKey());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.2', se.current().text());
            this.assertEquals(1, se.currentKey());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.3', se.current().text());
            this.assertEquals(2, se.currentKey());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.4', se.current().text());
            this.assertEquals(3, se.currentKey());

            this.assertFalse(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Outside, se.position());
            this.assertEquals(zero64 + 4, se.estimatedIterations());
        }
    }

    public void testXmlIndex()
    {
        str xmlStr = @'
            <root>
                <element id="1">
                    <sub>1.1</sub>
                    <sub>1.2</sub>
                    <sub>1.3</sub>
                    <sub>1.4</sub>
                </element>
                <ххх>
                    <sub>х.1</sub>
                    <sub>х.2</sub>
                    <sub>х.3</sub>
                </ххх>
                <element id="2">
                    <sub>2.1</sub>
                    <sub>2.2</sub>
                    <sub>2.3</sub>
                </element>
            </root>
        ';
        XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        SysEnumerator_XmlNodeListIndex se;
        int64 zero64;

        SysEnumerator loop = SysEnumerator::newFromToInt(1, #loopCount);
        while(loop.moveNext())
        {
            se = SysEnumerator_XmlNodeListIndex::construct(xmlDoc.selectNodes('root/element[1]/sub'));
            this.assertNotNull(se);
            this.assertEquals(zero64 + 4, se.estimatedIterations());
            this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.1', se.current().text());
            this.assertEquals(0, se.currentKey());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.2', se.current().text());
            this.assertEquals(1, se.currentKey());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.3', se.current().text());
            this.assertEquals(2, se.currentKey());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.4', se.current().text());
            this.assertEquals(3, se.currentKey());

            this.assertFalse(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Outside, se.position());
            this.assertEquals(zero64 + 4, se.estimatedIterations());
        }
    }

    public void testXmlSibling()
    {
        str xmlStr = @'
            <root>
                <element id="1">
                    <sub>1.1</sub>
                    <sub>1.2</sub>
                    <sub>1.3</sub>
                    <sub>1.4</sub>
                </element>
                <ххх>
                    <sub>х.1</sub>
                    <sub>х.2</sub>
                    <sub>х.3</sub>
                </ххх>
                <element id="2">
                    <sub>2.1</sub>
                    <sub>2.2</sub>
                    <sub>2.3</sub>
                </element>
            </root>
        ';
        XmlDocument xmlDoc = XmlDocument::newXml(xmlStr);
        SysEnumerator_XmlSibling se;
        int64 zero64;

        SysEnumerator loop = SysEnumerator::newFromToInt(1, #loopCount);
        while(loop.moveNext())
        {
            se = SysEnumerator_XmlSibling::construct(xmlDoc.root().firstChild().firstChild());
            this.assertNotNull(se);
            this.assertEquals(int64Max(), se.estimatedIterations());
            this.assertEquals(SysEnumeratorPosition::BeforeFirstElement, se.position());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.1', se.current().text());
            this.assertEquals(0, se.currentKey());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.2', se.current().text());
            this.assertEquals(1, se.currentKey());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.3', se.current().text());
            this.assertEquals(2, se.currentKey());

            this.assertTrue(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Inside, se.position());
            this.assertEquals('1.4', se.current().text());
            this.assertEquals(3, se.currentKey());

            this.assertFalse(se.moveNext());
            this.assertEquals(SysEnumeratorPosition::Outside, se.position());
            this.assertEquals(int64Max(), se.estimatedIterations());
        }
    }
}