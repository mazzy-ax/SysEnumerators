//
// mazzy, https://github.com/mazzy-ax/SysEnumerators
//
public class SysSequenceInt64Test extends SysTestCase
{

    void test1st()
    {
        int64 start = 2;
        int64 end = 5;
        int64 step = 1;
        int64 iterations = 4;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void test3()
    {
        int64 start = 2;
        int64 end = 5;
        int64 step = 3;
        int64 iterations = 2;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void test9()
    {
        int64 start = 2;
        int64 end = 5;
        int64 step = 9;
        int64 iterations = 1;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testDefault()
    {
        SysSequenceInt64 sequence = SysSequenceInt64::construct();

        this.assertNotNull(sequence);
        this.assertEquals(any2int64(1), sequence.start());
        this.assertEquals(int64Max(), sequence.end());
        this.assertEquals(int64Max()-1, sequence.distance());
        this.assertEquals(any2int64(1), sequence.step());

        this.assertEquals(int64Max(), sequence.estimatedIterations());
    }

    void testEmpty()
    {
        int64 start = 5;
        int64 end = 2;
        int64 step = 1;
        int64 iterations = 0;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testGetEnumerator()
    {
        int64 start = 2;
        int64 end = 5;
        int64 step = 1;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);
        SysEnumerator se = sequence.getEnumerator();

        this.assertNotNull(se);
        this.assertNotNull(se.enumerators());
    }

    void testGetNext()
    {
        int64 start = 2;
        int64 end = 5;
        int64 step = 1;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertEquals(start + step, sequence.getNext(start));
        this.assertEquals(end + step, sequence.getNext(end));
    }

    void testMinMax1()
    {
        int64 start = int64Min();
        int64 end = int64Max();
        int64 step = 1;
        int64 iterations = int64Max();

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinMax2()
    {
        int64 start = int64Min();
        int64 end = int64Max();
        int64 step = 2;
        int64 iterations = int64Max();

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinMax3()
    {
        int64 start = int64Min();
        int64 end = int64Max();
        int64 step = 3;
        int64 iterations = int64Max();

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinusMax1()
    {
        int64 start = -1;
        int64 end = int64Max();
        int64 step = 1;
        int64 iterations = int64Max();

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinusMax2()
    {
        int64 start = -1;
        int64 end = int64Max();
        int64 step = 2;
        int64 iterations = int64Max();

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testMinusMax3()
    {
        int64 start = -1;
        int64 end = int64Max();
        int64 step = 3;
        int64 iterations = int64Max();

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testNegative1()
    {
        int64 start = -5;
        int64 end = 2;
        int64 step = 1;
        int64 iterations = 8;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testNegative3()
    {
        int64 start = -5;
        int64 end = 2;
        int64 step = 3;
        int64 iterations = 3;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testNegative9()
    {
        int64 start = -5;
        int64 end = 2;
        int64 step = 9;
        int64 iterations = 1;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(start, sequence.start());
        this.assertEquals(end, sequence.end());
        this.assertEquals(end - start, sequence.distance());
        this.assertEquals(step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse1()
    {
        int64 start = -5;
        int64 end = 2;
        int64 step = 1;
        int64 iterations = 8;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse3()
    {
        int64 start = -5;
        int64 end = 2;
        int64 step = 3;
        int64 iterations = 3;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testReverse9()
    {
        int64 start = -5;
        int64 end = 2;
        int64 step = 9;
        int64 iterations = 1;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step).reverse();

        this.assertNotNull(sequence);
        this.assertEquals(end, sequence.start());
        this.assertEquals(start, sequence.end());
        this.assertEquals(start - end, sequence.distance());
        this.assertEquals(-step, sequence.step());

        this.assertEquals(iterations, sequence.estimatedIterations());
    }

    void testToString()
    {
        int64 start = 2;
        int64 end = 5;
        int64 step = 1;

        SysSequenceInt64 sequence = SysSequenceInt64::construct(start, end, step);

        this.assertNotNull(sequence);
        this.assertEquals(strfmt('%3:[%1..%2]', start, end, step), sequence.toString());
    }
}